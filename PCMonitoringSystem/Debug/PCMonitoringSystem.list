
PCMonitoringSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e46c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800e610  0800e610  0000f610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebb4  0800ebb4  000101d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebb4  0800ebb4  0000fbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebbc  0800ebbc  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebbc  0800ebbc  0000fbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ebc0  0800ebc0  0000fbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ebc4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000458c  200001d8  0800ed9c  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004764  0800ed9c  00010764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001899f  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003708  00000000  00000000  00028ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  0002c2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001101  00000000  00000000  0002d878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b8a  00000000  00000000  0002e979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000199db  00000000  00000000  00048503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ad8f  00000000  00000000  00061ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcc6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007144  00000000  00000000  000fccb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00103df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e5f4 	.word	0x0800e5f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800e5f4 	.word	0x0800e5f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <AM2320_ReadTemperature>:

HAL_StatusTypeDef AM2320_Init(I2C_HandleTypeDef *hi2c) {
	return HAL_I2C_Master_Transmit(hi2c, SENSOR_ADDRESS << 1, 0x00, 0, HAL_MAX_DELAY);
}

HAL_StatusTypeDef AM2320_ReadTemperature(I2C_HandleTypeDef *hi2c, float *temperature) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
	// cmd + start address + num of regs
	uint8_t msg[3] = {0x03, 0x02, 0x02};
 8000ffe:	4a29      	ldr	r2, [pc, #164]	@ (80010a4 <AM2320_ReadTemperature+0xb0>)
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	6812      	ldr	r2, [r2, #0]
 8001006:	4611      	mov	r1, r2
 8001008:	8019      	strh	r1, [r3, #0]
 800100a:	3302      	adds	r3, #2
 800100c:	0c12      	lsrs	r2, r2, #16
 800100e:	701a      	strb	r2, [r3, #0]
	uint8_t temp_data[8];

	HAL_I2C_Master_Transmit(hi2c, SENSOR_ADDRESS << 1, 0x02, 0, HAL_MAX_DELAY);
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2300      	movs	r3, #0
 8001018:	2202      	movs	r2, #2
 800101a:	21b8      	movs	r1, #184	@ 0xb8
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f002 fadd 	bl	80035dc <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f001 facc 	bl	80025c0 <HAL_Delay>

	// Send command to read temperature
    if (HAL_I2C_Master_Transmit(hi2c, SENSOR_ADDRESS << 1, msg, 3, HAL_MAX_DELAY) != HAL_OK) {
 8001028:	f107 0210 	add.w	r2, r7, #16
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2303      	movs	r3, #3
 8001034:	21b8      	movs	r1, #184	@ 0xb8
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f002 fad0 	bl	80035dc <HAL_I2C_Master_Transmit>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <AM2320_ReadTemperature+0x52>
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e029      	b.n	800109a <AM2320_ReadTemperature+0xa6>
    }
    HAL_Delay(2);
 8001046:	2002      	movs	r0, #2
 8001048:	f001 faba 	bl	80025c0 <HAL_Delay>

    // Receive temperature data
    if (HAL_I2C_Master_Receive(hi2c, SENSOR_ADDRESS << 1, temp_data, 8, HAL_MAX_DELAY) != HAL_OK) {
 800104c:	f107 0208 	add.w	r2, r7, #8
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2308      	movs	r3, #8
 8001058:	21b8      	movs	r1, #184	@ 0xb8
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f002 fbbc 	bl	80037d8 <HAL_I2C_Master_Receive>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <AM2320_ReadTemperature+0x76>
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e017      	b.n	800109a <AM2320_ReadTemperature+0xa6>
    }
    HAL_Delay(2);
 800106a:	2002      	movs	r0, #2
 800106c:	f001 faa8 	bl	80025c0 <HAL_Delay>

    // Convert received data to temperature
    uint16_t raw_temp = (temp_data[2] << 8) | temp_data[3];
 8001070:	7abb      	ldrb	r3, [r7, #10]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	7afb      	ldrb	r3, [r7, #11]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	82fb      	strh	r3, [r7, #22]
    *temperature = (float) raw_temp / 10;
 8001080:	8afb      	ldrh	r3, [r7, #22]
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800108a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800108e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	edc3 7a00 	vstr	s15, [r3]

    return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	0800e610 	.word	0x0800e610

080010a8 <AM2320_ReadHumidity>:

HAL_StatusTypeDef AM2320_ReadHumidity(I2C_HandleTypeDef *hi2c, float *humidity) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
	// cmd + start address + num of regs
	uint8_t msg[3] = {0x03, 0x00, 0x02};
 80010b2:	4a29      	ldr	r2, [pc, #164]	@ (8001158 <AM2320_ReadHumidity+0xb0>)
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	4611      	mov	r1, r2
 80010bc:	8019      	strh	r1, [r3, #0]
 80010be:	3302      	adds	r3, #2
 80010c0:	0c12      	lsrs	r2, r2, #16
 80010c2:	701a      	strb	r2, [r3, #0]
	uint8_t humidity_data[8];

	HAL_I2C_Master_Transmit(hi2c, SENSOR_ADDRESS << 1, 0x00, 0, HAL_MAX_DELAY);
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2300      	movs	r3, #0
 80010cc:	2200      	movs	r2, #0
 80010ce:	21b8      	movs	r1, #184	@ 0xb8
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f002 fa83 	bl	80035dc <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f001 fa72 	bl	80025c0 <HAL_Delay>

	// Send command to read temperature
    if (HAL_I2C_Master_Transmit(hi2c, SENSOR_ADDRESS << 1, msg, 3, HAL_MAX_DELAY) != HAL_OK) {
 80010dc:	f107 0210 	add.w	r2, r7, #16
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2303      	movs	r3, #3
 80010e8:	21b8      	movs	r1, #184	@ 0xb8
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f002 fa76 	bl	80035dc <HAL_I2C_Master_Transmit>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <AM2320_ReadHumidity+0x52>
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e029      	b.n	800114e <AM2320_ReadHumidity+0xa6>
    }
    HAL_Delay(2);
 80010fa:	2002      	movs	r0, #2
 80010fc:	f001 fa60 	bl	80025c0 <HAL_Delay>

    // Receive temperature data
    if (HAL_I2C_Master_Receive(hi2c, SENSOR_ADDRESS << 1, humidity_data, 8, HAL_MAX_DELAY) != HAL_OK) {
 8001100:	f107 0208 	add.w	r2, r7, #8
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2308      	movs	r3, #8
 800110c:	21b8      	movs	r1, #184	@ 0xb8
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f002 fb62 	bl	80037d8 <HAL_I2C_Master_Receive>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <AM2320_ReadHumidity+0x76>
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e017      	b.n	800114e <AM2320_ReadHumidity+0xa6>
    }
    HAL_Delay(2);
 800111e:	2002      	movs	r0, #2
 8001120:	f001 fa4e 	bl	80025c0 <HAL_Delay>

    // Convert received data to temperature
    uint16_t raw_humidity = (humidity_data[2] << 8) | humidity_data[3];
 8001124:	7abb      	ldrb	r3, [r7, #10]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21a      	sxth	r2, r3
 800112a:	7afb      	ldrb	r3, [r7, #11]
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21b      	sxth	r3, r3
 8001132:	82fb      	strh	r3, [r7, #22]
    *humidity = (float) raw_humidity / 10;
 8001134:	8afb      	ldrh	r3, [r7, #22]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800113e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001142:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	edc3 7a00 	vstr	s15, [r3]

    return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	0800e614 	.word	0x0800e614

0800115c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4a07      	ldr	r2, [pc, #28]	@ (8001188 <vApplicationGetIdleTaskMemory+0x2c>)
 800116c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	4a06      	ldr	r2, [pc, #24]	@ (800118c <vApplicationGetIdleTaskMemory+0x30>)
 8001172:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2280      	movs	r2, #128	@ 0x80
 8001178:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200001f4 	.word	0x200001f4
 800118c:	20000294 	.word	0x20000294

08001190 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;
#define SLAVE_ADDRESS_LCD 0x4E // default address

// rs is 0 for commands
void lcd_send_cmd (char cmd)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af02      	add	r7, sp, #8
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f023 030f 	bic.w	r3, r3, #15
 80011a0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	f043 030c 	orr.w	r3, r3, #12
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80011bc:	7bbb      	ldrb	r3, [r7, #14]
 80011be:	f043 030c 	orr.w	r3, r3, #12
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80011c6:	7bbb      	ldrb	r3, [r7, #14]
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011d0:	f107 0208 	add.w	r2, r7, #8
 80011d4:	2364      	movs	r3, #100	@ 0x64
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2304      	movs	r3, #4
 80011da:	214e      	movs	r1, #78	@ 0x4e
 80011dc:	4803      	ldr	r0, [pc, #12]	@ (80011ec <lcd_send_cmd+0x5c>)
 80011de:	f002 f9fd 	bl	80035dc <HAL_I2C_Master_Transmit>
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000494 	.word	0x20000494

080011f0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f023 030f 	bic.w	r3, r3, #15
 8001200:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	f043 030d 	orr.w	r3, r3, #13
 800120e:	b2db      	uxtb	r3, r3
 8001210:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	f043 0309 	orr.w	r3, r3, #9
 8001218:	b2db      	uxtb	r3, r3
 800121a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 800121c:	7bbb      	ldrb	r3, [r7, #14]
 800121e:	f043 030d 	orr.w	r3, r3, #13
 8001222:	b2db      	uxtb	r3, r3
 8001224:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	f043 0309 	orr.w	r3, r3, #9
 800122c:	b2db      	uxtb	r3, r3
 800122e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001230:	f107 0208 	add.w	r2, r7, #8
 8001234:	2364      	movs	r3, #100	@ 0x64
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2304      	movs	r3, #4
 800123a:	214e      	movs	r1, #78	@ 0x4e
 800123c:	4803      	ldr	r0, [pc, #12]	@ (800124c <lcd_send_data+0x5c>)
 800123e:	f002 f9cd 	bl	80035dc <HAL_I2C_Master_Transmit>
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000494 	.word	0x20000494

08001250 <lcd_init>:

void lcd_init (void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	// 4 bit initialization
	HAL_Delay(50);  // wait for >40ms
 8001254:	2032      	movs	r0, #50	@ 0x32
 8001256:	f001 f9b3 	bl	80025c0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800125a:	2030      	movs	r0, #48	@ 0x30
 800125c:	f7ff ff98 	bl	8001190 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001260:	2005      	movs	r0, #5
 8001262:	f001 f9ad 	bl	80025c0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001266:	2030      	movs	r0, #48	@ 0x30
 8001268:	f7ff ff92 	bl	8001190 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800126c:	2001      	movs	r0, #1
 800126e:	f001 f9a7 	bl	80025c0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001272:	2030      	movs	r0, #48	@ 0x30
 8001274:	f7ff ff8c 	bl	8001190 <lcd_send_cmd>
	HAL_Delay(10);
 8001278:	200a      	movs	r0, #10
 800127a:	f001 f9a1 	bl	80025c0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800127e:	2020      	movs	r0, #32
 8001280:	f7ff ff86 	bl	8001190 <lcd_send_cmd>
	HAL_Delay(10);
 8001284:	200a      	movs	r0, #10
 8001286:	f001 f99b 	bl	80025c0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800128a:	2028      	movs	r0, #40	@ 0x28
 800128c:	f7ff ff80 	bl	8001190 <lcd_send_cmd>
	HAL_Delay(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f001 f995 	bl	80025c0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001296:	2008      	movs	r0, #8
 8001298:	f7ff ff7a 	bl	8001190 <lcd_send_cmd>
	HAL_Delay(1);
 800129c:	2001      	movs	r0, #1
 800129e:	f001 f98f 	bl	80025c0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80012a2:	2001      	movs	r0, #1
 80012a4:	f7ff ff74 	bl	8001190 <lcd_send_cmd>
	HAL_Delay(1);
 80012a8:	2001      	movs	r0, #1
 80012aa:	f001 f989 	bl	80025c0 <HAL_Delay>
	HAL_Delay(1);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f001 f986 	bl	80025c0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80012b4:	2006      	movs	r0, #6
 80012b6:	f7ff ff6b 	bl	8001190 <lcd_send_cmd>
	HAL_Delay(1);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f001 f980 	bl	80025c0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80012c0:	200c      	movs	r0, #12
 80012c2:	f7ff ff65 	bl	8001190 <lcd_send_cmd>
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}

080012ca <lcd_cursor_pos>:

void lcd_cursor_pos (int row, int col) {
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
	uint8_t address;
	if (row == 0) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <lcd_cursor_pos+0x16>
		address = col;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	e016      	b.n	800130e <lcd_cursor_pos+0x44>
	}
	else if (row == 1) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d104      	bne.n	80012f0 <lcd_cursor_pos+0x26>
		address = 0x40 + col;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	3340      	adds	r3, #64	@ 0x40
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	e00e      	b.n	800130e <lcd_cursor_pos+0x44>
	}
	else if (row == 2) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d104      	bne.n	8001300 <lcd_cursor_pos+0x36>
		address = 0x14 + col;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	3314      	adds	r3, #20
 80012fc:	73fb      	strb	r3, [r7, #15]
 80012fe:	e006      	b.n	800130e <lcd_cursor_pos+0x44>
	}
	else if (row == 3) {
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b03      	cmp	r3, #3
 8001304:	d10b      	bne.n	800131e <lcd_cursor_pos+0x54>
		address = 0x54 + col;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	3354      	adds	r3, #84	@ 0x54
 800130c:	73fb      	strb	r3, [r7, #15]
	}
	else {
		return;
	}
	lcd_send_cmd(0x80 | address);
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff3a 	bl	8001190 <lcd_send_cmd>
 800131c:	e000      	b.n	8001320 <lcd_cursor_pos+0x56>
		return;
 800131e:	bf00      	nop
}
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800132e:	e006      	b.n	800133e <lcd_send_string+0x18>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff59 	bl	80011f0 <lcd_send_data>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f4      	bne.n	8001330 <lcd_send_string+0xa>
}
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <lcd_clear_display>:

void lcd_clear_display (void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001356:	2080      	movs	r0, #128	@ 0x80
 8001358:	f7ff ff1a 	bl	8001190 <lcd_send_cmd>
	for (int i = 0; i < 70; i++) {
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	e005      	b.n	800136e <lcd_clear_display+0x1e>
		lcd_send_data(' ');
 8001362:	2020      	movs	r0, #32
 8001364:	f7ff ff44 	bl	80011f0 <lcd_send_data>
	for (int i = 0; i < 70; i++) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3301      	adds	r3, #1
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b45      	cmp	r3, #69	@ 0x45
 8001372:	ddf6      	ble.n	8001362 <lcd_clear_display+0x12>
	}
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b0a4      	sub	sp, #144	@ 0x90
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001386:	f001 f8d9 	bl	800253c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138a:	f000 f89d 	bl	80014c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138e:	f000 fa4b 	bl	8001828 <MX_GPIO_Init>
  MX_DMA_Init();
 8001392:	f000 fa01 	bl	8001798 <MX_DMA_Init>
  MX_I2C1_Init();
 8001396:	f000 f901 	bl	800159c <MX_I2C1_Init>
  MX_I2C3_Init();
 800139a:	f000 f92d 	bl	80015f8 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 800139e:	f000 f9d1 	bl	8001744 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80013a2:	f000 f957 	bl	8001654 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80013a6:	f7ff ff53 	bl	8001250 <lcd_init>
  lcd_clear_display();
 80013aa:	f7ff ffd1 	bl	8001350 <lcd_clear_display>

  //lcd_cursor_pos(0, 0);
  //lcd_send_string("PC Monitoring System");

  lcd_cursor_pos(0, 0);
 80013ae:	2100      	movs	r1, #0
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff ff8a 	bl	80012ca <lcd_cursor_pos>
  lcd_send_string("Temperature:");
 80013b6:	4837      	ldr	r0, [pc, #220]	@ (8001494 <main+0x114>)
 80013b8:	f7ff ffb5 	bl	8001326 <lcd_send_string>

  lcd_cursor_pos(1, 0);
 80013bc:	2100      	movs	r1, #0
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff ff83 	bl	80012ca <lcd_cursor_pos>
  lcd_send_string("Humidity:");
 80013c4:	4834      	ldr	r0, [pc, #208]	@ (8001498 <main+0x118>)
 80013c6:	f7ff ffae 	bl	8001326 <lcd_send_string>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013ca:	2100      	movs	r1, #0
 80013cc:	4833      	ldr	r0, [pc, #204]	@ (800149c <main+0x11c>)
 80013ce:	f005 fa65 	bl	800689c <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of DefaultTask */
  osThreadDef(DefaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80013d2:	4b33      	ldr	r3, [pc, #204]	@ (80014a0 <main+0x120>)
 80013d4:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80013d8:	461d      	mov	r5, r3
 80013da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DefaultTaskHandle = osThreadCreate(osThread(DefaultTask), NULL);
 80013e6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f007 fa24 	bl	800883a <osThreadCreate>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a2b      	ldr	r2, [pc, #172]	@ (80014a4 <main+0x124>)
 80013f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of DisplayTask */
  osThreadDef(DisplayTask, StartDisplayTask, osPriorityNormal, 0, 256);
 80013f8:	4b2b      	ldr	r3, [pc, #172]	@ (80014a8 <main+0x128>)
 80013fa:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80013fe:	461d      	mov	r5, r3
 8001400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001404:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001408:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayTaskHandle = osThreadCreate(osThread(DisplayTask), NULL);
 800140c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f007 fa11 	bl	800883a <osThreadCreate>
 8001418:	4603      	mov	r3, r0
 800141a:	4a24      	ldr	r2, [pc, #144]	@ (80014ac <main+0x12c>)
 800141c:	6013      	str	r3, [r2, #0]

  /* definition and creation of SensorTask */
  osThreadDef(SensorTask, StartSensorTask, osPriorityNormal, 0, 256);
 800141e:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <main+0x130>)
 8001420:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001424:	461d      	mov	r5, r3
 8001426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800142e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8001432:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f007 f9fe 	bl	800883a <osThreadCreate>
 800143e:	4603      	mov	r3, r0
 8001440:	4a1c      	ldr	r2, [pc, #112]	@ (80014b4 <main+0x134>)
 8001442:	6013      	str	r3, [r2, #0]

  /* definition and creation of SysTask */
  osThreadDef(SysTask, StartSysTask, osPriorityNormal, 0, 256);
 8001444:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <main+0x138>)
 8001446:	f107 0420 	add.w	r4, r7, #32
 800144a:	461d      	mov	r5, r3
 800144c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001450:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001454:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SysTaskHandle = osThreadCreate(osThread(SysTask), NULL);
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f007 f9eb 	bl	800883a <osThreadCreate>
 8001464:	4603      	mov	r3, r0
 8001466:	4a15      	ldr	r2, [pc, #84]	@ (80014bc <main+0x13c>)
 8001468:	6013      	str	r3, [r2, #0]

  /* definition and creation of SndTask */
  osThreadDef(SndTask, StartSndTask, osPriorityNormal, 0, 256);
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <main+0x140>)
 800146c:	1d3c      	adds	r4, r7, #4
 800146e:	461d      	mov	r5, r3
 8001470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001474:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001478:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SndTaskHandle = osThreadCreate(osThread(SndTask), NULL);
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f007 f9da 	bl	800883a <osThreadCreate>
 8001486:	4603      	mov	r3, r0
 8001488:	4a0e      	ldr	r2, [pc, #56]	@ (80014c4 <main+0x144>)
 800148a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800148c:	f007 f9ce 	bl	800882c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <main+0x110>
 8001494:	0800e618 	.word	0x0800e618
 8001498:	0800e628 	.word	0x0800e628
 800149c:	200006bc 	.word	0x200006bc
 80014a0:	0800e640 	.word	0x0800e640
 80014a4:	2000080c 	.word	0x2000080c
 80014a8:	0800e668 	.word	0x0800e668
 80014ac:	20000810 	.word	0x20000810
 80014b0:	0800e690 	.word	0x0800e690
 80014b4:	20000814 	.word	0x20000814
 80014b8:	0800e6b4 	.word	0x0800e6b4
 80014bc:	20000818 	.word	0x20000818
 80014c0:	0800e6d8 	.word	0x0800e6d8
 80014c4:	2000081c 	.word	0x2000081c

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b094      	sub	sp, #80	@ 0x50
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	2230      	movs	r2, #48	@ 0x30
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f009 fbf1 	bl	800acbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	4b28      	ldr	r3, [pc, #160]	@ (8001594 <SystemClock_Config+0xcc>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f4:	4a27      	ldr	r2, [pc, #156]	@ (8001594 <SystemClock_Config+0xcc>)
 80014f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fc:	4b25      	ldr	r3, [pc, #148]	@ (8001594 <SystemClock_Config+0xcc>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	4b22      	ldr	r3, [pc, #136]	@ (8001598 <SystemClock_Config+0xd0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001514:	4a20      	ldr	r2, [pc, #128]	@ (8001598 <SystemClock_Config+0xd0>)
 8001516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b1e      	ldr	r3, [pc, #120]	@ (8001598 <SystemClock_Config+0xd0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001528:	2302      	movs	r3, #2
 800152a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152c:	2301      	movs	r3, #1
 800152e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001530:	2310      	movs	r3, #16
 8001532:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001534:	2302      	movs	r3, #2
 8001536:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001538:	2300      	movs	r3, #0
 800153a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800153c:	2308      	movs	r3, #8
 800153e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001540:	233c      	movs	r3, #60	@ 0x3c
 8001542:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001544:	2302      	movs	r3, #2
 8001546:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001548:	2307      	movs	r3, #7
 800154a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154c:	f107 0320 	add.w	r3, r7, #32
 8001550:	4618      	mov	r0, r3
 8001552:	f004 fbcd 	bl	8005cf0 <HAL_RCC_OscConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800155c:	f000 fb20 	bl	8001ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001560:	230f      	movs	r3, #15
 8001562:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001564:	2302      	movs	r3, #2
 8001566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800156c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2101      	movs	r1, #1
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fe2f 	bl	80061e0 <HAL_RCC_ClockConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001588:	f000 fb0a 	bl	8001ba0 <Error_Handler>
  }
}
 800158c:	bf00      	nop
 800158e:	3750      	adds	r7, #80	@ 0x50
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000

0800159c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015a2:	4a13      	ldr	r2, [pc, #76]	@ (80015f0 <MX_I2C1_Init+0x54>)
 80015a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015a8:	4a12      	ldr	r2, [pc, #72]	@ (80015f4 <MX_I2C1_Init+0x58>)
 80015aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015c6:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015cc:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015da:	f001 fea5 	bl	8003328 <HAL_I2C_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015e4:	f000 fadc 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000494 	.word	0x20000494
 80015f0:	40005400 	.word	0x40005400
 80015f4:	000186a0 	.word	0x000186a0

080015f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015fc:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <MX_I2C3_Init+0x50>)
 80015fe:	4a13      	ldr	r2, [pc, #76]	@ (800164c <MX_I2C3_Init+0x54>)
 8001600:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001602:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <MX_I2C3_Init+0x50>)
 8001604:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <MX_I2C3_Init+0x58>)
 8001606:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001608:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <MX_I2C3_Init+0x50>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <MX_I2C3_Init+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <MX_I2C3_Init+0x50>)
 8001616:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800161a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <MX_I2C3_Init+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <MX_I2C3_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <MX_I2C3_Init+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <MX_I2C3_Init+0x50>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	@ (8001648 <MX_I2C3_Init+0x50>)
 8001636:	f001 fe77 	bl	8003328 <HAL_I2C_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001640:	f000 faae 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200004e8 	.word	0x200004e8
 800164c:	40005c00 	.word	0x40005c00
 8001650:	000186a0 	.word	0x000186a0

08001654 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08e      	sub	sp, #56	@ 0x38
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	f107 0320 	add.w	r3, r7, #32
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
 8001680:	615a      	str	r2, [r3, #20]
 8001682:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001684:	4b2d      	ldr	r3, [pc, #180]	@ (800173c <MX_TIM3_Init+0xe8>)
 8001686:	4a2e      	ldr	r2, [pc, #184]	@ (8001740 <MX_TIM3_Init+0xec>)
 8001688:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800168a:	4b2c      	ldr	r3, [pc, #176]	@ (800173c <MX_TIM3_Init+0xe8>)
 800168c:	2200      	movs	r2, #0
 800168e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001690:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <MX_TIM3_Init+0xe8>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001696:	4b29      	ldr	r3, [pc, #164]	@ (800173c <MX_TIM3_Init+0xe8>)
 8001698:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800169c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169e:	4b27      	ldr	r3, [pc, #156]	@ (800173c <MX_TIM3_Init+0xe8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a4:	4b25      	ldr	r3, [pc, #148]	@ (800173c <MX_TIM3_Init+0xe8>)
 80016a6:	2280      	movs	r2, #128	@ 0x80
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016aa:	4824      	ldr	r0, [pc, #144]	@ (800173c <MX_TIM3_Init+0xe8>)
 80016ac:	f004 ffea 	bl	8006684 <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016b6:	f000 fa73 	bl	8001ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016c4:	4619      	mov	r1, r3
 80016c6:	481d      	ldr	r0, [pc, #116]	@ (800173c <MX_TIM3_Init+0xe8>)
 80016c8:	f005 fb4a 	bl	8006d60 <HAL_TIM_ConfigClockSource>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016d2:	f000 fa65 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016d6:	4819      	ldr	r0, [pc, #100]	@ (800173c <MX_TIM3_Init+0xe8>)
 80016d8:	f005 f886 	bl	80067e8 <HAL_TIM_PWM_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80016e2:	f000 fa5d 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	4619      	mov	r1, r3
 80016f4:	4811      	ldr	r0, [pc, #68]	@ (800173c <MX_TIM3_Init+0xe8>)
 80016f6:	f005 fefb 	bl	80074f0 <HAL_TIMEx_MasterConfigSynchronization>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001700:	f000 fa4e 	bl	8001ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001704:	2360      	movs	r3, #96	@ 0x60
 8001706:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001708:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800170c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	4807      	ldr	r0, [pc, #28]	@ (800173c <MX_TIM3_Init+0xe8>)
 800171e:	f005 fa5d 	bl	8006bdc <HAL_TIM_PWM_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001728:	f000 fa3a 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800172c:	4803      	ldr	r0, [pc, #12]	@ (800173c <MX_TIM3_Init+0xe8>)
 800172e:	f000 fc19 	bl	8001f64 <HAL_TIM_MspPostInit>

}
 8001732:	bf00      	nop
 8001734:	3738      	adds	r7, #56	@ 0x38
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200006bc 	.word	0x200006bc
 8001740:	40000400 	.word	0x40000400

08001744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <MX_USART2_UART_Init+0x4c>)
 800174a:	4a12      	ldr	r2, [pc, #72]	@ (8001794 <MX_USART2_UART_Init+0x50>)
 800174c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <MX_USART2_UART_Init+0x4c>)
 8001750:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001756:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <MX_USART2_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800175c:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <MX_USART2_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001762:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <MX_USART2_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001768:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <MX_USART2_UART_Init+0x4c>)
 800176a:	220c      	movs	r2, #12
 800176c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176e:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <MX_USART2_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <MX_USART2_UART_Init+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	@ (8001790 <MX_USART2_UART_Init+0x4c>)
 800177c:	f005 ff3a 	bl	80075f4 <HAL_UART_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001786:	f000 fa0b 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000704 	.word	0x20000704
 8001794:	40004400 	.word	0x40004400

08001798 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <MX_DMA_Init+0x8c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001824 <MX_DMA_Init+0x8c>)
 80017a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001824 <MX_DMA_Init+0x8c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2105      	movs	r1, #5
 80017be:	200b      	movs	r0, #11
 80017c0:	f000 ffda 	bl	8002778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80017c4:	200b      	movs	r0, #11
 80017c6:	f000 fff3 	bl	80027b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2105      	movs	r1, #5
 80017ce:	200c      	movs	r0, #12
 80017d0:	f000 ffd2 	bl	8002778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80017d4:	200c      	movs	r0, #12
 80017d6:	f000 ffeb 	bl	80027b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2105      	movs	r1, #5
 80017de:	200f      	movs	r0, #15
 80017e0:	f000 ffca 	bl	8002778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80017e4:	200f      	movs	r0, #15
 80017e6:	f000 ffe3 	bl	80027b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2105      	movs	r1, #5
 80017ee:	2010      	movs	r0, #16
 80017f0:	f000 ffc2 	bl	8002778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017f4:	2010      	movs	r0, #16
 80017f6:	f000 ffdb 	bl	80027b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2105      	movs	r1, #5
 80017fe:	2011      	movs	r0, #17
 8001800:	f000 ffba 	bl	8002778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001804:	2011      	movs	r0, #17
 8001806:	f000 ffd3 	bl	80027b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2105      	movs	r1, #5
 800180e:	202f      	movs	r0, #47	@ 0x2f
 8001810:	f000 ffb2 	bl	8002778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001814:	202f      	movs	r0, #47	@ 0x2f
 8001816:	f000 ffcb 	bl	80027b0 <HAL_NVIC_EnableIRQ>

}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	@ 0x28
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b2d      	ldr	r3, [pc, #180]	@ (80018f8 <MX_GPIO_Init+0xd0>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a2c      	ldr	r2, [pc, #176]	@ (80018f8 <MX_GPIO_Init+0xd0>)
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b2a      	ldr	r3, [pc, #168]	@ (80018f8 <MX_GPIO_Init+0xd0>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b26      	ldr	r3, [pc, #152]	@ (80018f8 <MX_GPIO_Init+0xd0>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a25      	ldr	r2, [pc, #148]	@ (80018f8 <MX_GPIO_Init+0xd0>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <MX_GPIO_Init+0xd0>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <MX_GPIO_Init+0xd0>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	4a1e      	ldr	r2, [pc, #120]	@ (80018f8 <MX_GPIO_Init+0xd0>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	@ 0x30
 8001886:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <MX_GPIO_Init+0xd0>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <MX_GPIO_Init+0xd0>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	4a17      	ldr	r2, [pc, #92]	@ (80018f8 <MX_GPIO_Init+0xd0>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <MX_GPIO_Init+0xd0>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2120      	movs	r1, #32
 80018b2:	4812      	ldr	r0, [pc, #72]	@ (80018fc <MX_GPIO_Init+0xd4>)
 80018b4:	f001 fd1e 	bl	80032f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	480c      	ldr	r0, [pc, #48]	@ (8001900 <MX_GPIO_Init+0xd8>)
 80018d0:	f001 fb8c 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018d4:	2320      	movs	r3, #32
 80018d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	4804      	ldr	r0, [pc, #16]	@ (80018fc <MX_GPIO_Init+0xd4>)
 80018ec:	f001 fb7e 	bl	8002fec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018f0:	bf00      	nop
 80018f2:	3728      	adds	r7, #40	@ 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020800 	.word	0x40020800

08001904 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	processReceivedData(receiveBuffer, RECEIVE_SIZE);
 800190c:	2117      	movs	r1, #23
 800190e:	4805      	ldr	r0, [pc, #20]	@ (8001924 <HAL_UART_RxCpltCallback+0x20>)
 8001910:	f000 f80c 	bl	800192c <processReceivedData>
	UARTFlag = 1;
 8001914:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <HAL_UART_RxCpltCallback+0x24>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	2000083c 	.word	0x2000083c
 8001928:	20000870 	.word	0x20000870

0800192c <processReceivedData>:

void processReceivedData(uint8_t *data, uint16_t length)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	807b      	strh	r3, [r7, #2]
  /* Ensure null-termination of the received data for string operations */
  //data[length] = '\0';

  /* Convert to string if needed */
  //char receivedString[RX_BUFFER_SIZE + 1];
  strncpy(processedBuffer, (char *)data, length + 1);
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	3301      	adds	r3, #1
 800193c:	461a      	mov	r2, r3
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4803      	ldr	r0, [pc, #12]	@ (8001950 <processReceivedData+0x24>)
 8001942:	f009 f9c4 	bl	800acce <strncpy>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000854 	.word	0x20000854

08001954 <make_sound>:

void make_sound(){
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_PRESCALER(&htim3, presForFrequency(1000));
 8001958:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800195c:	f000 f838 	bl	80019d0 <presForFrequency>
 8001960:	4602      	mov	r2, r0
 8001962:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <make_sound+0x78>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 8001968:	20fa      	movs	r0, #250	@ 0xfa
 800196a:	f000 fe29 	bl	80025c0 <HAL_Delay>
	__HAL_TIM_SET_PRESCALER(&htim3, presForFrequency(3000));
 800196e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001972:	f000 f82d 	bl	80019d0 <presForFrequency>
 8001976:	4602      	mov	r2, r0
 8001978:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <make_sound+0x78>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 800197e:	20fa      	movs	r0, #250	@ 0xfa
 8001980:	f000 fe1e 	bl	80025c0 <HAL_Delay>
	__HAL_TIM_SET_PRESCALER(&htim3, presForFrequency(6000));
 8001984:	f241 7070 	movw	r0, #6000	@ 0x1770
 8001988:	f000 f822 	bl	80019d0 <presForFrequency>
 800198c:	4602      	mov	r2, r0
 800198e:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <make_sound+0x78>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 8001994:	20fa      	movs	r0, #250	@ 0xfa
 8001996:	f000 fe13 	bl	80025c0 <HAL_Delay>
	__HAL_TIM_SET_PRESCALER(&htim3, presForFrequency(9000));
 800199a:	f242 3028 	movw	r0, #9000	@ 0x2328
 800199e:	f000 f817 	bl	80019d0 <presForFrequency>
 80019a2:	4602      	mov	r2, r0
 80019a4:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <make_sound+0x78>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 80019aa:	20fa      	movs	r0, #250	@ 0xfa
 80019ac:	f000 fe08 	bl	80025c0 <HAL_Delay>
	__HAL_TIM_SET_PRESCALER(&htim3, presForFrequency(12000));
 80019b0:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 80019b4:	f000 f80c 	bl	80019d0 <presForFrequency>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4b04      	ldr	r3, [pc, #16]	@ (80019cc <make_sound+0x78>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 80019c0:	20fa      	movs	r0, #250	@ 0xfa
 80019c2:	f000 fdfd 	bl	80025c0 <HAL_Delay>
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200006bc 	.word	0x200006bc

080019d0 <presForFrequency>:

int presForFrequency (int frequency)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	if (frequency == 0) return 0;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <presForFrequency+0x12>
 80019de:	2300      	movs	r3, #0
 80019e0:	e008      	b.n	80019f4 <presForFrequency+0x24>
	return ((TIM_FREQ/(1000*frequency))-1);  // 1 is added in the register
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	4a04      	ldr	r2, [pc, #16]	@ (8001a00 <presForFrequency+0x30>)
 80019ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80019f2:	3b01      	subs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	03938700 	.word	0x03938700

08001a04 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
    // This function is called if a stack overflow is detected
    counter = -1;
 8001a0e:	4b03      	ldr	r3, [pc, #12]	@ (8001a1c <vApplicationStackOverflowHook+0x18>)
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	601a      	str	r2, [r3, #0]

    // Halt execution or perform appropriate error handling
    while (1);  // Infinite loop to halt the system
 8001a16:	bf00      	nop
 8001a18:	e7fd      	b.n	8001a16 <vApplicationStackOverflowHook+0x12>
 8001a1a:	bf00      	nop
 8001a1c:	2000086c 	.word	0x2000086c

08001a20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(200);
 8001a28:	20c8      	movs	r0, #200	@ 0xc8
 8001a2a:	f006 ff52 	bl	80088d2 <osDelay>
 8001a2e:	e7fb      	b.n	8001a28 <StartDefaultTask+0x8>

08001a30 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
	  snprintf(tempBuffer, 20, "%.2f", temperature);
 8001a38:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <StartDisplayTask+0x68>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fd8b 	bl	8000558 <__aeabi_f2d>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	e9cd 2300 	strd	r2, r3, [sp]
 8001a4a:	4a14      	ldr	r2, [pc, #80]	@ (8001a9c <StartDisplayTask+0x6c>)
 8001a4c:	2114      	movs	r1, #20
 8001a4e:	4814      	ldr	r0, [pc, #80]	@ (8001aa0 <StartDisplayTask+0x70>)
 8001a50:	f009 f89e 	bl	800ab90 <sniprintf>
	  lcd_cursor_pos(0, 13);
 8001a54:	210d      	movs	r1, #13
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff fc37 	bl	80012ca <lcd_cursor_pos>
	  lcd_send_string(tempBuffer);
 8001a5c:	4810      	ldr	r0, [pc, #64]	@ (8001aa0 <StartDisplayTask+0x70>)
 8001a5e:	f7ff fc62 	bl	8001326 <lcd_send_string>

	  snprintf(tempBuffer, 20, "%.2f", humidity);
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <StartDisplayTask+0x74>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd76 	bl	8000558 <__aeabi_f2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	e9cd 2300 	strd	r2, r3, [sp]
 8001a74:	4a09      	ldr	r2, [pc, #36]	@ (8001a9c <StartDisplayTask+0x6c>)
 8001a76:	2114      	movs	r1, #20
 8001a78:	4809      	ldr	r0, [pc, #36]	@ (8001aa0 <StartDisplayTask+0x70>)
 8001a7a:	f009 f889 	bl	800ab90 <sniprintf>
	  lcd_cursor_pos(1, 10);
 8001a7e:	210a      	movs	r1, #10
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff fc22 	bl	80012ca <lcd_cursor_pos>
	  lcd_send_string(tempBuffer);
 8001a86:	4806      	ldr	r0, [pc, #24]	@ (8001aa0 <StartDisplayTask+0x70>)
 8001a88:	f7ff fc4d 	bl	8001326 <lcd_send_string>
	  osDelay(SAMPLE_TIME_MS_DISPLAY);
 8001a8c:	2096      	movs	r0, #150	@ 0x96
 8001a8e:	f006 ff20 	bl	80088d2 <osDelay>
	  snprintf(tempBuffer, 20, "%.2f", temperature);
 8001a92:	bf00      	nop
 8001a94:	e7d0      	b.n	8001a38 <StartDisplayTask+0x8>
 8001a96:	bf00      	nop
 8001a98:	20000820 	.word	0x20000820
 8001a9c:	0800e6f4 	.word	0x0800e6f4
 8001aa0:	20000828 	.word	0x20000828
 8001aa4:	20000824 	.word	0x20000824

08001aa8 <StartSensorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorTask */
  /* Infinite loop */
  for(;;)
  {
	  AM2320_ReadTemperature(&hi2c3, &temperature);
 8001ab0:	4907      	ldr	r1, [pc, #28]	@ (8001ad0 <StartSensorTask+0x28>)
 8001ab2:	4808      	ldr	r0, [pc, #32]	@ (8001ad4 <StartSensorTask+0x2c>)
 8001ab4:	f7ff fa9e 	bl	8000ff4 <AM2320_ReadTemperature>
	  vTaskDelay(pdMS_TO_TICKS(200));
 8001ab8:	20c8      	movs	r0, #200	@ 0xc8
 8001aba:	f007 f981 	bl	8008dc0 <vTaskDelay>
	  //HAL_Delay(200);
	  AM2320_ReadHumidity(&hi2c3, &humidity);
 8001abe:	4906      	ldr	r1, [pc, #24]	@ (8001ad8 <StartSensorTask+0x30>)
 8001ac0:	4804      	ldr	r0, [pc, #16]	@ (8001ad4 <StartSensorTask+0x2c>)
 8001ac2:	f7ff faf1 	bl	80010a8 <AM2320_ReadHumidity>
	  osDelay(SAMPLE_TIME_MS_SENSOR);
 8001ac6:	2064      	movs	r0, #100	@ 0x64
 8001ac8:	f006 ff03 	bl	80088d2 <osDelay>
	  AM2320_ReadTemperature(&hi2c3, &temperature);
 8001acc:	bf00      	nop
 8001ace:	e7ef      	b.n	8001ab0 <StartSensorTask+0x8>
 8001ad0:	20000820 	.word	0x20000820
 8001ad4:	200004e8 	.word	0x200004e8
 8001ad8:	20000824 	.word	0x20000824

08001adc <StartSysTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSysTask */
void StartSysTask(void const * argument)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSysTask */
	char *CPU;
	char *RAM;
	char *charBuffer = (char *)receiveBuffer;
 8001ae4:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <StartSysTask+0x60>)
 8001ae6:	617b      	str	r3, [r7, #20]
	const char *delimiter = ",";
 8001ae8:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <StartSysTask+0x64>)
 8001aea:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Receive_DMA(&huart2, receiveBuffer, RECEIVE_SIZE);
 8001aec:	2217      	movs	r2, #23
 8001aee:	4913      	ldr	r1, [pc, #76]	@ (8001b3c <StartSysTask+0x60>)
 8001af0:	4814      	ldr	r0, [pc, #80]	@ (8001b44 <StartSysTask+0x68>)
 8001af2:	f005 fdcf 	bl	8007694 <HAL_UART_Receive_DMA>
	  if (UARTFlag == 1) {
 8001af6:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <StartSysTask+0x6c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d11a      	bne.n	8001b34 <StartSysTask+0x58>
		  CPU = strtok(charBuffer, delimiter);
 8001afe:	6939      	ldr	r1, [r7, #16]
 8001b00:	6978      	ldr	r0, [r7, #20]
 8001b02:	f009 f8f7 	bl	800acf4 <strtok>
 8001b06:	60f8      	str	r0, [r7, #12]
		  RAM = strtok(NULL, delimiter);
 8001b08:	6939      	ldr	r1, [r7, #16]
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f009 f8f2 	bl	800acf4 <strtok>
 8001b10:	60b8      	str	r0, [r7, #8]
		  lcd_cursor_pos(2, 0);
 8001b12:	2100      	movs	r1, #0
 8001b14:	2002      	movs	r0, #2
 8001b16:	f7ff fbd8 	bl	80012ca <lcd_cursor_pos>
		  lcd_send_string(CPU);
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff fc03 	bl	8001326 <lcd_send_string>
		  lcd_cursor_pos(3, 0);
 8001b20:	2100      	movs	r1, #0
 8001b22:	2003      	movs	r0, #3
 8001b24:	f7ff fbd1 	bl	80012ca <lcd_cursor_pos>
		  lcd_send_string(RAM);
 8001b28:	68b8      	ldr	r0, [r7, #8]
 8001b2a:	f7ff fbfc 	bl	8001326 <lcd_send_string>
		  UARTFlag = 0;
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <StartSysTask+0x6c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
	  }
	  osDelay(100);
 8001b34:	2064      	movs	r0, #100	@ 0x64
 8001b36:	f006 fecc 	bl	80088d2 <osDelay>
	  HAL_UART_Receive_DMA(&huart2, receiveBuffer, RECEIVE_SIZE);
 8001b3a:	e7d7      	b.n	8001aec <StartSysTask+0x10>
 8001b3c:	2000083c 	.word	0x2000083c
 8001b40:	0800e6fc 	.word	0x0800e6fc
 8001b44:	20000704 	.word	0x20000704
 8001b48:	20000870 	.word	0x20000870

08001b4c <StartSndTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSndTask */
void StartSndTask(void const * argument)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSndTask */
  /* Infinite loop */
  for(;;)
  {
	  if (temperature > 50) {
 8001b54:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <StartSndTask+0x28>)
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001b78 <StartSndTask+0x2c>
 8001b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b66:	dd01      	ble.n	8001b6c <StartSndTask+0x20>
		  make_sound();
 8001b68:	f7ff fef4 	bl	8001954 <make_sound>
	  }
    osDelay(100);
 8001b6c:	2064      	movs	r0, #100	@ 0x64
 8001b6e:	f006 feb0 	bl	80088d2 <osDelay>
	  if (temperature > 50) {
 8001b72:	e7ef      	b.n	8001b54 <StartSndTask+0x8>
 8001b74:	20000820 	.word	0x20000820
 8001b78:	42480000 	.word	0x42480000

08001b7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d101      	bne.n	8001b92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b8e:	f000 fcf7 	bl	8002580 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40010000 	.word	0x40010000

08001ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba4:	b672      	cpsid	i
}
 8001ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <Error_Handler+0x8>

08001bac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <HAL_MspInit+0x54>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	4a11      	ldr	r2, [pc, #68]	@ (8001c00 <HAL_MspInit+0x54>)
 8001bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c00 <HAL_MspInit+0x54>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	603b      	str	r3, [r7, #0]
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <HAL_MspInit+0x54>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <HAL_MspInit+0x54>)
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bde:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <HAL_MspInit+0x54>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	210f      	movs	r1, #15
 8001bee:	f06f 0001 	mvn.w	r0, #1
 8001bf2:	f000 fdc1 	bl	8002778 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800

08001c04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	@ 0x30
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a51      	ldr	r2, [pc, #324]	@ (8001d68 <HAL_I2C_MspInit+0x164>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	f040 80ae 	bne.w	8001d84 <HAL_I2C_MspInit+0x180>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d6c <HAL_I2C_MspInit+0x168>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c30:	4a4e      	ldr	r2, [pc, #312]	@ (8001d6c <HAL_I2C_MspInit+0x168>)
 8001c32:	f043 0302 	orr.w	r3, r3, #2
 8001c36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c38:	4b4c      	ldr	r3, [pc, #304]	@ (8001d6c <HAL_I2C_MspInit+0x168>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c44:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4a:	2312      	movs	r3, #18
 8001c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c56:	2304      	movs	r3, #4
 8001c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5a:	f107 031c 	add.w	r3, r7, #28
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4843      	ldr	r0, [pc, #268]	@ (8001d70 <HAL_I2C_MspInit+0x16c>)
 8001c62:	f001 f9c3 	bl	8002fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	4b40      	ldr	r3, [pc, #256]	@ (8001d6c <HAL_I2C_MspInit+0x168>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d6c <HAL_I2C_MspInit+0x168>)
 8001c70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c76:	4b3d      	ldr	r3, [pc, #244]	@ (8001d6c <HAL_I2C_MspInit+0x168>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001c82:	4b3c      	ldr	r3, [pc, #240]	@ (8001d74 <HAL_I2C_MspInit+0x170>)
 8001c84:	4a3c      	ldr	r2, [pc, #240]	@ (8001d78 <HAL_I2C_MspInit+0x174>)
 8001c86:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001c88:	4b3a      	ldr	r3, [pc, #232]	@ (8001d74 <HAL_I2C_MspInit+0x170>)
 8001c8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c8e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c90:	4b38      	ldr	r3, [pc, #224]	@ (8001d74 <HAL_I2C_MspInit+0x170>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c96:	4b37      	ldr	r3, [pc, #220]	@ (8001d74 <HAL_I2C_MspInit+0x170>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c9c:	4b35      	ldr	r3, [pc, #212]	@ (8001d74 <HAL_I2C_MspInit+0x170>)
 8001c9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ca2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ca4:	4b33      	ldr	r3, [pc, #204]	@ (8001d74 <HAL_I2C_MspInit+0x170>)
 8001ca6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001caa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cac:	4b31      	ldr	r3, [pc, #196]	@ (8001d74 <HAL_I2C_MspInit+0x170>)
 8001cae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cb2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8001cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d74 <HAL_I2C_MspInit+0x170>)
 8001cb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cba:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d74 <HAL_I2C_MspInit+0x170>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d74 <HAL_I2C_MspInit+0x170>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001cc8:	482a      	ldr	r0, [pc, #168]	@ (8001d74 <HAL_I2C_MspInit+0x170>)
 8001cca:	f000 fd7f 	bl	80027cc <HAL_DMA_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_I2C_MspInit+0xd4>
    {
      Error_Handler();
 8001cd4:	f7ff ff64 	bl	8001ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a26      	ldr	r2, [pc, #152]	@ (8001d74 <HAL_I2C_MspInit+0x170>)
 8001cdc:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cde:	4a25      	ldr	r2, [pc, #148]	@ (8001d74 <HAL_I2C_MspInit+0x170>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8001ce4:	4b25      	ldr	r3, [pc, #148]	@ (8001d7c <HAL_I2C_MspInit+0x178>)
 8001ce6:	4a26      	ldr	r2, [pc, #152]	@ (8001d80 <HAL_I2C_MspInit+0x17c>)
 8001ce8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001cea:	4b24      	ldr	r3, [pc, #144]	@ (8001d7c <HAL_I2C_MspInit+0x178>)
 8001cec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cf0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cf2:	4b22      	ldr	r3, [pc, #136]	@ (8001d7c <HAL_I2C_MspInit+0x178>)
 8001cf4:	2240      	movs	r2, #64	@ 0x40
 8001cf6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf8:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <HAL_I2C_MspInit+0x178>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8001d7c <HAL_I2C_MspInit+0x178>)
 8001d00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d04:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d06:	4b1d      	ldr	r3, [pc, #116]	@ (8001d7c <HAL_I2C_MspInit+0x178>)
 8001d08:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d0c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d7c <HAL_I2C_MspInit+0x178>)
 8001d10:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d14:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8001d16:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <HAL_I2C_MspInit+0x178>)
 8001d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d1c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d1e:	4b17      	ldr	r3, [pc, #92]	@ (8001d7c <HAL_I2C_MspInit+0x178>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d24:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <HAL_I2C_MspInit+0x178>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001d2a:	4814      	ldr	r0, [pc, #80]	@ (8001d7c <HAL_I2C_MspInit+0x178>)
 8001d2c:	f000 fd4e 	bl	80027cc <HAL_DMA_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_I2C_MspInit+0x136>
    {
      Error_Handler();
 8001d36:	f7ff ff33 	bl	8001ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d7c <HAL_I2C_MspInit+0x178>)
 8001d3e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d40:	4a0e      	ldr	r2, [pc, #56]	@ (8001d7c <HAL_I2C_MspInit+0x178>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2105      	movs	r1, #5
 8001d4a:	201f      	movs	r0, #31
 8001d4c:	f000 fd14 	bl	8002778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d50:	201f      	movs	r0, #31
 8001d52:	f000 fd2d 	bl	80027b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2105      	movs	r1, #5
 8001d5a:	2020      	movs	r0, #32
 8001d5c:	f000 fd0c 	bl	8002778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d60:	2020      	movs	r0, #32
 8001d62:	f000 fd25 	bl	80027b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d66:	e0c1      	b.n	8001eec <HAL_I2C_MspInit+0x2e8>
 8001d68:	40005400 	.word	0x40005400
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020400 	.word	0x40020400
 8001d74:	2000053c 	.word	0x2000053c
 8001d78:	40026010 	.word	0x40026010
 8001d7c:	2000059c 	.word	0x2000059c
 8001d80:	400260b8 	.word	0x400260b8
  else if(hi2c->Instance==I2C3)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a5a      	ldr	r2, [pc, #360]	@ (8001ef4 <HAL_I2C_MspInit+0x2f0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	f040 80ae 	bne.w	8001eec <HAL_I2C_MspInit+0x2e8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	4b58      	ldr	r3, [pc, #352]	@ (8001ef8 <HAL_I2C_MspInit+0x2f4>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d98:	4a57      	ldr	r2, [pc, #348]	@ (8001ef8 <HAL_I2C_MspInit+0x2f4>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da0:	4b55      	ldr	r3, [pc, #340]	@ (8001ef8 <HAL_I2C_MspInit+0x2f4>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	4b51      	ldr	r3, [pc, #324]	@ (8001ef8 <HAL_I2C_MspInit+0x2f4>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db4:	4a50      	ldr	r2, [pc, #320]	@ (8001ef8 <HAL_I2C_MspInit+0x2f4>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dbc:	4b4e      	ldr	r3, [pc, #312]	@ (8001ef8 <HAL_I2C_MspInit+0x2f4>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dce:	2312      	movs	r3, #18
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	4619      	mov	r1, r3
 8001de4:	4845      	ldr	r0, [pc, #276]	@ (8001efc <HAL_I2C_MspInit+0x2f8>)
 8001de6:	f001 f901 	bl	8002fec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df0:	2312      	movs	r3, #18
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	483e      	ldr	r0, [pc, #248]	@ (8001f00 <HAL_I2C_MspInit+0x2fc>)
 8001e08:	f001 f8f0 	bl	8002fec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	4b39      	ldr	r3, [pc, #228]	@ (8001ef8 <HAL_I2C_MspInit+0x2f4>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	4a38      	ldr	r2, [pc, #224]	@ (8001ef8 <HAL_I2C_MspInit+0x2f4>)
 8001e16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e1c:	4b36      	ldr	r3, [pc, #216]	@ (8001ef8 <HAL_I2C_MspInit+0x2f4>)
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 8001e28:	4b36      	ldr	r3, [pc, #216]	@ (8001f04 <HAL_I2C_MspInit+0x300>)
 8001e2a:	4a37      	ldr	r2, [pc, #220]	@ (8001f08 <HAL_I2C_MspInit+0x304>)
 8001e2c:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 8001e2e:	4b35      	ldr	r3, [pc, #212]	@ (8001f04 <HAL_I2C_MspInit+0x300>)
 8001e30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e34:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e36:	4b33      	ldr	r3, [pc, #204]	@ (8001f04 <HAL_I2C_MspInit+0x300>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e3c:	4b31      	ldr	r3, [pc, #196]	@ (8001f04 <HAL_I2C_MspInit+0x300>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e42:	4b30      	ldr	r3, [pc, #192]	@ (8001f04 <HAL_I2C_MspInit+0x300>)
 8001e44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e48:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f04 <HAL_I2C_MspInit+0x300>)
 8001e4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e50:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e52:	4b2c      	ldr	r3, [pc, #176]	@ (8001f04 <HAL_I2C_MspInit+0x300>)
 8001e54:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e58:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_CIRCULAR;
 8001e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f04 <HAL_I2C_MspInit+0x300>)
 8001e5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e60:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e62:	4b28      	ldr	r3, [pc, #160]	@ (8001f04 <HAL_I2C_MspInit+0x300>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e68:	4b26      	ldr	r3, [pc, #152]	@ (8001f04 <HAL_I2C_MspInit+0x300>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8001e6e:	4825      	ldr	r0, [pc, #148]	@ (8001f04 <HAL_I2C_MspInit+0x300>)
 8001e70:	f000 fcac 	bl	80027cc <HAL_DMA_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_MspInit+0x27a>
      Error_Handler();
 8001e7a:	f7ff fe91 	bl	8001ba0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a20      	ldr	r2, [pc, #128]	@ (8001f04 <HAL_I2C_MspInit+0x300>)
 8001e82:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e84:	4a1f      	ldr	r2, [pc, #124]	@ (8001f04 <HAL_I2C_MspInit+0x300>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8001e8a:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <HAL_I2C_MspInit+0x308>)
 8001e8c:	4a20      	ldr	r2, [pc, #128]	@ (8001f10 <HAL_I2C_MspInit+0x30c>)
 8001e8e:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8001e90:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <HAL_I2C_MspInit+0x308>)
 8001e92:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001e96:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e98:	4b1c      	ldr	r3, [pc, #112]	@ (8001f0c <HAL_I2C_MspInit+0x308>)
 8001e9a:	2240      	movs	r2, #64	@ 0x40
 8001e9c:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f0c <HAL_I2C_MspInit+0x308>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ea4:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <HAL_I2C_MspInit+0x308>)
 8001ea6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eaa:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001eac:	4b17      	ldr	r3, [pc, #92]	@ (8001f0c <HAL_I2C_MspInit+0x308>)
 8001eae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001eb2:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001eb4:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <HAL_I2C_MspInit+0x308>)
 8001eb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001eba:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_CIRCULAR;
 8001ebc:	4b13      	ldr	r3, [pc, #76]	@ (8001f0c <HAL_I2C_MspInit+0x308>)
 8001ebe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ec2:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <HAL_I2C_MspInit+0x308>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eca:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <HAL_I2C_MspInit+0x308>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8001ed0:	480e      	ldr	r0, [pc, #56]	@ (8001f0c <HAL_I2C_MspInit+0x308>)
 8001ed2:	f000 fc7b 	bl	80027cc <HAL_DMA_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_I2C_MspInit+0x2dc>
      Error_Handler();
 8001edc:	f7ff fe60 	bl	8001ba0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <HAL_I2C_MspInit+0x308>)
 8001ee4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ee6:	4a09      	ldr	r2, [pc, #36]	@ (8001f0c <HAL_I2C_MspInit+0x308>)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001eec:	bf00      	nop
 8001eee:	3730      	adds	r7, #48	@ 0x30
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40005c00 	.word	0x40005c00
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020800 	.word	0x40020800
 8001f00:	40020000 	.word	0x40020000
 8001f04:	200005fc 	.word	0x200005fc
 8001f08:	40026028 	.word	0x40026028
 8001f0c:	2000065c 	.word	0x2000065c
 8001f10:	40026070 	.word	0x40026070

08001f14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0e      	ldr	r2, [pc, #56]	@ (8001f5c <HAL_TIM_Base_MspInit+0x48>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d115      	bne.n	8001f52 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <HAL_TIM_Base_MspInit+0x4c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f60 <HAL_TIM_Base_MspInit+0x4c>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f36:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <HAL_TIM_Base_MspInit+0x4c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2105      	movs	r1, #5
 8001f46:	201d      	movs	r0, #29
 8001f48:	f000 fc16 	bl	8002778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f4c:	201d      	movs	r0, #29
 8001f4e:	f000 fc2f 	bl	80027b0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40000400 	.word	0x40000400
 8001f60:	40023800 	.word	0x40023800

08001f64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a12      	ldr	r2, [pc, #72]	@ (8001fcc <HAL_TIM_MspPostInit+0x68>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d11d      	bne.n	8001fc2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <HAL_TIM_MspPostInit+0x6c>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	4a10      	ldr	r2, [pc, #64]	@ (8001fd0 <HAL_TIM_MspPostInit+0x6c>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f96:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd0 <HAL_TIM_MspPostInit+0x6c>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fa2:	2310      	movs	r3, #16
 8001fa4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb6:	f107 030c 	add.w	r3, r7, #12
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4805      	ldr	r0, [pc, #20]	@ (8001fd4 <HAL_TIM_MspPostInit+0x70>)
 8001fbe:	f001 f815 	bl	8002fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40000400 	.word	0x40000400
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020400 	.word	0x40020400

08001fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	@ 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a4b      	ldr	r2, [pc, #300]	@ (8002124 <HAL_UART_MspInit+0x14c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	f040 8090 	bne.w	800211c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	4b49      	ldr	r3, [pc, #292]	@ (8002128 <HAL_UART_MspInit+0x150>)
 8002002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002004:	4a48      	ldr	r2, [pc, #288]	@ (8002128 <HAL_UART_MspInit+0x150>)
 8002006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800200a:	6413      	str	r3, [r2, #64]	@ 0x40
 800200c:	4b46      	ldr	r3, [pc, #280]	@ (8002128 <HAL_UART_MspInit+0x150>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	4b42      	ldr	r3, [pc, #264]	@ (8002128 <HAL_UART_MspInit+0x150>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002020:	4a41      	ldr	r2, [pc, #260]	@ (8002128 <HAL_UART_MspInit+0x150>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6313      	str	r3, [r2, #48]	@ 0x30
 8002028:	4b3f      	ldr	r3, [pc, #252]	@ (8002128 <HAL_UART_MspInit+0x150>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002034:	230c      	movs	r3, #12
 8002036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002040:	2300      	movs	r3, #0
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002044:	2307      	movs	r3, #7
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	4837      	ldr	r0, [pc, #220]	@ (800212c <HAL_UART_MspInit+0x154>)
 8002050:	f000 ffcc 	bl	8002fec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002054:	4b36      	ldr	r3, [pc, #216]	@ (8002130 <HAL_UART_MspInit+0x158>)
 8002056:	4a37      	ldr	r2, [pc, #220]	@ (8002134 <HAL_UART_MspInit+0x15c>)
 8002058:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800205a:	4b35      	ldr	r3, [pc, #212]	@ (8002130 <HAL_UART_MspInit+0x158>)
 800205c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002060:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002062:	4b33      	ldr	r3, [pc, #204]	@ (8002130 <HAL_UART_MspInit+0x158>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002068:	4b31      	ldr	r3, [pc, #196]	@ (8002130 <HAL_UART_MspInit+0x158>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800206e:	4b30      	ldr	r3, [pc, #192]	@ (8002130 <HAL_UART_MspInit+0x158>)
 8002070:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002074:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002076:	4b2e      	ldr	r3, [pc, #184]	@ (8002130 <HAL_UART_MspInit+0x158>)
 8002078:	2200      	movs	r2, #0
 800207a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800207c:	4b2c      	ldr	r3, [pc, #176]	@ (8002130 <HAL_UART_MspInit+0x158>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002082:	4b2b      	ldr	r3, [pc, #172]	@ (8002130 <HAL_UART_MspInit+0x158>)
 8002084:	2200      	movs	r2, #0
 8002086:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002088:	4b29      	ldr	r3, [pc, #164]	@ (8002130 <HAL_UART_MspInit+0x158>)
 800208a:	2200      	movs	r2, #0
 800208c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800208e:	4b28      	ldr	r3, [pc, #160]	@ (8002130 <HAL_UART_MspInit+0x158>)
 8002090:	2200      	movs	r2, #0
 8002092:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002094:	4826      	ldr	r0, [pc, #152]	@ (8002130 <HAL_UART_MspInit+0x158>)
 8002096:	f000 fb99 	bl	80027cc <HAL_DMA_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80020a0:	f7ff fd7e 	bl	8001ba0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a22      	ldr	r2, [pc, #136]	@ (8002130 <HAL_UART_MspInit+0x158>)
 80020a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020aa:	4a21      	ldr	r2, [pc, #132]	@ (8002130 <HAL_UART_MspInit+0x158>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80020b0:	4b21      	ldr	r3, [pc, #132]	@ (8002138 <HAL_UART_MspInit+0x160>)
 80020b2:	4a22      	ldr	r2, [pc, #136]	@ (800213c <HAL_UART_MspInit+0x164>)
 80020b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80020b6:	4b20      	ldr	r3, [pc, #128]	@ (8002138 <HAL_UART_MspInit+0x160>)
 80020b8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80020bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020be:	4b1e      	ldr	r3, [pc, #120]	@ (8002138 <HAL_UART_MspInit+0x160>)
 80020c0:	2240      	movs	r2, #64	@ 0x40
 80020c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002138 <HAL_UART_MspInit+0x160>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <HAL_UART_MspInit+0x160>)
 80020cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020d2:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <HAL_UART_MspInit+0x160>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020d8:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <HAL_UART_MspInit+0x160>)
 80020da:	2200      	movs	r2, #0
 80020dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80020de:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <HAL_UART_MspInit+0x160>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020e4:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <HAL_UART_MspInit+0x160>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ea:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <HAL_UART_MspInit+0x160>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80020f0:	4811      	ldr	r0, [pc, #68]	@ (8002138 <HAL_UART_MspInit+0x160>)
 80020f2:	f000 fb6b 	bl	80027cc <HAL_DMA_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80020fc:	f7ff fd50 	bl	8001ba0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a0d      	ldr	r2, [pc, #52]	@ (8002138 <HAL_UART_MspInit+0x160>)
 8002104:	639a      	str	r2, [r3, #56]	@ 0x38
 8002106:	4a0c      	ldr	r2, [pc, #48]	@ (8002138 <HAL_UART_MspInit+0x160>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	2105      	movs	r1, #5
 8002110:	2026      	movs	r0, #38	@ 0x26
 8002112:	f000 fb31 	bl	8002778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002116:	2026      	movs	r0, #38	@ 0x26
 8002118:	f000 fb4a 	bl	80027b0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800211c:	bf00      	nop
 800211e:	3728      	adds	r7, #40	@ 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40004400 	.word	0x40004400
 8002128:	40023800 	.word	0x40023800
 800212c:	40020000 	.word	0x40020000
 8002130:	2000074c 	.word	0x2000074c
 8002134:	40026088 	.word	0x40026088
 8002138:	200007ac 	.word	0x200007ac
 800213c:	400260a0 	.word	0x400260a0

08002140 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08c      	sub	sp, #48	@ 0x30
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	4b2e      	ldr	r3, [pc, #184]	@ (8002210 <HAL_InitTick+0xd0>)
 8002156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002158:	4a2d      	ldr	r2, [pc, #180]	@ (8002210 <HAL_InitTick+0xd0>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002160:	4b2b      	ldr	r3, [pc, #172]	@ (8002210 <HAL_InitTick+0xd0>)
 8002162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800216c:	f107 020c 	add.w	r2, r7, #12
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4611      	mov	r1, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f004 fa52 	bl	8006620 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800217c:	f004 fa3c 	bl	80065f8 <HAL_RCC_GetPCLK2Freq>
 8002180:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002184:	4a23      	ldr	r2, [pc, #140]	@ (8002214 <HAL_InitTick+0xd4>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0c9b      	lsrs	r3, r3, #18
 800218c:	3b01      	subs	r3, #1
 800218e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002190:	4b21      	ldr	r3, [pc, #132]	@ (8002218 <HAL_InitTick+0xd8>)
 8002192:	4a22      	ldr	r2, [pc, #136]	@ (800221c <HAL_InitTick+0xdc>)
 8002194:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002196:	4b20      	ldr	r3, [pc, #128]	@ (8002218 <HAL_InitTick+0xd8>)
 8002198:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800219c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800219e:	4a1e      	ldr	r2, [pc, #120]	@ (8002218 <HAL_InitTick+0xd8>)
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80021a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002218 <HAL_InitTick+0xd8>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002218 <HAL_InitTick+0xd8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b0:	4b19      	ldr	r3, [pc, #100]	@ (8002218 <HAL_InitTick+0xd8>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80021b6:	4818      	ldr	r0, [pc, #96]	@ (8002218 <HAL_InitTick+0xd8>)
 80021b8:	f004 fa64 	bl	8006684 <HAL_TIM_Base_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80021c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d11b      	bne.n	8002202 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80021ca:	4813      	ldr	r0, [pc, #76]	@ (8002218 <HAL_InitTick+0xd8>)
 80021cc:	f004 faaa 	bl	8006724 <HAL_TIM_Base_Start_IT>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80021d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d111      	bne.n	8002202 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021de:	2019      	movs	r0, #25
 80021e0:	f000 fae6 	bl	80027b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b0f      	cmp	r3, #15
 80021e8:	d808      	bhi.n	80021fc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80021ea:	2200      	movs	r2, #0
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	2019      	movs	r0, #25
 80021f0:	f000 fac2 	bl	8002778 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <HAL_InitTick+0xe0>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e002      	b.n	8002202 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002202:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002206:	4618      	mov	r0, r3
 8002208:	3730      	adds	r7, #48	@ 0x30
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800
 8002214:	431bde83 	.word	0x431bde83
 8002218:	20000874 	.word	0x20000874
 800221c:	40010000 	.word	0x40010000
 8002220:	20000004 	.word	0x20000004

08002224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <NMI_Handler+0x4>

0800222c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <HardFault_Handler+0x4>

08002234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <MemManage_Handler+0x4>

0800223c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <BusFault_Handler+0x4>

08002244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <UsageFault_Handler+0x4>

0800224c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002260:	4802      	ldr	r0, [pc, #8]	@ (800226c <DMA1_Stream0_IRQHandler+0x10>)
 8002262:	f000 fc4b 	bl	8002afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000053c 	.word	0x2000053c

08002270 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <DMA1_Stream1_IRQHandler+0x10>)
 8002276:	f000 fc41 	bl	8002afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200005fc 	.word	0x200005fc

08002284 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8002288:	4802      	ldr	r0, [pc, #8]	@ (8002294 <DMA1_Stream4_IRQHandler+0x10>)
 800228a:	f000 fc37 	bl	8002afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000065c 	.word	0x2000065c

08002298 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800229c:	4802      	ldr	r0, [pc, #8]	@ (80022a8 <DMA1_Stream5_IRQHandler+0x10>)
 800229e:	f000 fc2d 	bl	8002afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	2000074c 	.word	0x2000074c

080022ac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80022b0:	4802      	ldr	r0, [pc, #8]	@ (80022bc <DMA1_Stream6_IRQHandler+0x10>)
 80022b2:	f000 fc23 	bl	8002afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200007ac 	.word	0x200007ac

080022c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022c4:	4802      	ldr	r0, [pc, #8]	@ (80022d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80022c6:	f004 fb99 	bl	80069fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000874 	.word	0x20000874

080022d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022d8:	4802      	ldr	r0, [pc, #8]	@ (80022e4 <TIM3_IRQHandler+0x10>)
 80022da:	f004 fb8f 	bl	80069fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200006bc 	.word	0x200006bc

080022e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80022ec:	4802      	ldr	r0, [pc, #8]	@ (80022f8 <I2C1_EV_IRQHandler+0x10>)
 80022ee:	f001 fca5 	bl	8003c3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000494 	.word	0x20000494

080022fc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002300:	4802      	ldr	r0, [pc, #8]	@ (800230c <I2C1_ER_IRQHandler+0x10>)
 8002302:	f001 fdee 	bl	8003ee2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000494 	.word	0x20000494

08002310 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002314:	4802      	ldr	r0, [pc, #8]	@ (8002320 <USART2_IRQHandler+0x10>)
 8002316:	f005 f9e3 	bl	80076e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000704 	.word	0x20000704

08002324 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002328:	4802      	ldr	r0, [pc, #8]	@ (8002334 <DMA1_Stream7_IRQHandler+0x10>)
 800232a:	f000 fbe7 	bl	8002afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000059c 	.word	0x2000059c

08002338 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return 1;
 800233c:	2301      	movs	r3, #1
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <_kill>:

int _kill(int pid, int sig)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002352:	f008 fdcb 	bl	800aeec <__errno>
 8002356:	4603      	mov	r3, r0
 8002358:	2216      	movs	r2, #22
 800235a:	601a      	str	r2, [r3, #0]
  return -1;
 800235c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <_exit>:

void _exit (int status)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002370:	f04f 31ff 	mov.w	r1, #4294967295
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ffe7 	bl	8002348 <_kill>
  while (1) {}    /* Make sure we hang here */
 800237a:	bf00      	nop
 800237c:	e7fd      	b.n	800237a <_exit+0x12>

0800237e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	e00a      	b.n	80023a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002390:	f3af 8000 	nop.w
 8002394:	4601      	mov	r1, r0
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	60ba      	str	r2, [r7, #8]
 800239c:	b2ca      	uxtb	r2, r1
 800239e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3301      	adds	r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	dbf0      	blt.n	8002390 <_read+0x12>
  }

  return len;
 80023ae:	687b      	ldr	r3, [r7, #4]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	e009      	b.n	80023de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	60ba      	str	r2, [r7, #8]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3301      	adds	r3, #1
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	dbf1      	blt.n	80023ca <_write+0x12>
  }
  return len;
 80023e6:	687b      	ldr	r3, [r7, #4]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_close>:

int _close(int file)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002418:	605a      	str	r2, [r3, #4]
  return 0;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <_isatty>:

int _isatty(int file)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002430:	2301      	movs	r3, #1
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800243e:	b480      	push	{r7}
 8002440:	b085      	sub	sp, #20
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002460:	4a14      	ldr	r2, [pc, #80]	@ (80024b4 <_sbrk+0x5c>)
 8002462:	4b15      	ldr	r3, [pc, #84]	@ (80024b8 <_sbrk+0x60>)
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800246c:	4b13      	ldr	r3, [pc, #76]	@ (80024bc <_sbrk+0x64>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d102      	bne.n	800247a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002474:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <_sbrk+0x64>)
 8002476:	4a12      	ldr	r2, [pc, #72]	@ (80024c0 <_sbrk+0x68>)
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247a:	4b10      	ldr	r3, [pc, #64]	@ (80024bc <_sbrk+0x64>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	429a      	cmp	r2, r3
 8002486:	d207      	bcs.n	8002498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002488:	f008 fd30 	bl	800aeec <__errno>
 800248c:	4603      	mov	r3, r0
 800248e:	220c      	movs	r2, #12
 8002490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
 8002496:	e009      	b.n	80024ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002498:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800249e:	4b07      	ldr	r3, [pc, #28]	@ (80024bc <_sbrk+0x64>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	4a05      	ldr	r2, [pc, #20]	@ (80024bc <_sbrk+0x64>)
 80024a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024aa:	68fb      	ldr	r3, [r7, #12]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20018000 	.word	0x20018000
 80024b8:	00000400 	.word	0x00000400
 80024bc:	200008bc 	.word	0x200008bc
 80024c0:	20004768 	.word	0x20004768

080024c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c8:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <SystemInit+0x20>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ce:	4a05      	ldr	r2, [pc, #20]	@ (80024e4 <SystemInit+0x20>)
 80024d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002520 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024ec:	f7ff ffea 	bl	80024c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024f0:	480c      	ldr	r0, [pc, #48]	@ (8002524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024f2:	490d      	ldr	r1, [pc, #52]	@ (8002528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024f4:	4a0d      	ldr	r2, [pc, #52]	@ (800252c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f8:	e002      	b.n	8002500 <LoopCopyDataInit>

080024fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fe:	3304      	adds	r3, #4

08002500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002504:	d3f9      	bcc.n	80024fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002506:	4a0a      	ldr	r2, [pc, #40]	@ (8002530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002508:	4c0a      	ldr	r4, [pc, #40]	@ (8002534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800250c:	e001      	b.n	8002512 <LoopFillZerobss>

0800250e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002510:	3204      	adds	r2, #4

08002512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002514:	d3fb      	bcc.n	800250e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002516:	f008 fcef 	bl	800aef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800251a:	f7fe ff31 	bl	8001380 <main>
  bx  lr    
 800251e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002520:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002528:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800252c:	0800ebc4 	.word	0x0800ebc4
  ldr r2, =_sbss
 8002530:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002534:	20004764 	.word	0x20004764

08002538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002538:	e7fe      	b.n	8002538 <ADC_IRQHandler>
	...

0800253c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002540:	4b0e      	ldr	r3, [pc, #56]	@ (800257c <HAL_Init+0x40>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0d      	ldr	r2, [pc, #52]	@ (800257c <HAL_Init+0x40>)
 8002546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800254a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <HAL_Init+0x40>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <HAL_Init+0x40>)
 8002552:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002558:	4b08      	ldr	r3, [pc, #32]	@ (800257c <HAL_Init+0x40>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a07      	ldr	r2, [pc, #28]	@ (800257c <HAL_Init+0x40>)
 800255e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002564:	2003      	movs	r0, #3
 8002566:	f000 f8fc 	bl	8002762 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800256a:	200f      	movs	r0, #15
 800256c:	f7ff fde8 	bl	8002140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002570:	f7ff fb1c 	bl	8001bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40023c00 	.word	0x40023c00

08002580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_IncTick+0x20>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_IncTick+0x24>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4413      	add	r3, r2
 8002590:	4a04      	ldr	r2, [pc, #16]	@ (80025a4 <HAL_IncTick+0x24>)
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20000008 	.word	0x20000008
 80025a4:	200008c0 	.word	0x200008c0

080025a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return uwTick;
 80025ac:	4b03      	ldr	r3, [pc, #12]	@ (80025bc <HAL_GetTick+0x14>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	200008c0 	.word	0x200008c0

080025c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff ffee 	bl	80025a8 <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d005      	beq.n	80025e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025da:	4b0a      	ldr	r3, [pc, #40]	@ (8002604 <HAL_Delay+0x44>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025e6:	bf00      	nop
 80025e8:	f7ff ffde 	bl	80025a8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d8f7      	bhi.n	80025e8 <HAL_Delay+0x28>
  {
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000008 	.word	0x20000008

08002608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002630:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263a:	4a04      	ldr	r2, [pc, #16]	@ (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	60d3      	str	r3, [r2, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002654:	4b04      	ldr	r3, [pc, #16]	@ (8002668 <__NVIC_GetPriorityGrouping+0x18>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	db0b      	blt.n	8002696 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	4907      	ldr	r1, [pc, #28]	@ (80026a4 <__NVIC_EnableIRQ+0x38>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2001      	movs	r0, #1
 800268e:	fa00 f202 	lsl.w	r2, r0, r2
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000e100 	.word	0xe000e100

080026a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	db0a      	blt.n	80026d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	490c      	ldr	r1, [pc, #48]	@ (80026f4 <__NVIC_SetPriority+0x4c>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	440b      	add	r3, r1
 80026cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d0:	e00a      	b.n	80026e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4908      	ldr	r1, [pc, #32]	@ (80026f8 <__NVIC_SetPriority+0x50>)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	3b04      	subs	r3, #4
 80026e0:	0112      	lsls	r2, r2, #4
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	440b      	add	r3, r1
 80026e6:	761a      	strb	r2, [r3, #24]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000e100 	.word	0xe000e100
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	@ 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f1c3 0307 	rsb	r3, r3, #7
 8002716:	2b04      	cmp	r3, #4
 8002718:	bf28      	it	cs
 800271a:	2304      	movcs	r3, #4
 800271c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3304      	adds	r3, #4
 8002722:	2b06      	cmp	r3, #6
 8002724:	d902      	bls.n	800272c <NVIC_EncodePriority+0x30>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3b03      	subs	r3, #3
 800272a:	e000      	b.n	800272e <NVIC_EncodePriority+0x32>
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	401a      	ands	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002744:	f04f 31ff 	mov.w	r1, #4294967295
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	43d9      	mvns	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	4313      	orrs	r3, r2
         );
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	@ 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ff4c 	bl	8002608 <__NVIC_SetPriorityGrouping>
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800278a:	f7ff ff61 	bl	8002650 <__NVIC_GetPriorityGrouping>
 800278e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	6978      	ldr	r0, [r7, #20]
 8002796:	f7ff ffb1 	bl	80026fc <NVIC_EncodePriority>
 800279a:	4602      	mov	r2, r0
 800279c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff80 	bl	80026a8 <__NVIC_SetPriority>
}
 80027a8:	bf00      	nop
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff54 	bl	800266c <__NVIC_EnableIRQ>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027d8:	f7ff fee6 	bl	80025a8 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e099      	b.n	800291c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002808:	e00f      	b.n	800282a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800280a:	f7ff fecd 	bl	80025a8 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b05      	cmp	r3, #5
 8002816:	d908      	bls.n	800282a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2203      	movs	r2, #3
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e078      	b.n	800291c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1e8      	bne.n	800280a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	4b38      	ldr	r3, [pc, #224]	@ (8002924 <HAL_DMA_Init+0x158>)
 8002844:	4013      	ands	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002856:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	2b04      	cmp	r3, #4
 8002882:	d107      	bne.n	8002894 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288c:	4313      	orrs	r3, r2
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f023 0307 	bic.w	r3, r3, #7
 80028aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d117      	bne.n	80028ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00e      	beq.n	80028ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fb0f 	bl	8002ef4 <DMA_CheckFifoParam>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2240      	movs	r2, #64	@ 0x40
 80028e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80028ea:	2301      	movs	r3, #1
 80028ec:	e016      	b.n	800291c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fac6 	bl	8002e88 <DMA_CalcBaseAndBitshift>
 80028fc:	4603      	mov	r3, r0
 80028fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002904:	223f      	movs	r2, #63	@ 0x3f
 8002906:	409a      	lsls	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	f010803f 	.word	0xf010803f

08002928 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_DMA_Start_IT+0x26>
 800294a:	2302      	movs	r3, #2
 800294c:	e040      	b.n	80029d0 <HAL_DMA_Start_IT+0xa8>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d12f      	bne.n	80029c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2202      	movs	r2, #2
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fa58 	bl	8002e2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002980:	223f      	movs	r2, #63	@ 0x3f
 8002982:	409a      	lsls	r2, r3
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0216 	orr.w	r2, r2, #22
 8002996:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0208 	orr.w	r2, r2, #8
 80029ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e005      	b.n	80029ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029ca:	2302      	movs	r3, #2
 80029cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029e6:	f7ff fddf 	bl	80025a8 <HAL_GetTick>
 80029ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d008      	beq.n	8002a0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2280      	movs	r2, #128	@ 0x80
 80029fc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e052      	b.n	8002ab0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0216 	bic.w	r2, r2, #22
 8002a18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <HAL_DMA_Abort+0x62>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d007      	beq.n	8002a4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0208 	bic.w	r2, r2, #8
 8002a48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a5a:	e013      	b.n	8002a84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a5c:	f7ff fda4 	bl	80025a8 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b05      	cmp	r3, #5
 8002a68:	d90c      	bls.n	8002a84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2203      	movs	r2, #3
 8002a74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e015      	b.n	8002ab0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1e4      	bne.n	8002a5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a96:	223f      	movs	r2, #63	@ 0x3f
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d004      	beq.n	8002ad6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2280      	movs	r2, #128	@ 0x80
 8002ad0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00c      	b.n	8002af0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2205      	movs	r2, #5
 8002ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b08:	4b8e      	ldr	r3, [pc, #568]	@ (8002d44 <HAL_DMA_IRQHandler+0x248>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a8e      	ldr	r2, [pc, #568]	@ (8002d48 <HAL_DMA_IRQHandler+0x24c>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0a9b      	lsrs	r3, r3, #10
 8002b14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b26:	2208      	movs	r2, #8
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01a      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d013      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0204 	bic.w	r2, r2, #4
 8002b4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b54:	2208      	movs	r2, #8
 8002b56:	409a      	lsls	r2, r3
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b60:	f043 0201 	orr.w	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d012      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b96:	f043 0202 	orr.w	r2, r3, #2
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d012      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bcc:	f043 0204 	orr.w	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd8:	2210      	movs	r2, #16
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d043      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d03c      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d018      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d108      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d024      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
 8002c2a:	e01f      	b.n	8002c6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d01b      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
 8002c3c:	e016      	b.n	8002c6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d107      	bne.n	8002c5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0208 	bic.w	r2, r2, #8
 8002c5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c70:	2220      	movs	r2, #32
 8002c72:	409a      	lsls	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 808f 	beq.w	8002d9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8087 	beq.w	8002d9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c92:	2220      	movs	r2, #32
 8002c94:	409a      	lsls	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b05      	cmp	r3, #5
 8002ca4:	d136      	bne.n	8002d14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0216 	bic.w	r2, r2, #22
 8002cb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <HAL_DMA_IRQHandler+0x1da>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0208 	bic.w	r2, r2, #8
 8002ce4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cea:	223f      	movs	r2, #63	@ 0x3f
 8002cec:	409a      	lsls	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d07e      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
        }
        return;
 8002d12:	e079      	b.n	8002e08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01d      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10d      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d031      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
 8002d40:	e02c      	b.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
 8002d42:	bf00      	nop
 8002d44:	20000000 	.word	0x20000000
 8002d48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d023      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
 8002d5c:	e01e      	b.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10f      	bne.n	8002d8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0210 	bic.w	r2, r2, #16
 8002d7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d032      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d022      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2205      	movs	r2, #5
 8002db4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d307      	bcc.n	8002de4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f2      	bne.n	8002dc8 <HAL_DMA_IRQHandler+0x2cc>
 8002de2:	e000      	b.n	8002de6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002de4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	4798      	blx	r3
 8002e06:	e000      	b.n	8002e0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e08:	bf00      	nop
    }
  }
}
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e1e:	b2db      	uxtb	r3, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b40      	cmp	r3, #64	@ 0x40
 8002e58:	d108      	bne.n	8002e6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e6a:	e007      	b.n	8002e7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	60da      	str	r2, [r3, #12]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	3b10      	subs	r3, #16
 8002e98:	4a14      	ldr	r2, [pc, #80]	@ (8002eec <DMA_CalcBaseAndBitshift+0x64>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	091b      	lsrs	r3, r3, #4
 8002ea0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ea2:	4a13      	ldr	r2, [pc, #76]	@ (8002ef0 <DMA_CalcBaseAndBitshift+0x68>)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d909      	bls.n	8002eca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ebe:	f023 0303 	bic.w	r3, r3, #3
 8002ec2:	1d1a      	adds	r2, r3, #4
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ec8:	e007      	b.n	8002eda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ed2:	f023 0303 	bic.w	r3, r3, #3
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	aaaaaaab 	.word	0xaaaaaaab
 8002ef0:	0800e720 	.word	0x0800e720

08002ef4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d11f      	bne.n	8002f4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d856      	bhi.n	8002fc2 <DMA_CheckFifoParam+0xce>
 8002f14:	a201      	add	r2, pc, #4	@ (adr r2, 8002f1c <DMA_CheckFifoParam+0x28>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002f2d 	.word	0x08002f2d
 8002f20:	08002f3f 	.word	0x08002f3f
 8002f24:	08002f2d 	.word	0x08002f2d
 8002f28:	08002fc3 	.word	0x08002fc3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d046      	beq.n	8002fc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f3c:	e043      	b.n	8002fc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f46:	d140      	bne.n	8002fca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f4c:	e03d      	b.n	8002fca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f56:	d121      	bne.n	8002f9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d837      	bhi.n	8002fce <DMA_CheckFifoParam+0xda>
 8002f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f64 <DMA_CheckFifoParam+0x70>)
 8002f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f64:	08002f75 	.word	0x08002f75
 8002f68:	08002f7b 	.word	0x08002f7b
 8002f6c:	08002f75 	.word	0x08002f75
 8002f70:	08002f8d 	.word	0x08002f8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
      break;
 8002f78:	e030      	b.n	8002fdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d025      	beq.n	8002fd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f8a:	e022      	b.n	8002fd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f94:	d11f      	bne.n	8002fd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f9a:	e01c      	b.n	8002fd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d903      	bls.n	8002faa <DMA_CheckFifoParam+0xb6>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d003      	beq.n	8002fb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fa8:	e018      	b.n	8002fdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
      break;
 8002fae:	e015      	b.n	8002fdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00e      	beq.n	8002fda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc0:	e00b      	b.n	8002fda <DMA_CheckFifoParam+0xe6>
      break;
 8002fc2:	bf00      	nop
 8002fc4:	e00a      	b.n	8002fdc <DMA_CheckFifoParam+0xe8>
      break;
 8002fc6:	bf00      	nop
 8002fc8:	e008      	b.n	8002fdc <DMA_CheckFifoParam+0xe8>
      break;
 8002fca:	bf00      	nop
 8002fcc:	e006      	b.n	8002fdc <DMA_CheckFifoParam+0xe8>
      break;
 8002fce:	bf00      	nop
 8002fd0:	e004      	b.n	8002fdc <DMA_CheckFifoParam+0xe8>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e002      	b.n	8002fdc <DMA_CheckFifoParam+0xe8>
      break;   
 8002fd6:	bf00      	nop
 8002fd8:	e000      	b.n	8002fdc <DMA_CheckFifoParam+0xe8>
      break;
 8002fda:	bf00      	nop
    }
  } 
  
  return status; 
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop

08002fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	@ 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	e159      	b.n	80032bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003008:	2201      	movs	r2, #1
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	429a      	cmp	r2, r3
 8003022:	f040 8148 	bne.w	80032b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d005      	beq.n	800303e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800303a:	2b02      	cmp	r3, #2
 800303c:	d130      	bne.n	80030a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	2203      	movs	r2, #3
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003074:	2201      	movs	r2, #1
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 0201 	and.w	r2, r3, #1
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d017      	beq.n	80030dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	2203      	movs	r2, #3
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d123      	bne.n	8003130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	08da      	lsrs	r2, r3, #3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3208      	adds	r2, #8
 80030f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	220f      	movs	r2, #15
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	08da      	lsrs	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3208      	adds	r2, #8
 800312a:	69b9      	ldr	r1, [r7, #24]
 800312c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	2203      	movs	r2, #3
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0203 	and.w	r2, r3, #3
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80a2 	beq.w	80032b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	4b57      	ldr	r3, [pc, #348]	@ (80032d4 <HAL_GPIO_Init+0x2e8>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317a:	4a56      	ldr	r2, [pc, #344]	@ (80032d4 <HAL_GPIO_Init+0x2e8>)
 800317c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003180:	6453      	str	r3, [r2, #68]	@ 0x44
 8003182:	4b54      	ldr	r3, [pc, #336]	@ (80032d4 <HAL_GPIO_Init+0x2e8>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800318e:	4a52      	ldr	r2, [pc, #328]	@ (80032d8 <HAL_GPIO_Init+0x2ec>)
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	3302      	adds	r3, #2
 8003196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	220f      	movs	r2, #15
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a49      	ldr	r2, [pc, #292]	@ (80032dc <HAL_GPIO_Init+0x2f0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d019      	beq.n	80031ee <HAL_GPIO_Init+0x202>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a48      	ldr	r2, [pc, #288]	@ (80032e0 <HAL_GPIO_Init+0x2f4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_GPIO_Init+0x1fe>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a47      	ldr	r2, [pc, #284]	@ (80032e4 <HAL_GPIO_Init+0x2f8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00d      	beq.n	80031e6 <HAL_GPIO_Init+0x1fa>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a46      	ldr	r2, [pc, #280]	@ (80032e8 <HAL_GPIO_Init+0x2fc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <HAL_GPIO_Init+0x1f6>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a45      	ldr	r2, [pc, #276]	@ (80032ec <HAL_GPIO_Init+0x300>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_GPIO_Init+0x1f2>
 80031da:	2304      	movs	r3, #4
 80031dc:	e008      	b.n	80031f0 <HAL_GPIO_Init+0x204>
 80031de:	2307      	movs	r3, #7
 80031e0:	e006      	b.n	80031f0 <HAL_GPIO_Init+0x204>
 80031e2:	2303      	movs	r3, #3
 80031e4:	e004      	b.n	80031f0 <HAL_GPIO_Init+0x204>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e002      	b.n	80031f0 <HAL_GPIO_Init+0x204>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_GPIO_Init+0x204>
 80031ee:	2300      	movs	r3, #0
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	f002 0203 	and.w	r2, r2, #3
 80031f6:	0092      	lsls	r2, r2, #2
 80031f8:	4093      	lsls	r3, r2
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003200:	4935      	ldr	r1, [pc, #212]	@ (80032d8 <HAL_GPIO_Init+0x2ec>)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	089b      	lsrs	r3, r3, #2
 8003206:	3302      	adds	r3, #2
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800320e:	4b38      	ldr	r3, [pc, #224]	@ (80032f0 <HAL_GPIO_Init+0x304>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003232:	4a2f      	ldr	r2, [pc, #188]	@ (80032f0 <HAL_GPIO_Init+0x304>)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003238:	4b2d      	ldr	r3, [pc, #180]	@ (80032f0 <HAL_GPIO_Init+0x304>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800325c:	4a24      	ldr	r2, [pc, #144]	@ (80032f0 <HAL_GPIO_Init+0x304>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003262:	4b23      	ldr	r3, [pc, #140]	@ (80032f0 <HAL_GPIO_Init+0x304>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003286:	4a1a      	ldr	r2, [pc, #104]	@ (80032f0 <HAL_GPIO_Init+0x304>)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800328c:	4b18      	ldr	r3, [pc, #96]	@ (80032f0 <HAL_GPIO_Init+0x304>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032b0:	4a0f      	ldr	r2, [pc, #60]	@ (80032f0 <HAL_GPIO_Init+0x304>)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3301      	adds	r3, #1
 80032ba:	61fb      	str	r3, [r7, #28]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	2b0f      	cmp	r3, #15
 80032c0:	f67f aea2 	bls.w	8003008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	3724      	adds	r7, #36	@ 0x24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40013800 	.word	0x40013800
 80032dc:	40020000 	.word	0x40020000
 80032e0:	40020400 	.word	0x40020400
 80032e4:	40020800 	.word	0x40020800
 80032e8:	40020c00 	.word	0x40020c00
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40013c00 	.word	0x40013c00

080032f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
 8003300:	4613      	mov	r3, r2
 8003302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003304:	787b      	ldrb	r3, [r7, #1]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800330a:	887a      	ldrh	r2, [r7, #2]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003310:	e003      	b.n	800331a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003312:	887b      	ldrh	r3, [r7, #2]
 8003314:	041a      	lsls	r2, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	619a      	str	r2, [r3, #24]
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e12b      	b.n	8003592 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fe fc58 	bl	8001c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2224      	movs	r2, #36	@ 0x24
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800337a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800338a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800338c:	f003 f920 	bl	80065d0 <HAL_RCC_GetPCLK1Freq>
 8003390:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4a81      	ldr	r2, [pc, #516]	@ (800359c <HAL_I2C_Init+0x274>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d807      	bhi.n	80033ac <HAL_I2C_Init+0x84>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4a80      	ldr	r2, [pc, #512]	@ (80035a0 <HAL_I2C_Init+0x278>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	bf94      	ite	ls
 80033a4:	2301      	movls	r3, #1
 80033a6:	2300      	movhi	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	e006      	b.n	80033ba <HAL_I2C_Init+0x92>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a7d      	ldr	r2, [pc, #500]	@ (80035a4 <HAL_I2C_Init+0x27c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	bf94      	ite	ls
 80033b4:	2301      	movls	r3, #1
 80033b6:	2300      	movhi	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e0e7      	b.n	8003592 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4a78      	ldr	r2, [pc, #480]	@ (80035a8 <HAL_I2C_Init+0x280>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	0c9b      	lsrs	r3, r3, #18
 80033cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4a6a      	ldr	r2, [pc, #424]	@ (800359c <HAL_I2C_Init+0x274>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d802      	bhi.n	80033fc <HAL_I2C_Init+0xd4>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3301      	adds	r3, #1
 80033fa:	e009      	b.n	8003410 <HAL_I2C_Init+0xe8>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	4a69      	ldr	r2, [pc, #420]	@ (80035ac <HAL_I2C_Init+0x284>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	3301      	adds	r3, #1
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	430b      	orrs	r3, r1
 8003416:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003422:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	495c      	ldr	r1, [pc, #368]	@ (800359c <HAL_I2C_Init+0x274>)
 800342c:	428b      	cmp	r3, r1
 800342e:	d819      	bhi.n	8003464 <HAL_I2C_Init+0x13c>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1e59      	subs	r1, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	fbb1 f3f3 	udiv	r3, r1, r3
 800343e:	1c59      	adds	r1, r3, #1
 8003440:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003444:	400b      	ands	r3, r1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_I2C_Init+0x138>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1e59      	subs	r1, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	fbb1 f3f3 	udiv	r3, r1, r3
 8003458:	3301      	adds	r3, #1
 800345a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345e:	e051      	b.n	8003504 <HAL_I2C_Init+0x1dc>
 8003460:	2304      	movs	r3, #4
 8003462:	e04f      	b.n	8003504 <HAL_I2C_Init+0x1dc>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d111      	bne.n	8003490 <HAL_I2C_Init+0x168>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1e58      	subs	r0, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	440b      	add	r3, r1
 800347a:	fbb0 f3f3 	udiv	r3, r0, r3
 800347e:	3301      	adds	r3, #1
 8003480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e012      	b.n	80034b6 <HAL_I2C_Init+0x18e>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1e58      	subs	r0, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	0099      	lsls	r1, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a6:	3301      	adds	r3, #1
 80034a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Init+0x196>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e022      	b.n	8003504 <HAL_I2C_Init+0x1dc>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10e      	bne.n	80034e4 <HAL_I2C_Init+0x1bc>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1e58      	subs	r0, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6859      	ldr	r1, [r3, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	440b      	add	r3, r1
 80034d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d8:	3301      	adds	r3, #1
 80034da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034e2:	e00f      	b.n	8003504 <HAL_I2C_Init+0x1dc>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1e58      	subs	r0, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	0099      	lsls	r1, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fa:	3301      	adds	r3, #1
 80034fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003500:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	6809      	ldr	r1, [r1, #0]
 8003508:	4313      	orrs	r3, r2
 800350a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003532:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6911      	ldr	r1, [r2, #16]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68d2      	ldr	r2, [r2, #12]
 800353e:	4311      	orrs	r1, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	430b      	orrs	r3, r1
 8003546:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	000186a0 	.word	0x000186a0
 80035a0:	001e847f 	.word	0x001e847f
 80035a4:	003d08ff 	.word	0x003d08ff
 80035a8:	431bde83 	.word	0x431bde83
 80035ac:	10624dd3 	.word	0x10624dd3

080035b0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c2:	2b80      	cmp	r3, #128	@ 0x80
 80035c4:	d103      	bne.n	80035ce <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2200      	movs	r2, #0
 80035cc:	611a      	str	r2, [r3, #16]
  }
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	461a      	mov	r2, r3
 80035e8:	460b      	mov	r3, r1
 80035ea:	817b      	strh	r3, [r7, #10]
 80035ec:	4613      	mov	r3, r2
 80035ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035f0:	f7fe ffda 	bl	80025a8 <HAL_GetTick>
 80035f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b20      	cmp	r3, #32
 8003600:	f040 80e0 	bne.w	80037c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2319      	movs	r3, #25
 800360a:	2201      	movs	r2, #1
 800360c:	4970      	ldr	r1, [pc, #448]	@ (80037d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f002 f8ea 	bl	80057e8 <I2C_WaitOnFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800361a:	2302      	movs	r3, #2
 800361c:	e0d3      	b.n	80037c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_I2C_Master_Transmit+0x50>
 8003628:	2302      	movs	r3, #2
 800362a:	e0cc      	b.n	80037c6 <HAL_I2C_Master_Transmit+0x1ea>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d007      	beq.n	8003652 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003660:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2221      	movs	r2, #33	@ 0x21
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2210      	movs	r2, #16
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	893a      	ldrh	r2, [r7, #8]
 8003682:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4a50      	ldr	r2, [pc, #320]	@ (80037d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003692:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003694:	8979      	ldrh	r1, [r7, #10]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	6a3a      	ldr	r2, [r7, #32]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f001 feac 	bl	80053f8 <I2C_MasterRequestWrite>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e08d      	b.n	80037c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036c0:	e066      	b.n	8003790 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	6a39      	ldr	r1, [r7, #32]
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f002 f9a8 	bl	8005a1c <I2C_WaitOnTXEFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00d      	beq.n	80036ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d107      	bne.n	80036ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e06b      	b.n	80037c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	781a      	ldrb	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b04      	cmp	r3, #4
 800372a:	d11b      	bne.n	8003764 <HAL_I2C_Master_Transmit+0x188>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003730:	2b00      	cmp	r3, #0
 8003732:	d017      	beq.n	8003764 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	781a      	ldrb	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	6a39      	ldr	r1, [r7, #32]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f002 f99f 	bl	8005aac <I2C_WaitOnBTFFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00d      	beq.n	8003790 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003778:	2b04      	cmp	r3, #4
 800377a:	d107      	bne.n	800378c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800378a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e01a      	b.n	80037c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003794:	2b00      	cmp	r3, #0
 8003796:	d194      	bne.n	80036c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e000      	b.n	80037c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
  }
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	00100002 	.word	0x00100002
 80037d4:	ffff0000 	.word	0xffff0000

080037d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08c      	sub	sp, #48	@ 0x30
 80037dc:	af02      	add	r7, sp, #8
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	461a      	mov	r2, r3
 80037e4:	460b      	mov	r3, r1
 80037e6:	817b      	strh	r3, [r7, #10]
 80037e8:	4613      	mov	r3, r2
 80037ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ec:	f7fe fedc 	bl	80025a8 <HAL_GetTick>
 80037f0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	f040 8217 	bne.w	8003c2e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	2319      	movs	r3, #25
 8003806:	2201      	movs	r2, #1
 8003808:	497c      	ldr	r1, [pc, #496]	@ (80039fc <HAL_I2C_Master_Receive+0x224>)
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f001 ffec 	bl	80057e8 <I2C_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003816:	2302      	movs	r3, #2
 8003818:	e20a      	b.n	8003c30 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_I2C_Master_Receive+0x50>
 8003824:	2302      	movs	r3, #2
 8003826:	e203      	b.n	8003c30 <HAL_I2C_Master_Receive+0x458>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b01      	cmp	r3, #1
 800383c:	d007      	beq.n	800384e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0201 	orr.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800385c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2222      	movs	r2, #34	@ 0x22
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2210      	movs	r2, #16
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	893a      	ldrh	r2, [r7, #8]
 800387e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4a5c      	ldr	r2, [pc, #368]	@ (8003a00 <HAL_I2C_Master_Receive+0x228>)
 800388e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003890:	8979      	ldrh	r1, [r7, #10]
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f001 fe30 	bl	80054fc <I2C_MasterRequestRead>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e1c4      	b.n	8003c30 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d113      	bne.n	80038d6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ae:	2300      	movs	r3, #0
 80038b0:	623b      	str	r3, [r7, #32]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	623b      	str	r3, [r7, #32]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	623b      	str	r3, [r7, #32]
 80038c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e198      	b.n	8003c08 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d11b      	bne.n	8003916 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	61fb      	str	r3, [r7, #28]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e178      	b.n	8003c08 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391a:	2b02      	cmp	r3, #2
 800391c:	d11b      	bne.n	8003956 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800392c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800393c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	e158      	b.n	8003c08 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003964:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800397c:	e144      	b.n	8003c08 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003982:	2b03      	cmp	r3, #3
 8003984:	f200 80f1 	bhi.w	8003b6a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398c:	2b01      	cmp	r3, #1
 800398e:	d123      	bne.n	80039d8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003992:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f002 f903 	bl	8005ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e145      	b.n	8003c30 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039d6:	e117      	b.n	8003c08 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d14e      	bne.n	8003a7e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e6:	2200      	movs	r2, #0
 80039e8:	4906      	ldr	r1, [pc, #24]	@ (8003a04 <HAL_I2C_Master_Receive+0x22c>)
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f001 fefc 	bl	80057e8 <I2C_WaitOnFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e11a      	b.n	8003c30 <HAL_I2C_Master_Receive+0x458>
 80039fa:	bf00      	nop
 80039fc:	00100002 	.word	0x00100002
 8003a00:	ffff0000 	.word	0xffff0000
 8003a04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a7c:	e0c4      	b.n	8003c08 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a84:	2200      	movs	r2, #0
 8003a86:	496c      	ldr	r1, [pc, #432]	@ (8003c38 <HAL_I2C_Master_Receive+0x460>)
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f001 fead 	bl	80057e8 <I2C_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0cb      	b.n	8003c30 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	4955      	ldr	r1, [pc, #340]	@ (8003c38 <HAL_I2C_Master_Receive+0x460>)
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f001 fe7f 	bl	80057e8 <I2C_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e09d      	b.n	8003c30 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b68:	e04e      	b.n	8003c08 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f002 f816 	bl	8005ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e058      	b.n	8003c30 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d124      	bne.n	8003c08 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d107      	bne.n	8003bd6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f47f aeb6 	bne.w	800397e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
  }
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3728      	adds	r7, #40	@ 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	00010004 	.word	0x00010004

08003c3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c64:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d003      	beq.n	8003c74 <HAL_I2C_EV_IRQHandler+0x38>
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b40      	cmp	r3, #64	@ 0x40
 8003c70:	f040 80b1 	bne.w	8003dd6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <HAL_I2C_EV_IRQHandler+0x6e>
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003c94:	d003      	beq.n	8003c9e <HAL_I2C_EV_IRQHandler+0x62>
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003c9c:	d101      	bne.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x66>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x68>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	f000 8114 	beq.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <HAL_I2C_EV_IRQHandler+0x90>
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d006      	beq.n	8003ccc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f001 fffa 	bl	8005cb8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fd7a 	bl	80047be <I2C_Master_SB>
 8003cca:	e083      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d008      	beq.n	8003ce8 <HAL_I2C_EV_IRQHandler+0xac>
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fdf2 	bl	80048ca <I2C_Master_ADD10>
 8003ce6:	e075      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_I2C_EV_IRQHandler+0xc8>
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fe0e 	bl	800491e <I2C_Master_ADDR>
 8003d02:	e067      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d036      	beq.n	8003d7c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d1c:	f000 80db 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00d      	beq.n	8003d46 <HAL_I2C_EV_IRQHandler+0x10a>
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_I2C_EV_IRQHandler+0x10a>
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d103      	bne.n	8003d46 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f9d6 	bl	80040f0 <I2C_MasterTransmit_TXE>
 8003d44:	e046      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80c2 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80bc 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d5e:	7bbb      	ldrb	r3, [r7, #14]
 8003d60:	2b21      	cmp	r3, #33	@ 0x21
 8003d62:	d103      	bne.n	8003d6c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fa5f 	bl	8004228 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d6a:	e0b4      	b.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b40      	cmp	r3, #64	@ 0x40
 8003d70:	f040 80b1 	bne.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 facd 	bl	8004314 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d7a:	e0ac      	b.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d8a:	f000 80a4 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00d      	beq.n	8003db4 <HAL_I2C_EV_IRQHandler+0x178>
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_I2C_EV_IRQHandler+0x178>
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d103      	bne.n	8003db4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fb49 	bl	8004444 <I2C_MasterReceive_RXNE>
 8003db2:	e00f      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 808b 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 8085 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fc01 	bl	80045d4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dd2:	e080      	b.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003dd4:	e07f      	b.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d004      	beq.n	8003de8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	e007      	b.n	8003df8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d011      	beq.n	8003e26 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00c      	beq.n	8003e26 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e1c:	69b9      	ldr	r1, [r7, #24]
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 ffcc 	bl	8004dbc <I2C_Slave_ADDR>
 8003e24:	e05a      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0x206>
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f001 f806 	bl	8004e4c <I2C_Slave_STOPF>
 8003e40:	e04c      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e42:	7bbb      	ldrb	r3, [r7, #14]
 8003e44:	2b21      	cmp	r3, #33	@ 0x21
 8003e46:	d002      	beq.n	8003e4e <HAL_I2C_EV_IRQHandler+0x212>
 8003e48:	7bbb      	ldrb	r3, [r7, #14]
 8003e4a:	2b29      	cmp	r3, #41	@ 0x29
 8003e4c:	d120      	bne.n	8003e90 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00d      	beq.n	8003e74 <HAL_I2C_EV_IRQHandler+0x238>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_I2C_EV_IRQHandler+0x238>
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d103      	bne.n	8003e74 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fee7 	bl	8004c40 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e72:	e032      	b.n	8003eda <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d02d      	beq.n	8003eda <HAL_I2C_EV_IRQHandler+0x29e>
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d028      	beq.n	8003eda <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 ff16 	bl	8004cba <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e8e:	e024      	b.n	8003eda <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <HAL_I2C_EV_IRQHandler+0x27a>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_I2C_EV_IRQHandler+0x27a>
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 ff24 	bl	8004cfc <I2C_SlaveReceive_RXNE>
 8003eb4:	e012      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00d      	beq.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 ff54 	bl	8004d78 <I2C_SlaveReceive_BTF>
 8003ed0:	e004      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003ed2:	bf00      	nop
 8003ed4:	e002      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eda:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003edc:	3720      	adds	r7, #32
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b08a      	sub	sp, #40	@ 0x28
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f04:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00d      	beq.n	8003f2c <HAL_I2C_ER_IRQHandler+0x4a>
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f2a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <HAL_I2C_ER_IRQHandler+0x70>
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	f043 0302 	orr.w	r3, r3, #2
 8003f46:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003f50:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d03e      	beq.n	8003fda <HAL_I2C_ER_IRQHandler+0xf8>
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d039      	beq.n	8003fda <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003f66:	7efb      	ldrb	r3, [r7, #27]
 8003f68:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f78:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f80:	7ebb      	ldrb	r3, [r7, #26]
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d112      	bne.n	8003fac <HAL_I2C_ER_IRQHandler+0xca>
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10f      	bne.n	8003fac <HAL_I2C_ER_IRQHandler+0xca>
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
 8003f8e:	2b21      	cmp	r3, #33	@ 0x21
 8003f90:	d008      	beq.n	8003fa4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003f92:	7cfb      	ldrb	r3, [r7, #19]
 8003f94:	2b29      	cmp	r3, #41	@ 0x29
 8003f96:	d005      	beq.n	8003fa4 <HAL_I2C_ER_IRQHandler+0xc2>
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	2b28      	cmp	r3, #40	@ 0x28
 8003f9c:	d106      	bne.n	8003fac <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b21      	cmp	r3, #33	@ 0x21
 8003fa2:	d103      	bne.n	8003fac <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f001 f881 	bl	80050ac <I2C_Slave_AF>
 8003faa:	e016      	b.n	8003fda <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fb4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	f043 0304 	orr.w	r3, r3, #4
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003fbe:	7efb      	ldrb	r3, [r7, #27]
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d002      	beq.n	8003fca <HAL_I2C_ER_IRQHandler+0xe8>
 8003fc4:	7efb      	ldrb	r3, [r7, #27]
 8003fc6:	2b40      	cmp	r3, #64	@ 0x40
 8003fc8:	d107      	bne.n	8003fda <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00d      	beq.n	8004000 <HAL_I2C_ER_IRQHandler+0x11e>
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	f043 0308 	orr.w	r3, r3, #8
 8003ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003ffe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f001 f8be 	bl	8005194 <I2C_ITError>
  }
}
 8004018:	bf00      	nop
 800401a:	3728      	adds	r7, #40	@ 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	70fb      	strb	r3, [r7, #3]
 800407c:	4613      	mov	r3, r2
 800407e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004106:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004112:	2b00      	cmp	r3, #0
 8004114:	d150      	bne.n	80041b8 <I2C_MasterTransmit_TXE+0xc8>
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2b21      	cmp	r3, #33	@ 0x21
 800411a:	d14d      	bne.n	80041b8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b08      	cmp	r3, #8
 8004120:	d01d      	beq.n	800415e <I2C_MasterTransmit_TXE+0x6e>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b20      	cmp	r3, #32
 8004126:	d01a      	beq.n	800415e <I2C_MasterTransmit_TXE+0x6e>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800412e:	d016      	beq.n	800415e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800413e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2211      	movs	r2, #17
 8004144:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff ff62 	bl	8004020 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800415c:	e060      	b.n	8004220 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800416c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b40      	cmp	r3, #64	@ 0x40
 8004196:	d107      	bne.n	80041a8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ff7d 	bl	80040a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041a6:	e03b      	b.n	8004220 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff ff35 	bl	8004020 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041b6:	e033      	b.n	8004220 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b21      	cmp	r3, #33	@ 0x21
 80041bc:	d005      	beq.n	80041ca <I2C_MasterTransmit_TXE+0xda>
 80041be:	7bbb      	ldrb	r3, [r7, #14]
 80041c0:	2b40      	cmp	r3, #64	@ 0x40
 80041c2:	d12d      	bne.n	8004220 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	2b22      	cmp	r3, #34	@ 0x22
 80041c8:	d12a      	bne.n	8004220 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d108      	bne.n	80041e6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80041e4:	e01c      	b.n	8004220 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b40      	cmp	r3, #64	@ 0x40
 80041f0:	d103      	bne.n	80041fa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f88e 	bl	8004314 <I2C_MemoryTransmit_TXE_BTF>
}
 80041f8:	e012      	b.n	8004220 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	781a      	ldrb	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800421e:	e7ff      	b.n	8004220 <I2C_MasterTransmit_TXE+0x130>
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004234:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b21      	cmp	r3, #33	@ 0x21
 8004240:	d164      	bne.n	800430c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d012      	beq.n	8004272 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	781a      	ldrb	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004270:	e04c      	b.n	800430c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d01d      	beq.n	80042b4 <I2C_MasterTransmit_BTF+0x8c>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b20      	cmp	r3, #32
 800427c:	d01a      	beq.n	80042b4 <I2C_MasterTransmit_BTF+0x8c>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004284:	d016      	beq.n	80042b4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004294:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2211      	movs	r2, #17
 800429a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff feb7 	bl	8004020 <HAL_I2C_MasterTxCpltCallback>
}
 80042b2:	e02b      	b.n	800430c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042c2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b40      	cmp	r3, #64	@ 0x40
 80042ec:	d107      	bne.n	80042fe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fed2 	bl	80040a0 <HAL_I2C_MemTxCpltCallback>
}
 80042fc:	e006      	b.n	800430c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff fe8a 	bl	8004020 <HAL_I2C_MasterTxCpltCallback>
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004322:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11d      	bne.n	8004368 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004330:	2b01      	cmp	r3, #1
 8004332:	d10b      	bne.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004338:	b2da      	uxtb	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004344:	1c9a      	adds	r2, r3, #2
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800434a:	e077      	b.n	800443c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004350:	b29b      	uxth	r3, r3
 8004352:	121b      	asrs	r3, r3, #8
 8004354:	b2da      	uxtb	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004366:	e069      	b.n	800443c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800436c:	2b01      	cmp	r3, #1
 800436e:	d10b      	bne.n	8004388 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004374:	b2da      	uxtb	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004386:	e059      	b.n	800443c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800438c:	2b02      	cmp	r3, #2
 800438e:	d152      	bne.n	8004436 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	2b22      	cmp	r3, #34	@ 0x22
 8004394:	d10d      	bne.n	80043b2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043a4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80043b0:	e044      	b.n	800443c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d015      	beq.n	80043e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	2b21      	cmp	r3, #33	@ 0x21
 80043c0:	d112      	bne.n	80043e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80043e6:	e029      	b.n	800443c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d124      	bne.n	800443c <I2C_MemoryTransmit_TXE_BTF+0x128>
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b21      	cmp	r3, #33	@ 0x21
 80043f6:	d121      	bne.n	800443c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004406:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004416:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2220      	movs	r2, #32
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff fe36 	bl	80040a0 <HAL_I2C_MemTxCpltCallback>
}
 8004434:	e002      	b.n	800443c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff f8ba 	bl	80035b0 <I2C_Flush_DR>
}
 800443c:	bf00      	nop
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b22      	cmp	r3, #34	@ 0x22
 8004456:	f040 80b9 	bne.w	80045cc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d921      	bls.n	80044b2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b03      	cmp	r3, #3
 800449c:	f040 8096 	bne.w	80045cc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ae:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80044b0:	e08c      	b.n	80045cc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d07f      	beq.n	80045ba <I2C_MasterReceive_RXNE+0x176>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d002      	beq.n	80044c6 <I2C_MasterReceive_RXNE+0x82>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d179      	bne.n	80045ba <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f001 fb38 	bl	8005b3c <I2C_WaitOnSTOPRequestThroughIT>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d14c      	bne.n	800456c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044e0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044f0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b40      	cmp	r3, #64	@ 0x40
 800452a:	d10a      	bne.n	8004542 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff fdba 	bl	80040b4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004540:	e044      	b.n	80045cc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b08      	cmp	r3, #8
 800454e:	d002      	beq.n	8004556 <I2C_MasterReceive_RXNE+0x112>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b20      	cmp	r3, #32
 8004554:	d103      	bne.n	800455e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	@ 0x30
 800455c:	e002      	b.n	8004564 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2212      	movs	r2, #18
 8004562:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff fd65 	bl	8004034 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800456a:	e02f      	b.n	80045cc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800457a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff fd88 	bl	80040c8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045b8:	e008      	b.n	80045cc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045c8:	605a      	str	r2, [r3, #4]
}
 80045ca:	e7ff      	b.n	80045cc <I2C_MasterReceive_RXNE+0x188>
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d11b      	bne.n	8004624 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045fa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004622:	e0c8      	b.n	80047b6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b03      	cmp	r3, #3
 800462c:	d129      	bne.n	8004682 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800463c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b04      	cmp	r3, #4
 8004642:	d00a      	beq.n	800465a <I2C_MasterReceive_BTF+0x86>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d007      	beq.n	800465a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004658:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004680:	e099      	b.n	80047b6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004686:	b29b      	uxth	r3, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	f040 8081 	bne.w	8004790 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d002      	beq.n	800469a <I2C_MasterReceive_BTF+0xc6>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b10      	cmp	r3, #16
 8004698:	d108      	bne.n	80046ac <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	e019      	b.n	80046e0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d002      	beq.n	80046b8 <I2C_MasterReceive_BTF+0xe4>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d108      	bne.n	80046ca <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e00a      	b.n	80046e0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d007      	beq.n	80046e0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800473a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b40      	cmp	r3, #64	@ 0x40
 800474e:	d10a      	bne.n	8004766 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff fca8 	bl	80040b4 <HAL_I2C_MemRxCpltCallback>
}
 8004764:	e027      	b.n	80047b6 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d002      	beq.n	800477a <I2C_MasterReceive_BTF+0x1a6>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b20      	cmp	r3, #32
 8004778:	d103      	bne.n	8004782 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004780:	e002      	b.n	8004788 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2212      	movs	r2, #18
 8004786:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff fc53 	bl	8004034 <HAL_I2C_MasterRxCpltCallback>
}
 800478e:	e012      	b.n	80047b6 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b40      	cmp	r3, #64	@ 0x40
 80047d0:	d117      	bne.n	8004802 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047ea:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80047ec:	e067      	b.n	80048be <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	611a      	str	r2, [r3, #16]
}
 8004800:	e05d      	b.n	80048be <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800480a:	d133      	bne.n	8004874 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b21      	cmp	r3, #33	@ 0x21
 8004816:	d109      	bne.n	800482c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004828:	611a      	str	r2, [r3, #16]
 800482a:	e008      	b.n	800483e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004830:	b2db      	uxtb	r3, r3
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	b2da      	uxtb	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004842:	2b00      	cmp	r3, #0
 8004844:	d004      	beq.n	8004850 <I2C_Master_SB+0x92>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800484a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d108      	bne.n	8004862 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	2b00      	cmp	r3, #0
 8004856:	d032      	beq.n	80048be <I2C_Master_SB+0x100>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485e:	2b00      	cmp	r3, #0
 8004860:	d02d      	beq.n	80048be <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004870:	605a      	str	r2, [r3, #4]
}
 8004872:	e024      	b.n	80048be <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10e      	bne.n	800489a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004880:	b29b      	uxth	r3, r3
 8004882:	11db      	asrs	r3, r3, #7
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f003 0306 	and.w	r3, r3, #6
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f063 030f 	orn	r3, r3, #15
 8004890:	b2da      	uxtb	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	611a      	str	r2, [r3, #16]
}
 8004898:	e011      	b.n	80048be <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d10d      	bne.n	80048be <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	11db      	asrs	r3, r3, #7
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	f003 0306 	and.w	r3, r3, #6
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	f063 030e 	orn	r3, r3, #14
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	611a      	str	r2, [r3, #16]
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d004      	beq.n	80048f0 <I2C_Master_ADD10+0x26>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d108      	bne.n	8004902 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00c      	beq.n	8004912 <I2C_Master_ADD10+0x48>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d007      	beq.n	8004912 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004910:	605a      	str	r2, [r3, #4]
  }
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800491e:	b480      	push	{r7}
 8004920:	b091      	sub	sp, #68	@ 0x44
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800492c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004934:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b22      	cmp	r3, #34	@ 0x22
 8004946:	f040 8169 	bne.w	8004c1c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10f      	bne.n	8004972 <I2C_Master_ADDR+0x54>
 8004952:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004956:	2b40      	cmp	r3, #64	@ 0x40
 8004958:	d10b      	bne.n	8004972 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495a:	2300      	movs	r3, #0
 800495c:	633b      	str	r3, [r7, #48]	@ 0x30
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	633b      	str	r3, [r7, #48]	@ 0x30
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	633b      	str	r3, [r7, #48]	@ 0x30
 800496e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004970:	e160      	b.n	8004c34 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004976:	2b00      	cmp	r3, #0
 8004978:	d11d      	bne.n	80049b6 <I2C_Master_ADDR+0x98>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004982:	d118      	bne.n	80049b6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004984:	2300      	movs	r3, #0
 8004986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049a8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80049b4:	e13e      	b.n	8004c34 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d113      	bne.n	80049e8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c0:	2300      	movs	r3, #0
 80049c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e115      	b.n	8004c14 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	f040 808a 	bne.w	8004b08 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80049f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049fa:	d137      	bne.n	8004a6c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a0a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a1a:	d113      	bne.n	8004a44 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a2a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	e0e7      	b.n	8004c14 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a44:	2300      	movs	r3, #0
 8004a46:	623b      	str	r3, [r7, #32]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	623b      	str	r3, [r7, #32]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	623b      	str	r3, [r7, #32]
 8004a58:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e0d3      	b.n	8004c14 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d02e      	beq.n	8004ad0 <I2C_Master_ADDR+0x1b2>
 8004a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d02b      	beq.n	8004ad0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7a:	2b12      	cmp	r3, #18
 8004a7c:	d102      	bne.n	8004a84 <I2C_Master_ADDR+0x166>
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d125      	bne.n	8004ad0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d00e      	beq.n	8004aa8 <I2C_Master_ADDR+0x18a>
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d00b      	beq.n	8004aa8 <I2C_Master_ADDR+0x18a>
 8004a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d008      	beq.n	8004aa8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	e007      	b.n	8004ab8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ab6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	61fb      	str	r3, [r7, #28]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	e0a1      	b.n	8004c14 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ade:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	61bb      	str	r3, [r7, #24]
 8004af4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e085      	b.n	8004c14 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d14d      	bne.n	8004bae <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d016      	beq.n	8004b46 <I2C_Master_ADDR+0x228>
 8004b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d013      	beq.n	8004b46 <I2C_Master_ADDR+0x228>
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b20:	2b10      	cmp	r3, #16
 8004b22:	d010      	beq.n	8004b46 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b32:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	e007      	b.n	8004b56 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b54:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b64:	d117      	bne.n	8004b96 <I2C_Master_ADDR+0x278>
 8004b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b6c:	d00b      	beq.n	8004b86 <I2C_Master_ADDR+0x268>
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d008      	beq.n	8004b86 <I2C_Master_ADDR+0x268>
 8004b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d005      	beq.n	8004b86 <I2C_Master_ADDR+0x268>
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7c:	2b10      	cmp	r3, #16
 8004b7e:	d002      	beq.n	8004b86 <I2C_Master_ADDR+0x268>
 8004b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d107      	bne.n	8004b96 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b94:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	e032      	b.n	8004c14 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bbc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bcc:	d117      	bne.n	8004bfe <I2C_Master_ADDR+0x2e0>
 8004bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bd4:	d00b      	beq.n	8004bee <I2C_Master_ADDR+0x2d0>
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d008      	beq.n	8004bee <I2C_Master_ADDR+0x2d0>
 8004bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d005      	beq.n	8004bee <I2C_Master_ADDR+0x2d0>
 8004be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d002      	beq.n	8004bee <I2C_Master_ADDR+0x2d0>
 8004be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d107      	bne.n	8004bfe <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004bfc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004c1a:	e00b      	b.n	8004c34 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
}
 8004c32:	e7ff      	b.n	8004c34 <I2C_Master_ADDR+0x316>
 8004c34:	bf00      	nop
 8004c36:	3744      	adds	r7, #68	@ 0x44
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d02b      	beq.n	8004cb2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5e:	781a      	ldrb	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d114      	bne.n	8004cb2 <I2C_SlaveTransmit_TXE+0x72>
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b29      	cmp	r3, #41	@ 0x29
 8004c8c:	d111      	bne.n	8004cb2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c9c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2221      	movs	r2, #33	@ 0x21
 8004ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2228      	movs	r2, #40	@ 0x28
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff f9cb 	bl	8004048 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004cb2:	bf00      	nop
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d011      	beq.n	8004cf0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	781a      	ldrb	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d02c      	beq.n	8004d70 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d114      	bne.n	8004d70 <I2C_SlaveReceive_RXNE+0x74>
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d4a:	d111      	bne.n	8004d70 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d5a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2222      	movs	r2, #34	@ 0x22
 8004d60:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2228      	movs	r2, #40	@ 0x28
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff f976 	bl	800405c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d70:	bf00      	nop
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d012      	beq.n	8004db0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004dd6:	2b28      	cmp	r3, #40	@ 0x28
 8004dd8:	d125      	bne.n	8004e26 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004de8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004df4:	2301      	movs	r3, #1
 8004df6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d103      	bne.n	8004e0a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	81bb      	strh	r3, [r7, #12]
 8004e08:	e002      	b.n	8004e10 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004e18:	89ba      	ldrh	r2, [r7, #12]
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff f926 	bl	8004070 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e24:	e00e      	b.n	8004e44 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e5a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e6a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60bb      	str	r3, [r7, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	60bb      	str	r3, [r7, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e98:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ea8:	d172      	bne.n	8004f90 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	2b22      	cmp	r3, #34	@ 0x22
 8004eae:	d002      	beq.n	8004eb6 <I2C_Slave_STOPF+0x6a>
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004eb4:	d135      	bne.n	8004f22 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed2:	f043 0204 	orr.w	r2, r3, #4
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ee8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fd ff8e 	bl	8002e10 <HAL_DMA_GetState>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d049      	beq.n	8004f8e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efe:	4a69      	ldr	r2, [pc, #420]	@ (80050a4 <I2C_Slave_STOPF+0x258>)
 8004f00:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fd fdd6 	bl	8002ab8 <HAL_DMA_Abort_IT>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d03d      	beq.n	8004f8e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f20:	e035      	b.n	8004f8e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3e:	f043 0204 	orr.w	r2, r3, #4
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f54:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fd ff58 	bl	8002e10 <HAL_DMA_GetState>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d014      	beq.n	8004f90 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6a:	4a4e      	ldr	r2, [pc, #312]	@ (80050a4 <I2C_Slave_STOPF+0x258>)
 8004f6c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fd fda0 	bl	8002ab8 <HAL_DMA_Abort_IT>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d008      	beq.n	8004f90 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4798      	blx	r3
 8004f8c:	e000      	b.n	8004f90 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f8e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d03e      	beq.n	8005018 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d112      	bne.n	8004fce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd8:	2b40      	cmp	r3, #64	@ 0x40
 8004fda:	d112      	bne.n	8005002 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005010:	f043 0204 	orr.w	r2, r3, #4
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f8b7 	bl	8005194 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005026:	e039      	b.n	800509c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	2b2a      	cmp	r3, #42	@ 0x2a
 800502c:	d109      	bne.n	8005042 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2228      	movs	r2, #40	@ 0x28
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff f80d 	bl	800405c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b28      	cmp	r3, #40	@ 0x28
 800504c:	d111      	bne.n	8005072 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a15      	ldr	r2, [pc, #84]	@ (80050a8 <I2C_Slave_STOPF+0x25c>)
 8005052:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff f80e 	bl	800408c <HAL_I2C_ListenCpltCallback>
}
 8005070:	e014      	b.n	800509c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005076:	2b22      	cmp	r3, #34	@ 0x22
 8005078:	d002      	beq.n	8005080 <I2C_Slave_STOPF+0x234>
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	2b22      	cmp	r3, #34	@ 0x22
 800507e:	d10d      	bne.n	800509c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fe ffe0 	bl	800405c <HAL_I2C_SlaveRxCpltCallback>
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	08005699 	.word	0x08005699
 80050a8:	ffff0000 	.word	0xffff0000

080050ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d002      	beq.n	80050ce <I2C_Slave_AF+0x22>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d129      	bne.n	8005122 <I2C_Slave_AF+0x76>
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	2b28      	cmp	r3, #40	@ 0x28
 80050d2:	d126      	bne.n	8005122 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a2e      	ldr	r2, [pc, #184]	@ (8005190 <I2C_Slave_AF+0xe4>)
 80050d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005102:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7fe ffb6 	bl	800408c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005120:	e031      	b.n	8005186 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b21      	cmp	r3, #33	@ 0x21
 8005126:	d129      	bne.n	800517c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a19      	ldr	r2, [pc, #100]	@ (8005190 <I2C_Slave_AF+0xe4>)
 800512c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2221      	movs	r2, #33	@ 0x21
 8005132:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005152:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800515c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800516c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fe fa1e 	bl	80035b0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fe ff67 	bl	8004048 <HAL_I2C_SlaveTxCpltCallback>
}
 800517a:	e004      	b.n	8005186 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005184:	615a      	str	r2, [r3, #20]
}
 8005186:	bf00      	nop
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	ffff0000 	.word	0xffff0000

08005194 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80051ac:	7bbb      	ldrb	r3, [r7, #14]
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d002      	beq.n	80051b8 <I2C_ITError+0x24>
 80051b2:	7bbb      	ldrb	r3, [r7, #14]
 80051b4:	2b40      	cmp	r3, #64	@ 0x40
 80051b6:	d10a      	bne.n	80051ce <I2C_ITError+0x3a>
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	2b22      	cmp	r3, #34	@ 0x22
 80051bc:	d107      	bne.n	80051ce <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051cc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80051d4:	2b28      	cmp	r3, #40	@ 0x28
 80051d6:	d107      	bne.n	80051e8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2228      	movs	r2, #40	@ 0x28
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80051e6:	e015      	b.n	8005214 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051f6:	d00a      	beq.n	800520e <I2C_ITError+0x7a>
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	2b60      	cmp	r3, #96	@ 0x60
 80051fc:	d007      	beq.n	800520e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800521e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005222:	d162      	bne.n	80052ea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005232:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005238:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	d020      	beq.n	8005284 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005246:	4a6a      	ldr	r2, [pc, #424]	@ (80053f0 <I2C_ITError+0x25c>)
 8005248:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800524e:	4618      	mov	r0, r3
 8005250:	f7fd fc32 	bl	8002ab8 <HAL_DMA_Abort_IT>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 8089 	beq.w	800536e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0201 	bic.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800527e:	4610      	mov	r0, r2
 8005280:	4798      	blx	r3
 8005282:	e074      	b.n	800536e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005288:	4a59      	ldr	r2, [pc, #356]	@ (80053f0 <I2C_ITError+0x25c>)
 800528a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005290:	4618      	mov	r0, r3
 8005292:	f7fd fc11 	bl	8002ab8 <HAL_DMA_Abort_IT>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d068      	beq.n	800536e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a6:	2b40      	cmp	r3, #64	@ 0x40
 80052a8:	d10b      	bne.n	80052c2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0201 	bic.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80052e4:	4610      	mov	r0, r2
 80052e6:	4798      	blx	r3
 80052e8:	e041      	b.n	800536e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b60      	cmp	r3, #96	@ 0x60
 80052f4:	d125      	bne.n	8005342 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530e:	2b40      	cmp	r3, #64	@ 0x40
 8005310:	d10b      	bne.n	800532a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0201 	bic.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fe fece 	bl	80040dc <HAL_I2C_AbortCpltCallback>
 8005340:	e015      	b.n	800536e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534c:	2b40      	cmp	r3, #64	@ 0x40
 800534e:	d10b      	bne.n	8005368 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fe fead 	bl	80040c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10e      	bne.n	800539c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005384:	2b00      	cmp	r3, #0
 8005386:	d109      	bne.n	800539c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80053aa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d113      	bne.n	80053e8 <I2C_ITError+0x254>
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	2b28      	cmp	r3, #40	@ 0x28
 80053c4:	d110      	bne.n	80053e8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a0a      	ldr	r2, [pc, #40]	@ (80053f4 <I2C_ITError+0x260>)
 80053ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fe fe52 	bl	800408c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	08005699 	.word	0x08005699
 80053f4:	ffff0000 	.word	0xffff0000

080053f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	607a      	str	r2, [r7, #4]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	460b      	mov	r3, r1
 8005406:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b08      	cmp	r3, #8
 8005412:	d006      	beq.n	8005422 <I2C_MasterRequestWrite+0x2a>
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d003      	beq.n	8005422 <I2C_MasterRequestWrite+0x2a>
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005420:	d108      	bne.n	8005434 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e00b      	b.n	800544c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005438:	2b12      	cmp	r3, #18
 800543a:	d107      	bne.n	800544c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800544a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f9c5 	bl	80057e8 <I2C_WaitOnFlagUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00d      	beq.n	8005480 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005472:	d103      	bne.n	800547c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800547a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e035      	b.n	80054ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005488:	d108      	bne.n	800549c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800548a:	897b      	ldrh	r3, [r7, #10]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	461a      	mov	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005498:	611a      	str	r2, [r3, #16]
 800549a:	e01b      	b.n	80054d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800549c:	897b      	ldrh	r3, [r7, #10]
 800549e:	11db      	asrs	r3, r3, #7
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f003 0306 	and.w	r3, r3, #6
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f063 030f 	orn	r3, r3, #15
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	490e      	ldr	r1, [pc, #56]	@ (80054f4 <I2C_MasterRequestWrite+0xfc>)
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 fa0e 	bl	80058dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e010      	b.n	80054ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054ca:	897b      	ldrh	r3, [r7, #10]
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	4907      	ldr	r1, [pc, #28]	@ (80054f8 <I2C_MasterRequestWrite+0x100>)
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f9fe 	bl	80058dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	00010008 	.word	0x00010008
 80054f8:	00010002 	.word	0x00010002

080054fc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af02      	add	r7, sp, #8
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	607a      	str	r2, [r7, #4]
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	460b      	mov	r3, r1
 800550a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005510:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005520:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d006      	beq.n	8005536 <I2C_MasterRequestRead+0x3a>
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d003      	beq.n	8005536 <I2C_MasterRequestRead+0x3a>
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005534:	d108      	bne.n	8005548 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e00b      	b.n	8005560 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554c:	2b11      	cmp	r3, #17
 800554e:	d107      	bne.n	8005560 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800555e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f93b 	bl	80057e8 <I2C_WaitOnFlagUntilTimeout>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00d      	beq.n	8005594 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005586:	d103      	bne.n	8005590 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800558e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e079      	b.n	8005688 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800559c:	d108      	bne.n	80055b0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800559e:	897b      	ldrh	r3, [r7, #10]
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	611a      	str	r2, [r3, #16]
 80055ae:	e05f      	b.n	8005670 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055b0:	897b      	ldrh	r3, [r7, #10]
 80055b2:	11db      	asrs	r3, r3, #7
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	f003 0306 	and.w	r3, r3, #6
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f063 030f 	orn	r3, r3, #15
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	4930      	ldr	r1, [pc, #192]	@ (8005690 <I2C_MasterRequestRead+0x194>)
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f984 	bl	80058dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e054      	b.n	8005688 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80055de:	897b      	ldrh	r3, [r7, #10]
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	4929      	ldr	r1, [pc, #164]	@ (8005694 <I2C_MasterRequestRead+0x198>)
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 f974 	bl	80058dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e044      	b.n	8005688 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055fe:	2300      	movs	r3, #0
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005622:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f8d9 	bl	80057e8 <I2C_WaitOnFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00d      	beq.n	8005658 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800564a:	d103      	bne.n	8005654 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005652:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e017      	b.n	8005688 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005658:	897b      	ldrh	r3, [r7, #10]
 800565a:	11db      	asrs	r3, r3, #7
 800565c:	b2db      	uxtb	r3, r3
 800565e:	f003 0306 	and.w	r3, r3, #6
 8005662:	b2db      	uxtb	r3, r3
 8005664:	f063 030e 	orn	r3, r3, #14
 8005668:	b2da      	uxtb	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	4907      	ldr	r1, [pc, #28]	@ (8005694 <I2C_MasterRequestRead+0x198>)
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f930 	bl	80058dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	00010008 	.word	0x00010008
 8005694:	00010002 	.word	0x00010002

08005698 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80056b2:	4b4b      	ldr	r3, [pc, #300]	@ (80057e0 <I2C_DMAAbort+0x148>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	08db      	lsrs	r3, r3, #3
 80056b8:	4a4a      	ldr	r2, [pc, #296]	@ (80057e4 <I2C_DMAAbort+0x14c>)
 80056ba:	fba2 2303 	umull	r2, r3, r2, r3
 80056be:	0a1a      	lsrs	r2, r3, #8
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	00da      	lsls	r2, r3, #3
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d6:	f043 0220 	orr.w	r2, r3, #32
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80056de:	e00a      	b.n	80056f6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056f4:	d0ea      	beq.n	80056cc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005702:	2200      	movs	r2, #0
 8005704:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005712:	2200      	movs	r2, #0
 8005714:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005724:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2200      	movs	r2, #0
 800572a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005738:	2200      	movs	r2, #0
 800573a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005748:	2200      	movs	r2, #0
 800574a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0201 	bic.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b60      	cmp	r3, #96	@ 0x60
 8005766:	d10e      	bne.n	8005786 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2200      	movs	r2, #0
 800577c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800577e:	6978      	ldr	r0, [r7, #20]
 8005780:	f7fe fcac 	bl	80040dc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005784:	e027      	b.n	80057d6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005786:	7cfb      	ldrb	r3, [r7, #19]
 8005788:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800578c:	2b28      	cmp	r3, #40	@ 0x28
 800578e:	d117      	bne.n	80057c0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0201 	orr.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2200      	movs	r2, #0
 80057b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2228      	movs	r2, #40	@ 0x28
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80057be:	e007      	b.n	80057d0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80057d0:	6978      	ldr	r0, [r7, #20]
 80057d2:	f7fe fc79 	bl	80040c8 <HAL_I2C_ErrorCallback>
}
 80057d6:	bf00      	nop
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20000000 	.word	0x20000000
 80057e4:	14f8b589 	.word	0x14f8b589

080057e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	4613      	mov	r3, r2
 80057f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057f8:	e048      	b.n	800588c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005800:	d044      	beq.n	800588c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005802:	f7fc fed1 	bl	80025a8 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d302      	bcc.n	8005818 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d139      	bne.n	800588c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	0c1b      	lsrs	r3, r3, #16
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b01      	cmp	r3, #1
 8005820:	d10d      	bne.n	800583e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	43da      	mvns	r2, r3
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	4013      	ands	r3, r2
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	bf0c      	ite	eq
 8005834:	2301      	moveq	r3, #1
 8005836:	2300      	movne	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	461a      	mov	r2, r3
 800583c:	e00c      	b.n	8005858 <I2C_WaitOnFlagUntilTimeout+0x70>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	43da      	mvns	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	4013      	ands	r3, r2
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	bf0c      	ite	eq
 8005850:	2301      	moveq	r3, #1
 8005852:	2300      	movne	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	461a      	mov	r2, r3
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	429a      	cmp	r2, r3
 800585c:	d116      	bne.n	800588c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005878:	f043 0220 	orr.w	r2, r3, #32
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e023      	b.n	80058d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	0c1b      	lsrs	r3, r3, #16
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b01      	cmp	r3, #1
 8005894:	d10d      	bne.n	80058b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	43da      	mvns	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	4013      	ands	r3, r2
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bf0c      	ite	eq
 80058a8:	2301      	moveq	r3, #1
 80058aa:	2300      	movne	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	e00c      	b.n	80058cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	43da      	mvns	r2, r3
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	4013      	ands	r3, r2
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	bf0c      	ite	eq
 80058c4:	2301      	moveq	r3, #1
 80058c6:	2300      	movne	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d093      	beq.n	80057fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058ea:	e071      	b.n	80059d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058fa:	d123      	bne.n	8005944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800590a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005914:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005930:	f043 0204 	orr.w	r2, r3, #4
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e067      	b.n	8005a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594a:	d041      	beq.n	80059d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800594c:	f7fc fe2c 	bl	80025a8 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	429a      	cmp	r2, r3
 800595a:	d302      	bcc.n	8005962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d136      	bne.n	80059d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	0c1b      	lsrs	r3, r3, #16
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	d10c      	bne.n	8005986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	43da      	mvns	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4013      	ands	r3, r2
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	bf14      	ite	ne
 800597e:	2301      	movne	r3, #1
 8005980:	2300      	moveq	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	e00b      	b.n	800599e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	43da      	mvns	r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	4013      	ands	r3, r2
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	bf14      	ite	ne
 8005998:	2301      	movne	r3, #1
 800599a:	2300      	moveq	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d016      	beq.n	80059d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059bc:	f043 0220 	orr.w	r2, r3, #32
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e021      	b.n	8005a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	0c1b      	lsrs	r3, r3, #16
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d10c      	bne.n	80059f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	43da      	mvns	r2, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	4013      	ands	r3, r2
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	bf14      	ite	ne
 80059ec:	2301      	movne	r3, #1
 80059ee:	2300      	moveq	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	e00b      	b.n	8005a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	43da      	mvns	r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4013      	ands	r3, r2
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	bf14      	ite	ne
 8005a06:	2301      	movne	r3, #1
 8005a08:	2300      	moveq	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f47f af6d 	bne.w	80058ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a28:	e034      	b.n	8005a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f915 	bl	8005c5a <I2C_IsAcknowledgeFailed>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e034      	b.n	8005aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a40:	d028      	beq.n	8005a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a42:	f7fc fdb1 	bl	80025a8 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d302      	bcc.n	8005a58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d11d      	bne.n	8005a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a62:	2b80      	cmp	r3, #128	@ 0x80
 8005a64:	d016      	beq.n	8005a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a80:	f043 0220 	orr.w	r2, r3, #32
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e007      	b.n	8005aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a9e:	2b80      	cmp	r3, #128	@ 0x80
 8005aa0:	d1c3      	bne.n	8005a2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ab8:	e034      	b.n	8005b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 f8cd 	bl	8005c5a <I2C_IsAcknowledgeFailed>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e034      	b.n	8005b34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad0:	d028      	beq.n	8005b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad2:	f7fc fd69 	bl	80025a8 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d302      	bcc.n	8005ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d11d      	bne.n	8005b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	f003 0304 	and.w	r3, r3, #4
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d016      	beq.n	8005b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b10:	f043 0220 	orr.w	r2, r3, #32
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e007      	b.n	8005b34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d1c3      	bne.n	8005aba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b48:	4b13      	ldr	r3, [pc, #76]	@ (8005b98 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	08db      	lsrs	r3, r3, #3
 8005b4e:	4a13      	ldr	r2, [pc, #76]	@ (8005b9c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005b50:	fba2 2303 	umull	r2, r3, r2, r3
 8005b54:	0a1a      	lsrs	r2, r3, #8
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d107      	bne.n	8005b7a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	f043 0220 	orr.w	r2, r3, #32
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e008      	b.n	8005b8c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b88:	d0e9      	beq.n	8005b5e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	20000000 	.word	0x20000000
 8005b9c:	14f8b589 	.word	0x14f8b589

08005ba0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bac:	e049      	b.n	8005c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b10      	cmp	r3, #16
 8005bba:	d119      	bne.n	8005bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0210 	mvn.w	r2, #16
 8005bc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e030      	b.n	8005c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf0:	f7fc fcda 	bl	80025a8 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d302      	bcc.n	8005c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d11d      	bne.n	8005c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c10:	2b40      	cmp	r3, #64	@ 0x40
 8005c12:	d016      	beq.n	8005c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2e:	f043 0220 	orr.w	r2, r3, #32
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e007      	b.n	8005c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c4c:	2b40      	cmp	r3, #64	@ 0x40
 8005c4e:	d1ae      	bne.n	8005bae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c70:	d11b      	bne.n	8005caa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c96:	f043 0204 	orr.w	r2, r3, #4
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005cc8:	d103      	bne.n	8005cd2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005cd0:	e007      	b.n	8005ce2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005cda:	d102      	bne.n	8005ce2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2208      	movs	r2, #8
 8005ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e267      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d075      	beq.n	8005dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d0e:	4b88      	ldr	r3, [pc, #544]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 030c 	and.w	r3, r3, #12
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d00c      	beq.n	8005d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d1a:	4b85      	ldr	r3, [pc, #532]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d112      	bne.n	8005d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d26:	4b82      	ldr	r3, [pc, #520]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d32:	d10b      	bne.n	8005d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d34:	4b7e      	ldr	r3, [pc, #504]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d05b      	beq.n	8005df8 <HAL_RCC_OscConfig+0x108>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d157      	bne.n	8005df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e242      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d54:	d106      	bne.n	8005d64 <HAL_RCC_OscConfig+0x74>
 8005d56:	4b76      	ldr	r3, [pc, #472]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a75      	ldr	r2, [pc, #468]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	e01d      	b.n	8005da0 <HAL_RCC_OscConfig+0xb0>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d6c:	d10c      	bne.n	8005d88 <HAL_RCC_OscConfig+0x98>
 8005d6e:	4b70      	ldr	r3, [pc, #448]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a6f      	ldr	r2, [pc, #444]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	4b6d      	ldr	r3, [pc, #436]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a6c      	ldr	r2, [pc, #432]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	e00b      	b.n	8005da0 <HAL_RCC_OscConfig+0xb0>
 8005d88:	4b69      	ldr	r3, [pc, #420]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a68      	ldr	r2, [pc, #416]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	4b66      	ldr	r3, [pc, #408]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a65      	ldr	r2, [pc, #404]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d013      	beq.n	8005dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da8:	f7fc fbfe 	bl	80025a8 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005db0:	f7fc fbfa 	bl	80025a8 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b64      	cmp	r3, #100	@ 0x64
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e207      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0f0      	beq.n	8005db0 <HAL_RCC_OscConfig+0xc0>
 8005dce:	e014      	b.n	8005dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd0:	f7fc fbea 	bl	80025a8 <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dd8:	f7fc fbe6 	bl	80025a8 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b64      	cmp	r3, #100	@ 0x64
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e1f3      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dea:	4b51      	ldr	r3, [pc, #324]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1f0      	bne.n	8005dd8 <HAL_RCC_OscConfig+0xe8>
 8005df6:	e000      	b.n	8005dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d063      	beq.n	8005ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e06:	4b4a      	ldr	r3, [pc, #296]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e12:	4b47      	ldr	r3, [pc, #284]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d11c      	bne.n	8005e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e1e:	4b44      	ldr	r3, [pc, #272]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d116      	bne.n	8005e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e2a:	4b41      	ldr	r3, [pc, #260]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_RCC_OscConfig+0x152>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d001      	beq.n	8005e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e1c7      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e42:	4b3b      	ldr	r3, [pc, #236]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	4937      	ldr	r1, [pc, #220]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e56:	e03a      	b.n	8005ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d020      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e60:	4b34      	ldr	r3, [pc, #208]	@ (8005f34 <HAL_RCC_OscConfig+0x244>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e66:	f7fc fb9f 	bl	80025a8 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e6e:	f7fc fb9b 	bl	80025a8 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e1a8      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e80:	4b2b      	ldr	r3, [pc, #172]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f0      	beq.n	8005e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8c:	4b28      	ldr	r3, [pc, #160]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4925      	ldr	r1, [pc, #148]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	600b      	str	r3, [r1, #0]
 8005ea0:	e015      	b.n	8005ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ea2:	4b24      	ldr	r3, [pc, #144]	@ (8005f34 <HAL_RCC_OscConfig+0x244>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea8:	f7fc fb7e 	bl	80025a8 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eb0:	f7fc fb7a 	bl	80025a8 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e187      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f0      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d036      	beq.n	8005f48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d016      	beq.n	8005f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ee2:	4b15      	ldr	r3, [pc, #84]	@ (8005f38 <HAL_RCC_OscConfig+0x248>)
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee8:	f7fc fb5e 	bl	80025a8 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ef0:	f7fc fb5a 	bl	80025a8 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e167      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f02:	4b0b      	ldr	r3, [pc, #44]	@ (8005f30 <HAL_RCC_OscConfig+0x240>)
 8005f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x200>
 8005f0e:	e01b      	b.n	8005f48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f10:	4b09      	ldr	r3, [pc, #36]	@ (8005f38 <HAL_RCC_OscConfig+0x248>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f16:	f7fc fb47 	bl	80025a8 <HAL_GetTick>
 8005f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f1c:	e00e      	b.n	8005f3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f1e:	f7fc fb43 	bl	80025a8 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d907      	bls.n	8005f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e150      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
 8005f30:	40023800 	.word	0x40023800
 8005f34:	42470000 	.word	0x42470000
 8005f38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f3c:	4b88      	ldr	r3, [pc, #544]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1ea      	bne.n	8005f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 8097 	beq.w	8006084 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f56:	2300      	movs	r3, #0
 8005f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f5a:	4b81      	ldr	r3, [pc, #516]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10f      	bne.n	8005f86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	4b7d      	ldr	r3, [pc, #500]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6e:	4a7c      	ldr	r2, [pc, #496]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f76:	4b7a      	ldr	r3, [pc, #488]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f7e:	60bb      	str	r3, [r7, #8]
 8005f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f82:	2301      	movs	r3, #1
 8005f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f86:	4b77      	ldr	r3, [pc, #476]	@ (8006164 <HAL_RCC_OscConfig+0x474>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d118      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f92:	4b74      	ldr	r3, [pc, #464]	@ (8006164 <HAL_RCC_OscConfig+0x474>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a73      	ldr	r2, [pc, #460]	@ (8006164 <HAL_RCC_OscConfig+0x474>)
 8005f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f9e:	f7fc fb03 	bl	80025a8 <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa6:	f7fc faff 	bl	80025a8 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e10c      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb8:	4b6a      	ldr	r3, [pc, #424]	@ (8006164 <HAL_RCC_OscConfig+0x474>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0f0      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d106      	bne.n	8005fda <HAL_RCC_OscConfig+0x2ea>
 8005fcc:	4b64      	ldr	r3, [pc, #400]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd0:	4a63      	ldr	r2, [pc, #396]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005fd2:	f043 0301 	orr.w	r3, r3, #1
 8005fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fd8:	e01c      	b.n	8006014 <HAL_RCC_OscConfig+0x324>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b05      	cmp	r3, #5
 8005fe0:	d10c      	bne.n	8005ffc <HAL_RCC_OscConfig+0x30c>
 8005fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe6:	4a5e      	ldr	r2, [pc, #376]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005fe8:	f043 0304 	orr.w	r3, r3, #4
 8005fec:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fee:	4b5c      	ldr	r3, [pc, #368]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff2:	4a5b      	ldr	r2, [pc, #364]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005ff4:	f043 0301 	orr.w	r3, r3, #1
 8005ff8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ffa:	e00b      	b.n	8006014 <HAL_RCC_OscConfig+0x324>
 8005ffc:	4b58      	ldr	r3, [pc, #352]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8005ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006000:	4a57      	ldr	r2, [pc, #348]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8006002:	f023 0301 	bic.w	r3, r3, #1
 8006006:	6713      	str	r3, [r2, #112]	@ 0x70
 8006008:	4b55      	ldr	r3, [pc, #340]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 800600a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800600c:	4a54      	ldr	r2, [pc, #336]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 800600e:	f023 0304 	bic.w	r3, r3, #4
 8006012:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d015      	beq.n	8006048 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800601c:	f7fc fac4 	bl	80025a8 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006022:	e00a      	b.n	800603a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006024:	f7fc fac0 	bl	80025a8 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006032:	4293      	cmp	r3, r2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e0cb      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800603a:	4b49      	ldr	r3, [pc, #292]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 800603c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0ee      	beq.n	8006024 <HAL_RCC_OscConfig+0x334>
 8006046:	e014      	b.n	8006072 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006048:	f7fc faae 	bl	80025a8 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800604e:	e00a      	b.n	8006066 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006050:	f7fc faaa 	bl	80025a8 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e0b5      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006066:	4b3e      	ldr	r3, [pc, #248]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8006068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1ee      	bne.n	8006050 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d105      	bne.n	8006084 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006078:	4b39      	ldr	r3, [pc, #228]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 800607a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607c:	4a38      	ldr	r2, [pc, #224]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 800607e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006082:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 80a1 	beq.w	80061d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800608e:	4b34      	ldr	r3, [pc, #208]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 030c 	and.w	r3, r3, #12
 8006096:	2b08      	cmp	r3, #8
 8006098:	d05c      	beq.n	8006154 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d141      	bne.n	8006126 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060a2:	4b31      	ldr	r3, [pc, #196]	@ (8006168 <HAL_RCC_OscConfig+0x478>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a8:	f7fc fa7e 	bl	80025a8 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060b0:	f7fc fa7a 	bl	80025a8 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e087      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c2:	4b27      	ldr	r3, [pc, #156]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f0      	bne.n	80060b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69da      	ldr	r2, [r3, #28]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	431a      	orrs	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060dc:	019b      	lsls	r3, r3, #6
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e4:	085b      	lsrs	r3, r3, #1
 80060e6:	3b01      	subs	r3, #1
 80060e8:	041b      	lsls	r3, r3, #16
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f0:	061b      	lsls	r3, r3, #24
 80060f2:	491b      	ldr	r1, [pc, #108]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006168 <HAL_RCC_OscConfig+0x478>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fe:	f7fc fa53 	bl	80025a8 <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006104:	e008      	b.n	8006118 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006106:	f7fc fa4f 	bl	80025a8 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e05c      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006118:	4b11      	ldr	r3, [pc, #68]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d0f0      	beq.n	8006106 <HAL_RCC_OscConfig+0x416>
 8006124:	e054      	b.n	80061d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006126:	4b10      	ldr	r3, [pc, #64]	@ (8006168 <HAL_RCC_OscConfig+0x478>)
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800612c:	f7fc fa3c 	bl	80025a8 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006134:	f7fc fa38 	bl	80025a8 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e045      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006146:	4b06      	ldr	r3, [pc, #24]	@ (8006160 <HAL_RCC_OscConfig+0x470>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0x444>
 8006152:	e03d      	b.n	80061d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d107      	bne.n	800616c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e038      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
 8006160:	40023800 	.word	0x40023800
 8006164:	40007000 	.word	0x40007000
 8006168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800616c:	4b1b      	ldr	r3, [pc, #108]	@ (80061dc <HAL_RCC_OscConfig+0x4ec>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d028      	beq.n	80061cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006184:	429a      	cmp	r2, r3
 8006186:	d121      	bne.n	80061cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006192:	429a      	cmp	r2, r3
 8006194:	d11a      	bne.n	80061cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800619c:	4013      	ands	r3, r2
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d111      	bne.n	80061cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b2:	085b      	lsrs	r3, r3, #1
 80061b4:	3b01      	subs	r3, #1
 80061b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d107      	bne.n	80061cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d001      	beq.n	80061d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	40023800 	.word	0x40023800

080061e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e0cc      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061f4:	4b68      	ldr	r3, [pc, #416]	@ (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d90c      	bls.n	800621c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006202:	4b65      	ldr	r3, [pc, #404]	@ (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800620a:	4b63      	ldr	r3, [pc, #396]	@ (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d001      	beq.n	800621c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e0b8      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d020      	beq.n	800626a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006234:	4b59      	ldr	r3, [pc, #356]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4a58      	ldr	r2, [pc, #352]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 800623a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800623e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800624c:	4b53      	ldr	r3, [pc, #332]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	4a52      	ldr	r2, [pc, #328]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006258:	4b50      	ldr	r3, [pc, #320]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	494d      	ldr	r1, [pc, #308]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	4313      	orrs	r3, r2
 8006268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d044      	beq.n	8006300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d107      	bne.n	800628e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627e:	4b47      	ldr	r3, [pc, #284]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d119      	bne.n	80062be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e07f      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d003      	beq.n	800629e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800629a:	2b03      	cmp	r3, #3
 800629c:	d107      	bne.n	80062ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800629e:	4b3f      	ldr	r3, [pc, #252]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e06f      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ae:	4b3b      	ldr	r3, [pc, #236]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e067      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062be:	4b37      	ldr	r3, [pc, #220]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f023 0203 	bic.w	r2, r3, #3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	4934      	ldr	r1, [pc, #208]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062d0:	f7fc f96a 	bl	80025a8 <HAL_GetTick>
 80062d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062d6:	e00a      	b.n	80062ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062d8:	f7fc f966 	bl	80025a8 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e04f      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ee:	4b2b      	ldr	r3, [pc, #172]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 020c 	and.w	r2, r3, #12
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d1eb      	bne.n	80062d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006300:	4b25      	ldr	r3, [pc, #148]	@ (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d20c      	bcs.n	8006328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800630e:	4b22      	ldr	r3, [pc, #136]	@ (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006316:	4b20      	ldr	r3, [pc, #128]	@ (8006398 <HAL_RCC_ClockConfig+0x1b8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d001      	beq.n	8006328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e032      	b.n	800638e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006334:	4b19      	ldr	r3, [pc, #100]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	4916      	ldr	r1, [pc, #88]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006342:	4313      	orrs	r3, r2
 8006344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d009      	beq.n	8006366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006352:	4b12      	ldr	r3, [pc, #72]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	490e      	ldr	r1, [pc, #56]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 8006362:	4313      	orrs	r3, r2
 8006364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006366:	f000 f821 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 800636a:	4602      	mov	r2, r0
 800636c:	4b0b      	ldr	r3, [pc, #44]	@ (800639c <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	091b      	lsrs	r3, r3, #4
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	490a      	ldr	r1, [pc, #40]	@ (80063a0 <HAL_RCC_ClockConfig+0x1c0>)
 8006378:	5ccb      	ldrb	r3, [r1, r3]
 800637a:	fa22 f303 	lsr.w	r3, r2, r3
 800637e:	4a09      	ldr	r2, [pc, #36]	@ (80063a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006382:	4b09      	ldr	r3, [pc, #36]	@ (80063a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4618      	mov	r0, r3
 8006388:	f7fb feda 	bl	8002140 <HAL_InitTick>

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	40023c00 	.word	0x40023c00
 800639c:	40023800 	.word	0x40023800
 80063a0:	0800e708 	.word	0x0800e708
 80063a4:	20000000 	.word	0x20000000
 80063a8:	20000004 	.word	0x20000004

080063ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063b0:	b094      	sub	sp, #80	@ 0x50
 80063b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80063b8:	2300      	movs	r3, #0
 80063ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063bc:	2300      	movs	r3, #0
 80063be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063c4:	4b79      	ldr	r3, [pc, #484]	@ (80065ac <HAL_RCC_GetSysClockFreq+0x200>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 030c 	and.w	r3, r3, #12
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d00d      	beq.n	80063ec <HAL_RCC_GetSysClockFreq+0x40>
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	f200 80e1 	bhi.w	8006598 <HAL_RCC_GetSysClockFreq+0x1ec>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_RCC_GetSysClockFreq+0x34>
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d003      	beq.n	80063e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80063de:	e0db      	b.n	8006598 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063e0:	4b73      	ldr	r3, [pc, #460]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80063e2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80063e4:	e0db      	b.n	800659e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063e6:	4b73      	ldr	r3, [pc, #460]	@ (80065b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80063e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063ea:	e0d8      	b.n	800659e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063ec:	4b6f      	ldr	r3, [pc, #444]	@ (80065ac <HAL_RCC_GetSysClockFreq+0x200>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063f6:	4b6d      	ldr	r3, [pc, #436]	@ (80065ac <HAL_RCC_GetSysClockFreq+0x200>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d063      	beq.n	80064ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006402:	4b6a      	ldr	r3, [pc, #424]	@ (80065ac <HAL_RCC_GetSysClockFreq+0x200>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	099b      	lsrs	r3, r3, #6
 8006408:	2200      	movs	r2, #0
 800640a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800640c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800640e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006414:	633b      	str	r3, [r7, #48]	@ 0x30
 8006416:	2300      	movs	r3, #0
 8006418:	637b      	str	r3, [r7, #52]	@ 0x34
 800641a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800641e:	4622      	mov	r2, r4
 8006420:	462b      	mov	r3, r5
 8006422:	f04f 0000 	mov.w	r0, #0
 8006426:	f04f 0100 	mov.w	r1, #0
 800642a:	0159      	lsls	r1, r3, #5
 800642c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006430:	0150      	lsls	r0, r2, #5
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	4621      	mov	r1, r4
 8006438:	1a51      	subs	r1, r2, r1
 800643a:	6139      	str	r1, [r7, #16]
 800643c:	4629      	mov	r1, r5
 800643e:	eb63 0301 	sbc.w	r3, r3, r1
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006450:	4659      	mov	r1, fp
 8006452:	018b      	lsls	r3, r1, #6
 8006454:	4651      	mov	r1, sl
 8006456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800645a:	4651      	mov	r1, sl
 800645c:	018a      	lsls	r2, r1, #6
 800645e:	4651      	mov	r1, sl
 8006460:	ebb2 0801 	subs.w	r8, r2, r1
 8006464:	4659      	mov	r1, fp
 8006466:	eb63 0901 	sbc.w	r9, r3, r1
 800646a:	f04f 0200 	mov.w	r2, #0
 800646e:	f04f 0300 	mov.w	r3, #0
 8006472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800647a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800647e:	4690      	mov	r8, r2
 8006480:	4699      	mov	r9, r3
 8006482:	4623      	mov	r3, r4
 8006484:	eb18 0303 	adds.w	r3, r8, r3
 8006488:	60bb      	str	r3, [r7, #8]
 800648a:	462b      	mov	r3, r5
 800648c:	eb49 0303 	adc.w	r3, r9, r3
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	f04f 0200 	mov.w	r2, #0
 8006496:	f04f 0300 	mov.w	r3, #0
 800649a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800649e:	4629      	mov	r1, r5
 80064a0:	024b      	lsls	r3, r1, #9
 80064a2:	4621      	mov	r1, r4
 80064a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064a8:	4621      	mov	r1, r4
 80064aa:	024a      	lsls	r2, r1, #9
 80064ac:	4610      	mov	r0, r2
 80064ae:	4619      	mov	r1, r3
 80064b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064b2:	2200      	movs	r2, #0
 80064b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064bc:	f7fa fbec 	bl	8000c98 <__aeabi_uldivmod>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4613      	mov	r3, r2
 80064c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064c8:	e058      	b.n	800657c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ca:	4b38      	ldr	r3, [pc, #224]	@ (80065ac <HAL_RCC_GetSysClockFreq+0x200>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	099b      	lsrs	r3, r3, #6
 80064d0:	2200      	movs	r2, #0
 80064d2:	4618      	mov	r0, r3
 80064d4:	4611      	mov	r1, r2
 80064d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064da:	623b      	str	r3, [r7, #32]
 80064dc:	2300      	movs	r3, #0
 80064de:	627b      	str	r3, [r7, #36]	@ 0x24
 80064e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064e4:	4642      	mov	r2, r8
 80064e6:	464b      	mov	r3, r9
 80064e8:	f04f 0000 	mov.w	r0, #0
 80064ec:	f04f 0100 	mov.w	r1, #0
 80064f0:	0159      	lsls	r1, r3, #5
 80064f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064f6:	0150      	lsls	r0, r2, #5
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4641      	mov	r1, r8
 80064fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8006502:	4649      	mov	r1, r9
 8006504:	eb63 0b01 	sbc.w	fp, r3, r1
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006514:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006518:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800651c:	ebb2 040a 	subs.w	r4, r2, sl
 8006520:	eb63 050b 	sbc.w	r5, r3, fp
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	00eb      	lsls	r3, r5, #3
 800652e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006532:	00e2      	lsls	r2, r4, #3
 8006534:	4614      	mov	r4, r2
 8006536:	461d      	mov	r5, r3
 8006538:	4643      	mov	r3, r8
 800653a:	18e3      	adds	r3, r4, r3
 800653c:	603b      	str	r3, [r7, #0]
 800653e:	464b      	mov	r3, r9
 8006540:	eb45 0303 	adc.w	r3, r5, r3
 8006544:	607b      	str	r3, [r7, #4]
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006552:	4629      	mov	r1, r5
 8006554:	028b      	lsls	r3, r1, #10
 8006556:	4621      	mov	r1, r4
 8006558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800655c:	4621      	mov	r1, r4
 800655e:	028a      	lsls	r2, r1, #10
 8006560:	4610      	mov	r0, r2
 8006562:	4619      	mov	r1, r3
 8006564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006566:	2200      	movs	r2, #0
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	61fa      	str	r2, [r7, #28]
 800656c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006570:	f7fa fb92 	bl	8000c98 <__aeabi_uldivmod>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4613      	mov	r3, r2
 800657a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800657c:	4b0b      	ldr	r3, [pc, #44]	@ (80065ac <HAL_RCC_GetSysClockFreq+0x200>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	0c1b      	lsrs	r3, r3, #16
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	3301      	adds	r3, #1
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800658c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800658e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006590:	fbb2 f3f3 	udiv	r3, r2, r3
 8006594:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006596:	e002      	b.n	800659e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006598:	4b05      	ldr	r3, [pc, #20]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800659a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800659c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800659e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3750      	adds	r7, #80	@ 0x50
 80065a4:	46bd      	mov	sp, r7
 80065a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065aa:	bf00      	nop
 80065ac:	40023800 	.word	0x40023800
 80065b0:	00f42400 	.word	0x00f42400
 80065b4:	007a1200 	.word	0x007a1200

080065b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065b8:	b480      	push	{r7}
 80065ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065bc:	4b03      	ldr	r3, [pc, #12]	@ (80065cc <HAL_RCC_GetHCLKFreq+0x14>)
 80065be:	681b      	ldr	r3, [r3, #0]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	20000000 	.word	0x20000000

080065d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065d4:	f7ff fff0 	bl	80065b8 <HAL_RCC_GetHCLKFreq>
 80065d8:	4602      	mov	r2, r0
 80065da:	4b05      	ldr	r3, [pc, #20]	@ (80065f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	0a9b      	lsrs	r3, r3, #10
 80065e0:	f003 0307 	and.w	r3, r3, #7
 80065e4:	4903      	ldr	r1, [pc, #12]	@ (80065f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065e6:	5ccb      	ldrb	r3, [r1, r3]
 80065e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	40023800 	.word	0x40023800
 80065f4:	0800e718 	.word	0x0800e718

080065f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065fc:	f7ff ffdc 	bl	80065b8 <HAL_RCC_GetHCLKFreq>
 8006600:	4602      	mov	r2, r0
 8006602:	4b05      	ldr	r3, [pc, #20]	@ (8006618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	0b5b      	lsrs	r3, r3, #13
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	4903      	ldr	r1, [pc, #12]	@ (800661c <HAL_RCC_GetPCLK2Freq+0x24>)
 800660e:	5ccb      	ldrb	r3, [r1, r3]
 8006610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006614:	4618      	mov	r0, r3
 8006616:	bd80      	pop	{r7, pc}
 8006618:	40023800 	.word	0x40023800
 800661c:	0800e718 	.word	0x0800e718

08006620 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	220f      	movs	r2, #15
 800662e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006630:	4b12      	ldr	r3, [pc, #72]	@ (800667c <HAL_RCC_GetClockConfig+0x5c>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 0203 	and.w	r2, r3, #3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800663c:	4b0f      	ldr	r3, [pc, #60]	@ (800667c <HAL_RCC_GetClockConfig+0x5c>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006648:	4b0c      	ldr	r3, [pc, #48]	@ (800667c <HAL_RCC_GetClockConfig+0x5c>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006654:	4b09      	ldr	r3, [pc, #36]	@ (800667c <HAL_RCC_GetClockConfig+0x5c>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	08db      	lsrs	r3, r3, #3
 800665a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006662:	4b07      	ldr	r3, [pc, #28]	@ (8006680 <HAL_RCC_GetClockConfig+0x60>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0207 	and.w	r2, r3, #7
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	601a      	str	r2, [r3, #0]
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40023800 	.word	0x40023800
 8006680:	40023c00 	.word	0x40023c00

08006684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e041      	b.n	800671a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fb fc32 	bl	8001f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3304      	adds	r3, #4
 80066c0:	4619      	mov	r1, r3
 80066c2:	4610      	mov	r0, r2
 80066c4:	f000 fc3c 	bl	8006f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b01      	cmp	r3, #1
 8006736:	d001      	beq.n	800673c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e044      	b.n	80067c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0201 	orr.w	r2, r2, #1
 8006752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a1e      	ldr	r2, [pc, #120]	@ (80067d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d018      	beq.n	8006790 <HAL_TIM_Base_Start_IT+0x6c>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006766:	d013      	beq.n	8006790 <HAL_TIM_Base_Start_IT+0x6c>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a1a      	ldr	r2, [pc, #104]	@ (80067d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00e      	beq.n	8006790 <HAL_TIM_Base_Start_IT+0x6c>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a19      	ldr	r2, [pc, #100]	@ (80067dc <HAL_TIM_Base_Start_IT+0xb8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d009      	beq.n	8006790 <HAL_TIM_Base_Start_IT+0x6c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a17      	ldr	r2, [pc, #92]	@ (80067e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d004      	beq.n	8006790 <HAL_TIM_Base_Start_IT+0x6c>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a16      	ldr	r2, [pc, #88]	@ (80067e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d111      	bne.n	80067b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b06      	cmp	r3, #6
 80067a0:	d010      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067b2:	e007      	b.n	80067c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	40010000 	.word	0x40010000
 80067d8:	40000400 	.word	0x40000400
 80067dc:	40000800 	.word	0x40000800
 80067e0:	40000c00 	.word	0x40000c00
 80067e4:	40014000 	.word	0x40014000

080067e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e041      	b.n	800687e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d106      	bne.n	8006814 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f839 	bl	8006886 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3304      	adds	r3, #4
 8006824:	4619      	mov	r1, r3
 8006826:	4610      	mov	r0, r2
 8006828:	f000 fb8a 	bl	8006f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800688e:	bf00      	nop
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
	...

0800689c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d109      	bne.n	80068c0 <HAL_TIM_PWM_Start+0x24>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	bf14      	ite	ne
 80068b8:	2301      	movne	r3, #1
 80068ba:	2300      	moveq	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	e022      	b.n	8006906 <HAL_TIM_PWM_Start+0x6a>
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d109      	bne.n	80068da <HAL_TIM_PWM_Start+0x3e>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	bf14      	ite	ne
 80068d2:	2301      	movne	r3, #1
 80068d4:	2300      	moveq	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	e015      	b.n	8006906 <HAL_TIM_PWM_Start+0x6a>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d109      	bne.n	80068f4 <HAL_TIM_PWM_Start+0x58>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	bf14      	ite	ne
 80068ec:	2301      	movne	r3, #1
 80068ee:	2300      	moveq	r3, #0
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	e008      	b.n	8006906 <HAL_TIM_PWM_Start+0x6a>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	bf14      	ite	ne
 8006900:	2301      	movne	r3, #1
 8006902:	2300      	moveq	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e068      	b.n	80069e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d104      	bne.n	800691e <HAL_TIM_PWM_Start+0x82>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800691c:	e013      	b.n	8006946 <HAL_TIM_PWM_Start+0xaa>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b04      	cmp	r3, #4
 8006922:	d104      	bne.n	800692e <HAL_TIM_PWM_Start+0x92>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800692c:	e00b      	b.n	8006946 <HAL_TIM_PWM_Start+0xaa>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b08      	cmp	r3, #8
 8006932:	d104      	bne.n	800693e <HAL_TIM_PWM_Start+0xa2>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800693c:	e003      	b.n	8006946 <HAL_TIM_PWM_Start+0xaa>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2202      	movs	r2, #2
 8006942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2201      	movs	r2, #1
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fda8 	bl	80074a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a23      	ldr	r2, [pc, #140]	@ (80069e8 <HAL_TIM_PWM_Start+0x14c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d107      	bne.n	800696e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800696c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a1d      	ldr	r2, [pc, #116]	@ (80069e8 <HAL_TIM_PWM_Start+0x14c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d018      	beq.n	80069aa <HAL_TIM_PWM_Start+0x10e>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006980:	d013      	beq.n	80069aa <HAL_TIM_PWM_Start+0x10e>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a19      	ldr	r2, [pc, #100]	@ (80069ec <HAL_TIM_PWM_Start+0x150>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00e      	beq.n	80069aa <HAL_TIM_PWM_Start+0x10e>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a17      	ldr	r2, [pc, #92]	@ (80069f0 <HAL_TIM_PWM_Start+0x154>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d009      	beq.n	80069aa <HAL_TIM_PWM_Start+0x10e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a16      	ldr	r2, [pc, #88]	@ (80069f4 <HAL_TIM_PWM_Start+0x158>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d004      	beq.n	80069aa <HAL_TIM_PWM_Start+0x10e>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a14      	ldr	r2, [pc, #80]	@ (80069f8 <HAL_TIM_PWM_Start+0x15c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d111      	bne.n	80069ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2b06      	cmp	r3, #6
 80069ba:	d010      	beq.n	80069de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0201 	orr.w	r2, r2, #1
 80069ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069cc:	e007      	b.n	80069de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f042 0201 	orr.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	40010000 	.word	0x40010000
 80069ec:	40000400 	.word	0x40000400
 80069f0:	40000800 	.word	0x40000800
 80069f4:	40000c00 	.word	0x40000c00
 80069f8:	40014000 	.word	0x40014000

080069fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d020      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d01b      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0202 	mvn.w	r2, #2
 8006a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fa5b 	bl	8006f02 <HAL_TIM_IC_CaptureCallback>
 8006a4c:	e005      	b.n	8006a5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fa4d 	bl	8006eee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fa5e 	bl	8006f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d020      	beq.n	8006aac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01b      	beq.n	8006aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f06f 0204 	mvn.w	r2, #4
 8006a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2202      	movs	r2, #2
 8006a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa35 	bl	8006f02 <HAL_TIM_IC_CaptureCallback>
 8006a98:	e005      	b.n	8006aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fa27 	bl	8006eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fa38 	bl	8006f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d020      	beq.n	8006af8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01b      	beq.n	8006af8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0208 	mvn.w	r2, #8
 8006ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2204      	movs	r2, #4
 8006ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fa0f 	bl	8006f02 <HAL_TIM_IC_CaptureCallback>
 8006ae4:	e005      	b.n	8006af2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fa01 	bl	8006eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fa12 	bl	8006f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f003 0310 	and.w	r3, r3, #16
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d020      	beq.n	8006b44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01b      	beq.n	8006b44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 0210 	mvn.w	r2, #16
 8006b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2208      	movs	r2, #8
 8006b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f9e9 	bl	8006f02 <HAL_TIM_IC_CaptureCallback>
 8006b30:	e005      	b.n	8006b3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f9db 	bl	8006eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f9ec 	bl	8006f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00c      	beq.n	8006b68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d007      	beq.n	8006b68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0201 	mvn.w	r2, #1
 8006b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fb f80a 	bl	8001b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00c      	beq.n	8006b8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d007      	beq.n	8006b8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fd2a 	bl	80075e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00c      	beq.n	8006bb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d007      	beq.n	8006bb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f9bd 	bl	8006f2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00c      	beq.n	8006bd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f003 0320 	and.w	r3, r3, #32
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d007      	beq.n	8006bd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f06f 0220 	mvn.w	r2, #32
 8006bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fcfc 	bl	80075cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bd4:	bf00      	nop
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d101      	bne.n	8006bfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	e0ae      	b.n	8006d58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b0c      	cmp	r3, #12
 8006c06:	f200 809f 	bhi.w	8006d48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c45 	.word	0x08006c45
 8006c14:	08006d49 	.word	0x08006d49
 8006c18:	08006d49 	.word	0x08006d49
 8006c1c:	08006d49 	.word	0x08006d49
 8006c20:	08006c85 	.word	0x08006c85
 8006c24:	08006d49 	.word	0x08006d49
 8006c28:	08006d49 	.word	0x08006d49
 8006c2c:	08006d49 	.word	0x08006d49
 8006c30:	08006cc7 	.word	0x08006cc7
 8006c34:	08006d49 	.word	0x08006d49
 8006c38:	08006d49 	.word	0x08006d49
 8006c3c:	08006d49 	.word	0x08006d49
 8006c40:	08006d07 	.word	0x08006d07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68b9      	ldr	r1, [r7, #8]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fa04 	bl	8007058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0208 	orr.w	r2, r2, #8
 8006c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0204 	bic.w	r2, r2, #4
 8006c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6999      	ldr	r1, [r3, #24]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	691a      	ldr	r2, [r3, #16]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	619a      	str	r2, [r3, #24]
      break;
 8006c82:	e064      	b.n	8006d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fa4a 	bl	8007124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	699a      	ldr	r2, [r3, #24]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6999      	ldr	r1, [r3, #24]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	021a      	lsls	r2, r3, #8
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	619a      	str	r2, [r3, #24]
      break;
 8006cc4:	e043      	b.n	8006d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fa95 	bl	80071fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0208 	orr.w	r2, r2, #8
 8006ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69da      	ldr	r2, [r3, #28]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0204 	bic.w	r2, r2, #4
 8006cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69d9      	ldr	r1, [r3, #28]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	691a      	ldr	r2, [r3, #16]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	61da      	str	r2, [r3, #28]
      break;
 8006d04:	e023      	b.n	8006d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68b9      	ldr	r1, [r7, #8]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 fadf 	bl	80072d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69da      	ldr	r2, [r3, #28]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69da      	ldr	r2, [r3, #28]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69d9      	ldr	r1, [r3, #28]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	021a      	lsls	r2, r3, #8
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	61da      	str	r2, [r3, #28]
      break;
 8006d46:	e002      	b.n	8006d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_TIM_ConfigClockSource+0x1c>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e0b4      	b.n	8006ee6 <HAL_TIM_ConfigClockSource+0x186>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006da2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006db4:	d03e      	beq.n	8006e34 <HAL_TIM_ConfigClockSource+0xd4>
 8006db6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dba:	f200 8087 	bhi.w	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc2:	f000 8086 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x172>
 8006dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dca:	d87f      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006dcc:	2b70      	cmp	r3, #112	@ 0x70
 8006dce:	d01a      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0xa6>
 8006dd0:	2b70      	cmp	r3, #112	@ 0x70
 8006dd2:	d87b      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006dd4:	2b60      	cmp	r3, #96	@ 0x60
 8006dd6:	d050      	beq.n	8006e7a <HAL_TIM_ConfigClockSource+0x11a>
 8006dd8:	2b60      	cmp	r3, #96	@ 0x60
 8006dda:	d877      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006ddc:	2b50      	cmp	r3, #80	@ 0x50
 8006dde:	d03c      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0xfa>
 8006de0:	2b50      	cmp	r3, #80	@ 0x50
 8006de2:	d873      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006de4:	2b40      	cmp	r3, #64	@ 0x40
 8006de6:	d058      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x13a>
 8006de8:	2b40      	cmp	r3, #64	@ 0x40
 8006dea:	d86f      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006dec:	2b30      	cmp	r3, #48	@ 0x30
 8006dee:	d064      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0x15a>
 8006df0:	2b30      	cmp	r3, #48	@ 0x30
 8006df2:	d86b      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006df4:	2b20      	cmp	r3, #32
 8006df6:	d060      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0x15a>
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	d867      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d05c      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0x15a>
 8006e00:	2b10      	cmp	r3, #16
 8006e02:	d05a      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0x15a>
 8006e04:	e062      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e16:	f000 fb25 	bl	8007464 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	609a      	str	r2, [r3, #8]
      break;
 8006e32:	e04f      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e44:	f000 fb0e 	bl	8007464 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689a      	ldr	r2, [r3, #8]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e56:	609a      	str	r2, [r3, #8]
      break;
 8006e58:	e03c      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e66:	461a      	mov	r2, r3
 8006e68:	f000 fa82 	bl	8007370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2150      	movs	r1, #80	@ 0x50
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fadb 	bl	800742e <TIM_ITRx_SetConfig>
      break;
 8006e78:	e02c      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e86:	461a      	mov	r2, r3
 8006e88:	f000 faa1 	bl	80073ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2160      	movs	r1, #96	@ 0x60
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 facb 	bl	800742e <TIM_ITRx_SetConfig>
      break;
 8006e98:	e01c      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f000 fa62 	bl	8007370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2140      	movs	r1, #64	@ 0x40
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fabb 	bl	800742e <TIM_ITRx_SetConfig>
      break;
 8006eb8:	e00c      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f000 fab2 	bl	800742e <TIM_ITRx_SetConfig>
      break;
 8006eca:	e003      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed0:	e000      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ef6:	bf00      	nop
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b083      	sub	sp, #12
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f1e:	bf00      	nop
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
	...

08006f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a3a      	ldr	r2, [pc, #232]	@ (800703c <TIM_Base_SetConfig+0xfc>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00f      	beq.n	8006f78 <TIM_Base_SetConfig+0x38>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f5e:	d00b      	beq.n	8006f78 <TIM_Base_SetConfig+0x38>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a37      	ldr	r2, [pc, #220]	@ (8007040 <TIM_Base_SetConfig+0x100>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d007      	beq.n	8006f78 <TIM_Base_SetConfig+0x38>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a36      	ldr	r2, [pc, #216]	@ (8007044 <TIM_Base_SetConfig+0x104>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d003      	beq.n	8006f78 <TIM_Base_SetConfig+0x38>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a35      	ldr	r2, [pc, #212]	@ (8007048 <TIM_Base_SetConfig+0x108>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d108      	bne.n	8006f8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a2b      	ldr	r2, [pc, #172]	@ (800703c <TIM_Base_SetConfig+0xfc>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d01b      	beq.n	8006fca <TIM_Base_SetConfig+0x8a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f98:	d017      	beq.n	8006fca <TIM_Base_SetConfig+0x8a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a28      	ldr	r2, [pc, #160]	@ (8007040 <TIM_Base_SetConfig+0x100>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d013      	beq.n	8006fca <TIM_Base_SetConfig+0x8a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a27      	ldr	r2, [pc, #156]	@ (8007044 <TIM_Base_SetConfig+0x104>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00f      	beq.n	8006fca <TIM_Base_SetConfig+0x8a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a26      	ldr	r2, [pc, #152]	@ (8007048 <TIM_Base_SetConfig+0x108>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00b      	beq.n	8006fca <TIM_Base_SetConfig+0x8a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a25      	ldr	r2, [pc, #148]	@ (800704c <TIM_Base_SetConfig+0x10c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d007      	beq.n	8006fca <TIM_Base_SetConfig+0x8a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a24      	ldr	r2, [pc, #144]	@ (8007050 <TIM_Base_SetConfig+0x110>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d003      	beq.n	8006fca <TIM_Base_SetConfig+0x8a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a23      	ldr	r2, [pc, #140]	@ (8007054 <TIM_Base_SetConfig+0x114>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d108      	bne.n	8006fdc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a0e      	ldr	r2, [pc, #56]	@ (800703c <TIM_Base_SetConfig+0xfc>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d103      	bne.n	8007010 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b01      	cmp	r3, #1
 8007020:	d105      	bne.n	800702e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f023 0201 	bic.w	r2, r3, #1
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	611a      	str	r2, [r3, #16]
  }
}
 800702e:	bf00      	nop
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40010000 	.word	0x40010000
 8007040:	40000400 	.word	0x40000400
 8007044:	40000800 	.word	0x40000800
 8007048:	40000c00 	.word	0x40000c00
 800704c:	40014000 	.word	0x40014000
 8007050:	40014400 	.word	0x40014400
 8007054:	40014800 	.word	0x40014800

08007058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	f023 0201 	bic.w	r2, r3, #1
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0303 	bic.w	r3, r3, #3
 800708e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f023 0302 	bic.w	r3, r3, #2
 80070a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a1c      	ldr	r2, [pc, #112]	@ (8007120 <TIM_OC1_SetConfig+0xc8>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d10c      	bne.n	80070ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f023 0308 	bic.w	r3, r3, #8
 80070ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f023 0304 	bic.w	r3, r3, #4
 80070cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a13      	ldr	r2, [pc, #76]	@ (8007120 <TIM_OC1_SetConfig+0xc8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d111      	bne.n	80070fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80070e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	621a      	str	r2, [r3, #32]
}
 8007114:	bf00      	nop
 8007116:	371c      	adds	r7, #28
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	40010000 	.word	0x40010000

08007124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	f023 0210 	bic.w	r2, r3, #16
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800715a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	021b      	lsls	r3, r3, #8
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	4313      	orrs	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f023 0320 	bic.w	r3, r3, #32
 800716e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	011b      	lsls	r3, r3, #4
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	4313      	orrs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a1e      	ldr	r2, [pc, #120]	@ (80071f8 <TIM_OC2_SetConfig+0xd4>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d10d      	bne.n	80071a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800718a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	4313      	orrs	r3, r2
 8007196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800719e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a15      	ldr	r2, [pc, #84]	@ (80071f8 <TIM_OC2_SetConfig+0xd4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d113      	bne.n	80071d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	621a      	str	r2, [r3, #32]
}
 80071ea:	bf00      	nop
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	40010000 	.word	0x40010000

080071fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800722a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 0303 	bic.w	r3, r3, #3
 8007232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	021b      	lsls	r3, r3, #8
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	4313      	orrs	r3, r2
 8007250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a1d      	ldr	r2, [pc, #116]	@ (80072cc <TIM_OC3_SetConfig+0xd0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d10d      	bne.n	8007276 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	021b      	lsls	r3, r3, #8
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	4313      	orrs	r3, r2
 800726c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a14      	ldr	r2, [pc, #80]	@ (80072cc <TIM_OC3_SetConfig+0xd0>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d113      	bne.n	80072a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800728c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	621a      	str	r2, [r3, #32]
}
 80072c0:	bf00      	nop
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	40010000 	.word	0x40010000

080072d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800731a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	031b      	lsls	r3, r3, #12
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a10      	ldr	r2, [pc, #64]	@ (800736c <TIM_OC4_SetConfig+0x9c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d109      	bne.n	8007344 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007336:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	019b      	lsls	r3, r3, #6
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685a      	ldr	r2, [r3, #4]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	621a      	str	r2, [r3, #32]
}
 800735e:	bf00      	nop
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	40010000 	.word	0x40010000

08007370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	f023 0201 	bic.w	r2, r3, #1
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800739a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f023 030a 	bic.w	r3, r3, #10
 80073ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	621a      	str	r2, [r3, #32]
}
 80073c2:	bf00      	nop
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b087      	sub	sp, #28
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	f023 0210 	bic.w	r2, r3, #16
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	031b      	lsls	r3, r3, #12
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	4313      	orrs	r3, r2
 8007402:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800740a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	011b      	lsls	r3, r3, #4
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	4313      	orrs	r3, r2
 8007414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	621a      	str	r2, [r3, #32]
}
 8007422:	bf00      	nop
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800742e:	b480      	push	{r7}
 8007430:	b085      	sub	sp, #20
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007444:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4313      	orrs	r3, r2
 800744c:	f043 0307 	orr.w	r3, r3, #7
 8007450:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	609a      	str	r2, [r3, #8]
}
 8007458:	bf00      	nop
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800747e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	021a      	lsls	r2, r3, #8
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	431a      	orrs	r2, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4313      	orrs	r3, r2
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	4313      	orrs	r3, r2
 8007490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	609a      	str	r2, [r3, #8]
}
 8007498:	bf00      	nop
 800749a:	371c      	adds	r7, #28
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f003 031f 	and.w	r3, r3, #31
 80074b6:	2201      	movs	r2, #1
 80074b8:	fa02 f303 	lsl.w	r3, r2, r3
 80074bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6a1a      	ldr	r2, [r3, #32]
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	43db      	mvns	r3, r3
 80074c6:	401a      	ands	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6a1a      	ldr	r2, [r3, #32]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f003 031f 	and.w	r3, r3, #31
 80074d6:	6879      	ldr	r1, [r7, #4]
 80074d8:	fa01 f303 	lsl.w	r3, r1, r3
 80074dc:	431a      	orrs	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	621a      	str	r2, [r3, #32]
}
 80074e2:	bf00      	nop
 80074e4:	371c      	adds	r7, #28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
	...

080074f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007500:	2b01      	cmp	r3, #1
 8007502:	d101      	bne.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007504:	2302      	movs	r3, #2
 8007506:	e050      	b.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800752e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a1c      	ldr	r2, [pc, #112]	@ (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d018      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007554:	d013      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a18      	ldr	r2, [pc, #96]	@ (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d00e      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a16      	ldr	r2, [pc, #88]	@ (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d009      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a15      	ldr	r2, [pc, #84]	@ (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d004      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a13      	ldr	r2, [pc, #76]	@ (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d10c      	bne.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	4313      	orrs	r3, r2
 800758e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40010000 	.word	0x40010000
 80075bc:	40000400 	.word	0x40000400
 80075c0:	40000800 	.word	0x40000800
 80075c4:	40000c00 	.word	0x40000c00
 80075c8:	40014000 	.word	0x40014000

080075cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e042      	b.n	800768c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d106      	bne.n	8007620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7fa fcdc 	bl	8001fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2224      	movs	r2, #36	@ 0x24
 8007624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68da      	ldr	r2, [r3, #12]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fe6b 	bl	8008314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800764c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	695a      	ldr	r2, [r3, #20]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800765c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800766c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2220      	movs	r2, #32
 8007680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	4613      	mov	r3, r2
 80076a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b20      	cmp	r3, #32
 80076ac:	d112      	bne.n	80076d4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <HAL_UART_Receive_DMA+0x26>
 80076b4:	88fb      	ldrh	r3, [r7, #6]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e00b      	b.n	80076d6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80076c4:	88fb      	ldrh	r3, [r7, #6]
 80076c6:	461a      	mov	r2, r3
 80076c8:	68b9      	ldr	r1, [r7, #8]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 fbc2 	bl	8007e54 <UART_Start_Receive_DMA>
 80076d0:	4603      	mov	r3, r0
 80076d2:	e000      	b.n	80076d6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80076d4:	2302      	movs	r3, #2
  }
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b0ba      	sub	sp, #232	@ 0xe8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007706:	2300      	movs	r3, #0
 8007708:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800770c:	2300      	movs	r3, #0
 800770e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007716:	f003 030f 	and.w	r3, r3, #15
 800771a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800771e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10f      	bne.n	8007746 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800772a:	f003 0320 	and.w	r3, r3, #32
 800772e:	2b00      	cmp	r3, #0
 8007730:	d009      	beq.n	8007746 <HAL_UART_IRQHandler+0x66>
 8007732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fd29 	bl	8008196 <UART_Receive_IT>
      return;
 8007744:	e25b      	b.n	8007bfe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 80de 	beq.w	800790c <HAL_UART_IRQHandler+0x22c>
 8007750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	d106      	bne.n	800776a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800775c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007760:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 80d1 	beq.w	800790c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800776a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <HAL_UART_IRQHandler+0xae>
 8007776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800777a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800777e:	2b00      	cmp	r3, #0
 8007780:	d005      	beq.n	800778e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007786:	f043 0201 	orr.w	r2, r3, #1
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800778e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007792:	f003 0304 	and.w	r3, r3, #4
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00b      	beq.n	80077b2 <HAL_UART_IRQHandler+0xd2>
 800779a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d005      	beq.n	80077b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077aa:	f043 0202 	orr.w	r2, r3, #2
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00b      	beq.n	80077d6 <HAL_UART_IRQHandler+0xf6>
 80077be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d005      	beq.n	80077d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ce:	f043 0204 	orr.w	r2, r3, #4
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80077d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077da:	f003 0308 	and.w	r3, r3, #8
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d011      	beq.n	8007806 <HAL_UART_IRQHandler+0x126>
 80077e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077e6:	f003 0320 	and.w	r3, r3, #32
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d105      	bne.n	80077fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80077ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d005      	beq.n	8007806 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077fe:	f043 0208 	orr.w	r2, r3, #8
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 81f2 	beq.w	8007bf4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007814:	f003 0320 	and.w	r3, r3, #32
 8007818:	2b00      	cmp	r3, #0
 800781a:	d008      	beq.n	800782e <HAL_UART_IRQHandler+0x14e>
 800781c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007820:	f003 0320 	and.w	r3, r3, #32
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fcb4 	bl	8008196 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007838:	2b40      	cmp	r3, #64	@ 0x40
 800783a:	bf0c      	ite	eq
 800783c:	2301      	moveq	r3, #1
 800783e:	2300      	movne	r3, #0
 8007840:	b2db      	uxtb	r3, r3
 8007842:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800784a:	f003 0308 	and.w	r3, r3, #8
 800784e:	2b00      	cmp	r3, #0
 8007850:	d103      	bne.n	800785a <HAL_UART_IRQHandler+0x17a>
 8007852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007856:	2b00      	cmp	r3, #0
 8007858:	d04f      	beq.n	80078fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fbbc 	bl	8007fd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800786a:	2b40      	cmp	r3, #64	@ 0x40
 800786c:	d141      	bne.n	80078f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3314      	adds	r3, #20
 8007874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007884:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800788c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3314      	adds	r3, #20
 8007896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800789a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800789e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80078a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80078aa:	e841 2300 	strex	r3, r2, [r1]
 80078ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80078b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1d9      	bne.n	800786e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d013      	beq.n	80078ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c6:	4a7e      	ldr	r2, [pc, #504]	@ (8007ac0 <HAL_UART_IRQHandler+0x3e0>)
 80078c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fb f8f2 	bl	8002ab8 <HAL_DMA_Abort_IT>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d016      	beq.n	8007908 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80078e4:	4610      	mov	r0, r2
 80078e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e8:	e00e      	b.n	8007908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f99e 	bl	8007c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f0:	e00a      	b.n	8007908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f99a 	bl	8007c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f8:	e006      	b.n	8007908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f996 	bl	8007c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007906:	e175      	b.n	8007bf4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007908:	bf00      	nop
    return;
 800790a:	e173      	b.n	8007bf4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007910:	2b01      	cmp	r3, #1
 8007912:	f040 814f 	bne.w	8007bb4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800791a:	f003 0310 	and.w	r3, r3, #16
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 8148 	beq.w	8007bb4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007928:	f003 0310 	and.w	r3, r3, #16
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 8141 	beq.w	8007bb4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007932:	2300      	movs	r3, #0
 8007934:	60bb      	str	r3, [r7, #8]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60bb      	str	r3, [r7, #8]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	60bb      	str	r3, [r7, #8]
 8007946:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007952:	2b40      	cmp	r3, #64	@ 0x40
 8007954:	f040 80b6 	bne.w	8007ac4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007964:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 8145 	beq.w	8007bf8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007976:	429a      	cmp	r2, r3
 8007978:	f080 813e 	bcs.w	8007bf8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007982:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800798e:	f000 8088 	beq.w	8007aa2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	330c      	adds	r3, #12
 8007998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80079a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	330c      	adds	r3, #12
 80079ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80079be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80079c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80079ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80079d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1d9      	bne.n	8007992 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3314      	adds	r3, #20
 80079e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80079ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079f0:	f023 0301 	bic.w	r3, r3, #1
 80079f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3314      	adds	r3, #20
 80079fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e1      	bne.n	80079de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3314      	adds	r3, #20
 8007a20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3314      	adds	r3, #20
 8007a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e3      	bne.n	8007a1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	330c      	adds	r3, #12
 8007a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a72:	f023 0310 	bic.w	r3, r3, #16
 8007a76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	330c      	adds	r3, #12
 8007a80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007a84:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007a86:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e3      	bne.n	8007a60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fa ff9b 	bl	80029d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f8c1 	bl	8007c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007abe:	e09b      	b.n	8007bf8 <HAL_UART_IRQHandler+0x518>
 8007ac0:	0800809f 	.word	0x0800809f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 808e 	beq.w	8007bfc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 8089 	beq.w	8007bfc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	330c      	adds	r3, #12
 8007af0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af4:	e853 3f00 	ldrex	r3, [r3]
 8007af8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007afc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	330c      	adds	r3, #12
 8007b0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007b0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b16:	e841 2300 	strex	r3, r2, [r1]
 8007b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1e3      	bne.n	8007aea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3314      	adds	r3, #20
 8007b28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2c:	e853 3f00 	ldrex	r3, [r3]
 8007b30:	623b      	str	r3, [r7, #32]
   return(result);
 8007b32:	6a3b      	ldr	r3, [r7, #32]
 8007b34:	f023 0301 	bic.w	r3, r3, #1
 8007b38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3314      	adds	r3, #20
 8007b42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007b46:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b4e:	e841 2300 	strex	r3, r2, [r1]
 8007b52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e3      	bne.n	8007b22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	330c      	adds	r3, #12
 8007b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 0310 	bic.w	r3, r3, #16
 8007b7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	330c      	adds	r3, #12
 8007b88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007b8c:	61fa      	str	r2, [r7, #28]
 8007b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b90:	69b9      	ldr	r1, [r7, #24]
 8007b92:	69fa      	ldr	r2, [r7, #28]
 8007b94:	e841 2300 	strex	r3, r2, [r1]
 8007b98:	617b      	str	r3, [r7, #20]
   return(result);
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e3      	bne.n	8007b68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ba6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f847 	bl	8007c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bb2:	e023      	b.n	8007bfc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d009      	beq.n	8007bd4 <HAL_UART_IRQHandler+0x4f4>
 8007bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fa7a 	bl	80080c6 <UART_Transmit_IT>
    return;
 8007bd2:	e014      	b.n	8007bfe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00e      	beq.n	8007bfe <HAL_UART_IRQHandler+0x51e>
 8007be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d008      	beq.n	8007bfe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 faba 	bl	8008166 <UART_EndTransmit_IT>
    return;
 8007bf2:	e004      	b.n	8007bfe <HAL_UART_IRQHandler+0x51e>
    return;
 8007bf4:	bf00      	nop
 8007bf6:	e002      	b.n	8007bfe <HAL_UART_IRQHandler+0x51e>
      return;
 8007bf8:	bf00      	nop
 8007bfa:	e000      	b.n	8007bfe <HAL_UART_IRQHandler+0x51e>
      return;
 8007bfc:	bf00      	nop
  }
}
 8007bfe:	37e8      	adds	r7, #232	@ 0xe8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b09c      	sub	sp, #112	@ 0x70
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c64:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d172      	bne.n	8007d5a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007c74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c76:	2200      	movs	r2, #0
 8007c78:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	330c      	adds	r3, #12
 8007c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c84:	e853 3f00 	ldrex	r3, [r3]
 8007c88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	330c      	adds	r3, #12
 8007c98:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007c9a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007c9c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ca0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e5      	bne.n	8007c7a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3314      	adds	r3, #20
 8007cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc0:	f023 0301 	bic.w	r3, r3, #1
 8007cc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3314      	adds	r3, #20
 8007ccc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007cce:	647a      	str	r2, [r7, #68]	@ 0x44
 8007cd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cd6:	e841 2300 	strex	r3, r2, [r1]
 8007cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1e5      	bne.n	8007cae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3314      	adds	r3, #20
 8007ce8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3314      	adds	r3, #20
 8007d00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d02:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d0a:	e841 2300 	strex	r3, r2, [r1]
 8007d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1e5      	bne.n	8007ce2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d18:	2220      	movs	r2, #32
 8007d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d119      	bne.n	8007d5a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	330c      	adds	r3, #12
 8007d2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f023 0310 	bic.w	r3, r3, #16
 8007d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	330c      	adds	r3, #12
 8007d44:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007d46:	61fa      	str	r2, [r7, #28]
 8007d48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4a:	69b9      	ldr	r1, [r7, #24]
 8007d4c:	69fa      	ldr	r2, [r7, #28]
 8007d4e:	e841 2300 	strex	r3, r2, [r1]
 8007d52:	617b      	str	r3, [r7, #20]
   return(result);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1e5      	bne.n	8007d26 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d106      	bne.n	8007d76 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d6a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007d70:	f7ff ff66 	bl	8007c40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d74:	e002      	b.n	8007d7c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007d76:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007d78:	f7f9 fdc4 	bl	8001904 <HAL_UART_RxCpltCallback>
}
 8007d7c:	bf00      	nop
 8007d7e:	3770      	adds	r7, #112	@ 0x70
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d108      	bne.n	8007db2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007da4:	085b      	lsrs	r3, r3, #1
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	4619      	mov	r1, r3
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f7ff ff48 	bl	8007c40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007db0:	e002      	b.n	8007db8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f7ff ff30 	bl	8007c18 <HAL_UART_RxHalfCpltCallback>
}
 8007db8:	bf00      	nop
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ddc:	2b80      	cmp	r3, #128	@ 0x80
 8007dde:	bf0c      	ite	eq
 8007de0:	2301      	moveq	r3, #1
 8007de2:	2300      	movne	r3, #0
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b21      	cmp	r3, #33	@ 0x21
 8007df2:	d108      	bne.n	8007e06 <UART_DMAError+0x46>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d005      	beq.n	8007e06 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007e00:	68b8      	ldr	r0, [r7, #8]
 8007e02:	f000 f8c1 	bl	8007f88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e10:	2b40      	cmp	r3, #64	@ 0x40
 8007e12:	bf0c      	ite	eq
 8007e14:	2301      	moveq	r3, #1
 8007e16:	2300      	movne	r3, #0
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b22      	cmp	r3, #34	@ 0x22
 8007e26:	d108      	bne.n	8007e3a <UART_DMAError+0x7a>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d005      	beq.n	8007e3a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	2200      	movs	r2, #0
 8007e32:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007e34:	68b8      	ldr	r0, [r7, #8]
 8007e36:	f000 f8cf 	bl	8007fd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e3e:	f043 0210 	orr.w	r2, r3, #16
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e46:	68b8      	ldr	r0, [r7, #8]
 8007e48:	f7ff fef0 	bl	8007c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e4c:	bf00      	nop
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b098      	sub	sp, #96	@ 0x60
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	88fa      	ldrh	r2, [r7, #6]
 8007e6c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2222      	movs	r2, #34	@ 0x22
 8007e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e80:	4a3e      	ldr	r2, [pc, #248]	@ (8007f7c <UART_Start_Receive_DMA+0x128>)
 8007e82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e88:	4a3d      	ldr	r2, [pc, #244]	@ (8007f80 <UART_Start_Receive_DMA+0x12c>)
 8007e8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e90:	4a3c      	ldr	r2, [pc, #240]	@ (8007f84 <UART_Start_Receive_DMA+0x130>)
 8007e92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e98:	2200      	movs	r2, #0
 8007e9a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007e9c:	f107 0308 	add.w	r3, r7, #8
 8007ea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4619      	mov	r1, r3
 8007eae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	f7fa fd38 	bl	8002928 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007eb8:	2300      	movs	r3, #0
 8007eba:	613b      	str	r3, [r7, #16]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	613b      	str	r3, [r7, #16]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	613b      	str	r3, [r7, #16]
 8007ecc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d019      	beq.n	8007f0a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	330c      	adds	r3, #12
 8007edc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ee0:	e853 3f00 	ldrex	r3, [r3]
 8007ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007eec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	330c      	adds	r3, #12
 8007ef4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ef6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007efc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007efe:	e841 2300 	strex	r3, r2, [r1]
 8007f02:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e5      	bne.n	8007ed6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3314      	adds	r3, #20
 8007f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1c:	f043 0301 	orr.w	r3, r3, #1
 8007f20:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3314      	adds	r3, #20
 8007f28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f2a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007f2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007f30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e5      	bne.n	8007f0a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3314      	adds	r3, #20
 8007f44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f54:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3314      	adds	r3, #20
 8007f5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007f60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6a39      	ldr	r1, [r7, #32]
 8007f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e5      	bne.n	8007f3e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3760      	adds	r7, #96	@ 0x60
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	08007c59 	.word	0x08007c59
 8007f80:	08007d85 	.word	0x08007d85
 8007f84:	08007dc1 	.word	0x08007dc1

08007f88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b089      	sub	sp, #36	@ 0x24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	330c      	adds	r3, #12
 8007f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	e853 3f00 	ldrex	r3, [r3]
 8007f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007fa6:	61fb      	str	r3, [r7, #28]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	330c      	adds	r3, #12
 8007fae:	69fa      	ldr	r2, [r7, #28]
 8007fb0:	61ba      	str	r2, [r7, #24]
 8007fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb4:	6979      	ldr	r1, [r7, #20]
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	e841 2300 	strex	r3, r2, [r1]
 8007fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e5      	bne.n	8007f90 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007fcc:	bf00      	nop
 8007fce:	3724      	adds	r7, #36	@ 0x24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b095      	sub	sp, #84	@ 0x54
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	330c      	adds	r3, #12
 8007fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fea:	e853 3f00 	ldrex	r3, [r3]
 8007fee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	330c      	adds	r3, #12
 8007ffe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008000:	643a      	str	r2, [r7, #64]	@ 0x40
 8008002:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008004:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008006:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008008:	e841 2300 	strex	r3, r2, [r1]
 800800c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800800e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e5      	bne.n	8007fe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3314      	adds	r3, #20
 800801a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	61fb      	str	r3, [r7, #28]
   return(result);
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	f023 0301 	bic.w	r3, r3, #1
 800802a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3314      	adds	r3, #20
 8008032:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008034:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008036:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008038:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800803a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800803c:	e841 2300 	strex	r3, r2, [r1]
 8008040:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e5      	bne.n	8008014 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800804c:	2b01      	cmp	r3, #1
 800804e:	d119      	bne.n	8008084 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	330c      	adds	r3, #12
 8008056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f023 0310 	bic.w	r3, r3, #16
 8008066:	647b      	str	r3, [r7, #68]	@ 0x44
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	330c      	adds	r3, #12
 800806e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008070:	61ba      	str	r2, [r7, #24]
 8008072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6979      	ldr	r1, [r7, #20]
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	613b      	str	r3, [r7, #16]
   return(result);
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e5      	bne.n	8008050 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2220      	movs	r2, #32
 8008088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008092:	bf00      	nop
 8008094:	3754      	adds	r7, #84	@ 0x54
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff fdb7 	bl	8007c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080be:	bf00      	nop
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b085      	sub	sp, #20
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b21      	cmp	r3, #33	@ 0x21
 80080d8:	d13e      	bne.n	8008158 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e2:	d114      	bne.n	800810e <UART_Transmit_IT+0x48>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d110      	bne.n	800810e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008100:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	1c9a      	adds	r2, r3, #2
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	621a      	str	r2, [r3, #32]
 800810c:	e008      	b.n	8008120 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	1c59      	adds	r1, r3, #1
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	6211      	str	r1, [r2, #32]
 8008118:	781a      	ldrb	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008124:	b29b      	uxth	r3, r3
 8008126:	3b01      	subs	r3, #1
 8008128:	b29b      	uxth	r3, r3
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	4619      	mov	r1, r3
 800812e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10f      	bne.n	8008154 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68da      	ldr	r2, [r3, #12]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008142:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68da      	ldr	r2, [r3, #12]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008152:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	e000      	b.n	800815a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008158:	2302      	movs	r3, #2
  }
}
 800815a:	4618      	mov	r0, r3
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68da      	ldr	r2, [r3, #12]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800817c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2220      	movs	r2, #32
 8008182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7ff fd3c 	bl	8007c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b08c      	sub	sp, #48	@ 0x30
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b22      	cmp	r3, #34	@ 0x22
 80081a8:	f040 80ae 	bne.w	8008308 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081b4:	d117      	bne.n	80081e6 <UART_Receive_IT+0x50>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d113      	bne.n	80081e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081de:	1c9a      	adds	r2, r3, #2
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80081e4:	e026      	b.n	8008234 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80081ec:	2300      	movs	r3, #0
 80081ee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081f8:	d007      	beq.n	800820a <UART_Receive_IT+0x74>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10a      	bne.n	8008218 <UART_Receive_IT+0x82>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d106      	bne.n	8008218 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	b2da      	uxtb	r2, r3
 8008212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008214:	701a      	strb	r2, [r3, #0]
 8008216:	e008      	b.n	800822a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008224:	b2da      	uxtb	r2, r3
 8008226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008228:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008238:	b29b      	uxth	r3, r3
 800823a:	3b01      	subs	r3, #1
 800823c:	b29b      	uxth	r3, r3
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	4619      	mov	r1, r3
 8008242:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008244:	2b00      	cmp	r3, #0
 8008246:	d15d      	bne.n	8008304 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68da      	ldr	r2, [r3, #12]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 0220 	bic.w	r2, r2, #32
 8008256:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008266:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	695a      	ldr	r2, [r3, #20]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 0201 	bic.w	r2, r2, #1
 8008276:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2220      	movs	r2, #32
 800827c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800828a:	2b01      	cmp	r3, #1
 800828c:	d135      	bne.n	80082fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	330c      	adds	r3, #12
 800829a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	e853 3f00 	ldrex	r3, [r3]
 80082a2:	613b      	str	r3, [r7, #16]
   return(result);
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	f023 0310 	bic.w	r3, r3, #16
 80082aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	330c      	adds	r3, #12
 80082b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082b4:	623a      	str	r2, [r7, #32]
 80082b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	69f9      	ldr	r1, [r7, #28]
 80082ba:	6a3a      	ldr	r2, [r7, #32]
 80082bc:	e841 2300 	strex	r3, r2, [r1]
 80082c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e5      	bne.n	8008294 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0310 	and.w	r3, r3, #16
 80082d2:	2b10      	cmp	r3, #16
 80082d4:	d10a      	bne.n	80082ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	60fb      	str	r3, [r7, #12]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	60fb      	str	r3, [r7, #12]
 80082ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff fca4 	bl	8007c40 <HAL_UARTEx_RxEventCallback>
 80082f8:	e002      	b.n	8008300 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7f9 fb02 	bl	8001904 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	e002      	b.n	800830a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	e000      	b.n	800830a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008308:	2302      	movs	r3, #2
  }
}
 800830a:	4618      	mov	r0, r3
 800830c:	3730      	adds	r7, #48	@ 0x30
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008318:	b0c0      	sub	sp, #256	@ 0x100
 800831a:	af00      	add	r7, sp, #0
 800831c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008330:	68d9      	ldr	r1, [r3, #12]
 8008332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	ea40 0301 	orr.w	r3, r0, r1
 800833c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800833e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	431a      	orrs	r2, r3
 800834c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	431a      	orrs	r2, r3
 8008354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	4313      	orrs	r3, r2
 800835c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800836c:	f021 010c 	bic.w	r1, r1, #12
 8008370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800837a:	430b      	orrs	r3, r1
 800837c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800837e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800838a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800838e:	6999      	ldr	r1, [r3, #24]
 8008390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	ea40 0301 	orr.w	r3, r0, r1
 800839a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800839c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	4b8f      	ldr	r3, [pc, #572]	@ (80085e0 <UART_SetConfig+0x2cc>)
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d005      	beq.n	80083b4 <UART_SetConfig+0xa0>
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	4b8d      	ldr	r3, [pc, #564]	@ (80085e4 <UART_SetConfig+0x2d0>)
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d104      	bne.n	80083be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083b4:	f7fe f920 	bl	80065f8 <HAL_RCC_GetPCLK2Freq>
 80083b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80083bc:	e003      	b.n	80083c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083be:	f7fe f907 	bl	80065d0 <HAL_RCC_GetPCLK1Freq>
 80083c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083d0:	f040 810c 	bne.w	80085ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083d8:	2200      	movs	r2, #0
 80083da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80083e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80083e6:	4622      	mov	r2, r4
 80083e8:	462b      	mov	r3, r5
 80083ea:	1891      	adds	r1, r2, r2
 80083ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80083ee:	415b      	adcs	r3, r3
 80083f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80083f6:	4621      	mov	r1, r4
 80083f8:	eb12 0801 	adds.w	r8, r2, r1
 80083fc:	4629      	mov	r1, r5
 80083fe:	eb43 0901 	adc.w	r9, r3, r1
 8008402:	f04f 0200 	mov.w	r2, #0
 8008406:	f04f 0300 	mov.w	r3, #0
 800840a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800840e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008416:	4690      	mov	r8, r2
 8008418:	4699      	mov	r9, r3
 800841a:	4623      	mov	r3, r4
 800841c:	eb18 0303 	adds.w	r3, r8, r3
 8008420:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008424:	462b      	mov	r3, r5
 8008426:	eb49 0303 	adc.w	r3, r9, r3
 800842a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800842e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800843a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800843e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008442:	460b      	mov	r3, r1
 8008444:	18db      	adds	r3, r3, r3
 8008446:	653b      	str	r3, [r7, #80]	@ 0x50
 8008448:	4613      	mov	r3, r2
 800844a:	eb42 0303 	adc.w	r3, r2, r3
 800844e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008450:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008454:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008458:	f7f8 fc1e 	bl	8000c98 <__aeabi_uldivmod>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	4b61      	ldr	r3, [pc, #388]	@ (80085e8 <UART_SetConfig+0x2d4>)
 8008462:	fba3 2302 	umull	r2, r3, r3, r2
 8008466:	095b      	lsrs	r3, r3, #5
 8008468:	011c      	lsls	r4, r3, #4
 800846a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800846e:	2200      	movs	r2, #0
 8008470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008474:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008478:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800847c:	4642      	mov	r2, r8
 800847e:	464b      	mov	r3, r9
 8008480:	1891      	adds	r1, r2, r2
 8008482:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008484:	415b      	adcs	r3, r3
 8008486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008488:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800848c:	4641      	mov	r1, r8
 800848e:	eb12 0a01 	adds.w	sl, r2, r1
 8008492:	4649      	mov	r1, r9
 8008494:	eb43 0b01 	adc.w	fp, r3, r1
 8008498:	f04f 0200 	mov.w	r2, #0
 800849c:	f04f 0300 	mov.w	r3, #0
 80084a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80084a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084ac:	4692      	mov	sl, r2
 80084ae:	469b      	mov	fp, r3
 80084b0:	4643      	mov	r3, r8
 80084b2:	eb1a 0303 	adds.w	r3, sl, r3
 80084b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084ba:	464b      	mov	r3, r9
 80084bc:	eb4b 0303 	adc.w	r3, fp, r3
 80084c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80084d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80084d8:	460b      	mov	r3, r1
 80084da:	18db      	adds	r3, r3, r3
 80084dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80084de:	4613      	mov	r3, r2
 80084e0:	eb42 0303 	adc.w	r3, r2, r3
 80084e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80084e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80084ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80084ee:	f7f8 fbd3 	bl	8000c98 <__aeabi_uldivmod>
 80084f2:	4602      	mov	r2, r0
 80084f4:	460b      	mov	r3, r1
 80084f6:	4611      	mov	r1, r2
 80084f8:	4b3b      	ldr	r3, [pc, #236]	@ (80085e8 <UART_SetConfig+0x2d4>)
 80084fa:	fba3 2301 	umull	r2, r3, r3, r1
 80084fe:	095b      	lsrs	r3, r3, #5
 8008500:	2264      	movs	r2, #100	@ 0x64
 8008502:	fb02 f303 	mul.w	r3, r2, r3
 8008506:	1acb      	subs	r3, r1, r3
 8008508:	00db      	lsls	r3, r3, #3
 800850a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800850e:	4b36      	ldr	r3, [pc, #216]	@ (80085e8 <UART_SetConfig+0x2d4>)
 8008510:	fba3 2302 	umull	r2, r3, r3, r2
 8008514:	095b      	lsrs	r3, r3, #5
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800851c:	441c      	add	r4, r3
 800851e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008522:	2200      	movs	r2, #0
 8008524:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008528:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800852c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008530:	4642      	mov	r2, r8
 8008532:	464b      	mov	r3, r9
 8008534:	1891      	adds	r1, r2, r2
 8008536:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008538:	415b      	adcs	r3, r3
 800853a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800853c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008540:	4641      	mov	r1, r8
 8008542:	1851      	adds	r1, r2, r1
 8008544:	6339      	str	r1, [r7, #48]	@ 0x30
 8008546:	4649      	mov	r1, r9
 8008548:	414b      	adcs	r3, r1
 800854a:	637b      	str	r3, [r7, #52]	@ 0x34
 800854c:	f04f 0200 	mov.w	r2, #0
 8008550:	f04f 0300 	mov.w	r3, #0
 8008554:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008558:	4659      	mov	r1, fp
 800855a:	00cb      	lsls	r3, r1, #3
 800855c:	4651      	mov	r1, sl
 800855e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008562:	4651      	mov	r1, sl
 8008564:	00ca      	lsls	r2, r1, #3
 8008566:	4610      	mov	r0, r2
 8008568:	4619      	mov	r1, r3
 800856a:	4603      	mov	r3, r0
 800856c:	4642      	mov	r2, r8
 800856e:	189b      	adds	r3, r3, r2
 8008570:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008574:	464b      	mov	r3, r9
 8008576:	460a      	mov	r2, r1
 8008578:	eb42 0303 	adc.w	r3, r2, r3
 800857c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800858c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008590:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008594:	460b      	mov	r3, r1
 8008596:	18db      	adds	r3, r3, r3
 8008598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800859a:	4613      	mov	r3, r2
 800859c:	eb42 0303 	adc.w	r3, r2, r3
 80085a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80085a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80085aa:	f7f8 fb75 	bl	8000c98 <__aeabi_uldivmod>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	4b0d      	ldr	r3, [pc, #52]	@ (80085e8 <UART_SetConfig+0x2d4>)
 80085b4:	fba3 1302 	umull	r1, r3, r3, r2
 80085b8:	095b      	lsrs	r3, r3, #5
 80085ba:	2164      	movs	r1, #100	@ 0x64
 80085bc:	fb01 f303 	mul.w	r3, r1, r3
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	3332      	adds	r3, #50	@ 0x32
 80085c6:	4a08      	ldr	r2, [pc, #32]	@ (80085e8 <UART_SetConfig+0x2d4>)
 80085c8:	fba2 2303 	umull	r2, r3, r2, r3
 80085cc:	095b      	lsrs	r3, r3, #5
 80085ce:	f003 0207 	and.w	r2, r3, #7
 80085d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4422      	add	r2, r4
 80085da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085dc:	e106      	b.n	80087ec <UART_SetConfig+0x4d8>
 80085de:	bf00      	nop
 80085e0:	40011000 	.word	0x40011000
 80085e4:	40011400 	.word	0x40011400
 80085e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085f0:	2200      	movs	r2, #0
 80085f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80085fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80085fe:	4642      	mov	r2, r8
 8008600:	464b      	mov	r3, r9
 8008602:	1891      	adds	r1, r2, r2
 8008604:	6239      	str	r1, [r7, #32]
 8008606:	415b      	adcs	r3, r3
 8008608:	627b      	str	r3, [r7, #36]	@ 0x24
 800860a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800860e:	4641      	mov	r1, r8
 8008610:	1854      	adds	r4, r2, r1
 8008612:	4649      	mov	r1, r9
 8008614:	eb43 0501 	adc.w	r5, r3, r1
 8008618:	f04f 0200 	mov.w	r2, #0
 800861c:	f04f 0300 	mov.w	r3, #0
 8008620:	00eb      	lsls	r3, r5, #3
 8008622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008626:	00e2      	lsls	r2, r4, #3
 8008628:	4614      	mov	r4, r2
 800862a:	461d      	mov	r5, r3
 800862c:	4643      	mov	r3, r8
 800862e:	18e3      	adds	r3, r4, r3
 8008630:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008634:	464b      	mov	r3, r9
 8008636:	eb45 0303 	adc.w	r3, r5, r3
 800863a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800863e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800864a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800864e:	f04f 0200 	mov.w	r2, #0
 8008652:	f04f 0300 	mov.w	r3, #0
 8008656:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800865a:	4629      	mov	r1, r5
 800865c:	008b      	lsls	r3, r1, #2
 800865e:	4621      	mov	r1, r4
 8008660:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008664:	4621      	mov	r1, r4
 8008666:	008a      	lsls	r2, r1, #2
 8008668:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800866c:	f7f8 fb14 	bl	8000c98 <__aeabi_uldivmod>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4b60      	ldr	r3, [pc, #384]	@ (80087f8 <UART_SetConfig+0x4e4>)
 8008676:	fba3 2302 	umull	r2, r3, r3, r2
 800867a:	095b      	lsrs	r3, r3, #5
 800867c:	011c      	lsls	r4, r3, #4
 800867e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008682:	2200      	movs	r2, #0
 8008684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008688:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800868c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008690:	4642      	mov	r2, r8
 8008692:	464b      	mov	r3, r9
 8008694:	1891      	adds	r1, r2, r2
 8008696:	61b9      	str	r1, [r7, #24]
 8008698:	415b      	adcs	r3, r3
 800869a:	61fb      	str	r3, [r7, #28]
 800869c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086a0:	4641      	mov	r1, r8
 80086a2:	1851      	adds	r1, r2, r1
 80086a4:	6139      	str	r1, [r7, #16]
 80086a6:	4649      	mov	r1, r9
 80086a8:	414b      	adcs	r3, r1
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	f04f 0200 	mov.w	r2, #0
 80086b0:	f04f 0300 	mov.w	r3, #0
 80086b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086b8:	4659      	mov	r1, fp
 80086ba:	00cb      	lsls	r3, r1, #3
 80086bc:	4651      	mov	r1, sl
 80086be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086c2:	4651      	mov	r1, sl
 80086c4:	00ca      	lsls	r2, r1, #3
 80086c6:	4610      	mov	r0, r2
 80086c8:	4619      	mov	r1, r3
 80086ca:	4603      	mov	r3, r0
 80086cc:	4642      	mov	r2, r8
 80086ce:	189b      	adds	r3, r3, r2
 80086d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086d4:	464b      	mov	r3, r9
 80086d6:	460a      	mov	r2, r1
 80086d8:	eb42 0303 	adc.w	r3, r2, r3
 80086dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80086ec:	f04f 0200 	mov.w	r2, #0
 80086f0:	f04f 0300 	mov.w	r3, #0
 80086f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80086f8:	4649      	mov	r1, r9
 80086fa:	008b      	lsls	r3, r1, #2
 80086fc:	4641      	mov	r1, r8
 80086fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008702:	4641      	mov	r1, r8
 8008704:	008a      	lsls	r2, r1, #2
 8008706:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800870a:	f7f8 fac5 	bl	8000c98 <__aeabi_uldivmod>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4611      	mov	r1, r2
 8008714:	4b38      	ldr	r3, [pc, #224]	@ (80087f8 <UART_SetConfig+0x4e4>)
 8008716:	fba3 2301 	umull	r2, r3, r3, r1
 800871a:	095b      	lsrs	r3, r3, #5
 800871c:	2264      	movs	r2, #100	@ 0x64
 800871e:	fb02 f303 	mul.w	r3, r2, r3
 8008722:	1acb      	subs	r3, r1, r3
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	3332      	adds	r3, #50	@ 0x32
 8008728:	4a33      	ldr	r2, [pc, #204]	@ (80087f8 <UART_SetConfig+0x4e4>)
 800872a:	fba2 2303 	umull	r2, r3, r2, r3
 800872e:	095b      	lsrs	r3, r3, #5
 8008730:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008734:	441c      	add	r4, r3
 8008736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800873a:	2200      	movs	r2, #0
 800873c:	673b      	str	r3, [r7, #112]	@ 0x70
 800873e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008740:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008744:	4642      	mov	r2, r8
 8008746:	464b      	mov	r3, r9
 8008748:	1891      	adds	r1, r2, r2
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	415b      	adcs	r3, r3
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008754:	4641      	mov	r1, r8
 8008756:	1851      	adds	r1, r2, r1
 8008758:	6039      	str	r1, [r7, #0]
 800875a:	4649      	mov	r1, r9
 800875c:	414b      	adcs	r3, r1
 800875e:	607b      	str	r3, [r7, #4]
 8008760:	f04f 0200 	mov.w	r2, #0
 8008764:	f04f 0300 	mov.w	r3, #0
 8008768:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800876c:	4659      	mov	r1, fp
 800876e:	00cb      	lsls	r3, r1, #3
 8008770:	4651      	mov	r1, sl
 8008772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008776:	4651      	mov	r1, sl
 8008778:	00ca      	lsls	r2, r1, #3
 800877a:	4610      	mov	r0, r2
 800877c:	4619      	mov	r1, r3
 800877e:	4603      	mov	r3, r0
 8008780:	4642      	mov	r2, r8
 8008782:	189b      	adds	r3, r3, r2
 8008784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008786:	464b      	mov	r3, r9
 8008788:	460a      	mov	r2, r1
 800878a:	eb42 0303 	adc.w	r3, r2, r3
 800878e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	663b      	str	r3, [r7, #96]	@ 0x60
 800879a:	667a      	str	r2, [r7, #100]	@ 0x64
 800879c:	f04f 0200 	mov.w	r2, #0
 80087a0:	f04f 0300 	mov.w	r3, #0
 80087a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80087a8:	4649      	mov	r1, r9
 80087aa:	008b      	lsls	r3, r1, #2
 80087ac:	4641      	mov	r1, r8
 80087ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087b2:	4641      	mov	r1, r8
 80087b4:	008a      	lsls	r2, r1, #2
 80087b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80087ba:	f7f8 fa6d 	bl	8000c98 <__aeabi_uldivmod>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4b0d      	ldr	r3, [pc, #52]	@ (80087f8 <UART_SetConfig+0x4e4>)
 80087c4:	fba3 1302 	umull	r1, r3, r3, r2
 80087c8:	095b      	lsrs	r3, r3, #5
 80087ca:	2164      	movs	r1, #100	@ 0x64
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	011b      	lsls	r3, r3, #4
 80087d4:	3332      	adds	r3, #50	@ 0x32
 80087d6:	4a08      	ldr	r2, [pc, #32]	@ (80087f8 <UART_SetConfig+0x4e4>)
 80087d8:	fba2 2303 	umull	r2, r3, r2, r3
 80087dc:	095b      	lsrs	r3, r3, #5
 80087de:	f003 020f 	and.w	r2, r3, #15
 80087e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4422      	add	r2, r4
 80087ea:	609a      	str	r2, [r3, #8]
}
 80087ec:	bf00      	nop
 80087ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80087f2:	46bd      	mov	sp, r7
 80087f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087f8:	51eb851f 	.word	0x51eb851f

080087fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008806:	2300      	movs	r3, #0
 8008808:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800880a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800880e:	2b84      	cmp	r3, #132	@ 0x84
 8008810:	d005      	beq.n	800881e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008812:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	4413      	add	r3, r2
 800881a:	3303      	adds	r3, #3
 800881c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800881e:	68fb      	ldr	r3, [r7, #12]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008830:	f000 fafc 	bl	8008e2c <vTaskStartScheduler>
  
  return osOK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	bd80      	pop	{r7, pc}

0800883a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800883a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800883c:	b089      	sub	sp, #36	@ 0x24
 800883e:	af04      	add	r7, sp, #16
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d020      	beq.n	800888e <osThreadCreate+0x54>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01c      	beq.n	800888e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685c      	ldr	r4, [r3, #4]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	691e      	ldr	r6, [r3, #16]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff ffc8 	bl	80087fc <makeFreeRtosPriority>
 800886c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008876:	9202      	str	r2, [sp, #8]
 8008878:	9301      	str	r3, [sp, #4]
 800887a:	9100      	str	r1, [sp, #0]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	4632      	mov	r2, r6
 8008880:	4629      	mov	r1, r5
 8008882:	4620      	mov	r0, r4
 8008884:	f000 f8ed 	bl	8008a62 <xTaskCreateStatic>
 8008888:	4603      	mov	r3, r0
 800888a:	60fb      	str	r3, [r7, #12]
 800888c:	e01c      	b.n	80088c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685c      	ldr	r4, [r3, #4]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800889a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff ffaa 	bl	80087fc <makeFreeRtosPriority>
 80088a8:	4602      	mov	r2, r0
 80088aa:	f107 030c 	add.w	r3, r7, #12
 80088ae:	9301      	str	r3, [sp, #4]
 80088b0:	9200      	str	r2, [sp, #0]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	4632      	mov	r2, r6
 80088b6:	4629      	mov	r1, r5
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 f932 	bl	8008b22 <xTaskCreate>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d001      	beq.n	80088c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80088c4:	2300      	movs	r3, #0
 80088c6:	e000      	b.n	80088ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80088c8:	68fb      	ldr	r3, [r7, #12]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080088d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <osDelay+0x16>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	e000      	b.n	80088ea <osDelay+0x18>
 80088e8:	2301      	movs	r3, #1
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 fa68 	bl	8008dc0 <vTaskDelay>
  
  return osOK;
 80088f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80088fa:	b480      	push	{r7}
 80088fc:	b083      	sub	sp, #12
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f103 0208 	add.w	r2, r3, #8
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f04f 32ff 	mov.w	r2, #4294967295
 8008912:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f103 0208 	add.w	r2, r3, #8
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f103 0208 	add.w	r2, r3, #8
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800892e:	bf00      	nop
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800893a:	b480      	push	{r7}
 800893c:	b083      	sub	sp, #12
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	689a      	ldr	r2, [r3, #8]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	601a      	str	r2, [r3, #0]
}
 8008990:	bf00      	nop
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b2:	d103      	bne.n	80089bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	60fb      	str	r3, [r7, #12]
 80089ba:	e00c      	b.n	80089d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3308      	adds	r3, #8
 80089c0:	60fb      	str	r3, [r7, #12]
 80089c2:	e002      	b.n	80089ca <vListInsert+0x2e>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d2f6      	bcs.n	80089c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	601a      	str	r2, [r3, #0]
}
 8008a02:	bf00      	nop
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b085      	sub	sp, #20
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	6892      	ldr	r2, [r2, #8]
 8008a24:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	6852      	ldr	r2, [r2, #4]
 8008a2e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d103      	bne.n	8008a42 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	689a      	ldr	r2, [r3, #8]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	1e5a      	subs	r2, r3, #1
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b08e      	sub	sp, #56	@ 0x38
 8008a66:	af04      	add	r7, sp, #16
 8008a68:	60f8      	str	r0, [r7, #12]
 8008a6a:	60b9      	str	r1, [r7, #8]
 8008a6c:	607a      	str	r2, [r7, #4]
 8008a6e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10b      	bne.n	8008a8e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a88:	bf00      	nop
 8008a8a:	bf00      	nop
 8008a8c:	e7fd      	b.n	8008a8a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10b      	bne.n	8008aac <xTaskCreateStatic+0x4a>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	61fb      	str	r3, [r7, #28]
}
 8008aa6:	bf00      	nop
 8008aa8:	bf00      	nop
 8008aaa:	e7fd      	b.n	8008aa8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008aac:	23a0      	movs	r3, #160	@ 0xa0
 8008aae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	2ba0      	cmp	r3, #160	@ 0xa0
 8008ab4:	d00b      	beq.n	8008ace <xTaskCreateStatic+0x6c>
	__asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	61bb      	str	r3, [r7, #24]
}
 8008ac8:	bf00      	nop
 8008aca:	bf00      	nop
 8008acc:	e7fd      	b.n	8008aca <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ace:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d01e      	beq.n	8008b14 <xTaskCreateStatic+0xb2>
 8008ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d01b      	beq.n	8008b14 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ade:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ae4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae8:	2202      	movs	r2, #2
 8008aea:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008aee:	2300      	movs	r3, #0
 8008af0:	9303      	str	r3, [sp, #12]
 8008af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af4:	9302      	str	r3, [sp, #8]
 8008af6:	f107 0314 	add.w	r3, r7, #20
 8008afa:	9301      	str	r3, [sp, #4]
 8008afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	68b9      	ldr	r1, [r7, #8]
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 f850 	bl	8008bac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b0e:	f000 f8ed 	bl	8008cec <prvAddNewTaskToReadyList>
 8008b12:	e001      	b.n	8008b18 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008b14:	2300      	movs	r3, #0
 8008b16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b18:	697b      	ldr	r3, [r7, #20]
	}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3728      	adds	r7, #40	@ 0x28
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b08c      	sub	sp, #48	@ 0x30
 8008b26:	af04      	add	r7, sp, #16
 8008b28:	60f8      	str	r0, [r7, #12]
 8008b2a:	60b9      	str	r1, [r7, #8]
 8008b2c:	603b      	str	r3, [r7, #0]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b32:	88fb      	ldrh	r3, [r7, #6]
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 ff0e 	bl	8009958 <pvPortMalloc>
 8008b3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00e      	beq.n	8008b62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b44:	20a0      	movs	r0, #160	@ 0xa0
 8008b46:	f000 ff07 	bl	8009958 <pvPortMalloc>
 8008b4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b58:	e005      	b.n	8008b66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b5a:	6978      	ldr	r0, [r7, #20]
 8008b5c:	f000 ffca 	bl	8009af4 <vPortFree>
 8008b60:	e001      	b.n	8008b66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b62:	2300      	movs	r3, #0
 8008b64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d017      	beq.n	8008b9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b74:	88fa      	ldrh	r2, [r7, #6]
 8008b76:	2300      	movs	r3, #0
 8008b78:	9303      	str	r3, [sp, #12]
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	9302      	str	r3, [sp, #8]
 8008b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	68b9      	ldr	r1, [r7, #8]
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f000 f80e 	bl	8008bac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b90:	69f8      	ldr	r0, [r7, #28]
 8008b92:	f000 f8ab 	bl	8008cec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b96:	2301      	movs	r3, #1
 8008b98:	61bb      	str	r3, [r7, #24]
 8008b9a:	e002      	b.n	8008ba2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ba2:	69bb      	ldr	r3, [r7, #24]
	}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3720      	adds	r7, #32
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b088      	sub	sp, #32
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	f023 0307 	bic.w	r3, r3, #7
 8008bd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	f003 0307 	and.w	r3, r3, #7
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00b      	beq.n	8008bf6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	617b      	str	r3, [r7, #20]
}
 8008bf0:	bf00      	nop
 8008bf2:	bf00      	nop
 8008bf4:	e7fd      	b.n	8008bf2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01f      	beq.n	8008c3c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	61fb      	str	r3, [r7, #28]
 8008c00:	e012      	b.n	8008c28 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	4413      	add	r3, r2
 8008c08:	7819      	ldrb	r1, [r3, #0]
 8008c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	4413      	add	r3, r2
 8008c10:	3334      	adds	r3, #52	@ 0x34
 8008c12:	460a      	mov	r2, r1
 8008c14:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d006      	beq.n	8008c30 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	3301      	adds	r3, #1
 8008c26:	61fb      	str	r3, [r7, #28]
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	2b0f      	cmp	r3, #15
 8008c2c:	d9e9      	bls.n	8008c02 <prvInitialiseNewTask+0x56>
 8008c2e:	e000      	b.n	8008c32 <prvInitialiseNewTask+0x86>
			{
				break;
 8008c30:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c3a:	e003      	b.n	8008c44 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c46:	2b06      	cmp	r3, #6
 8008c48:	d901      	bls.n	8008c4e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c4a:	2306      	movs	r3, #6
 8008c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c52:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c58:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c62:	3304      	adds	r3, #4
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff fe68 	bl	800893a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6c:	3318      	adds	r3, #24
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7ff fe63 	bl	800893a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7c:	f1c3 0207 	rsb	r2, r3, #7
 8008c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c88:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9c:	334c      	adds	r3, #76	@ 0x4c
 8008c9e:	224c      	movs	r2, #76	@ 0x4c
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f002 f80b 	bl	800acbe <memset>
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008caa:	4a0d      	ldr	r2, [pc, #52]	@ (8008ce0 <prvInitialiseNewTask+0x134>)
 8008cac:	651a      	str	r2, [r3, #80]	@ 0x50
 8008cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8008ce4 <prvInitialiseNewTask+0x138>)
 8008cb2:	655a      	str	r2, [r3, #84]	@ 0x54
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8008ce8 <prvInitialiseNewTask+0x13c>)
 8008cb8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	68f9      	ldr	r1, [r7, #12]
 8008cbe:	69b8      	ldr	r0, [r7, #24]
 8008cc0:	f000 fc38 	bl	8009534 <pxPortInitialiseStack>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cd6:	bf00      	nop
 8008cd8:	3720      	adds	r7, #32
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	20004618 	.word	0x20004618
 8008ce4:	20004680 	.word	0x20004680
 8008ce8:	200046e8 	.word	0x200046e8

08008cec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cf4:	f000 fd50 	bl	8009798 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8008da4 <prvAddNewTaskToReadyList+0xb8>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	4a29      	ldr	r2, [pc, #164]	@ (8008da4 <prvAddNewTaskToReadyList+0xb8>)
 8008d00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d02:	4b29      	ldr	r3, [pc, #164]	@ (8008da8 <prvAddNewTaskToReadyList+0xbc>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d109      	bne.n	8008d1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d0a:	4a27      	ldr	r2, [pc, #156]	@ (8008da8 <prvAddNewTaskToReadyList+0xbc>)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d10:	4b24      	ldr	r3, [pc, #144]	@ (8008da4 <prvAddNewTaskToReadyList+0xb8>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d110      	bne.n	8008d3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d18:	f000 fae2 	bl	80092e0 <prvInitialiseTaskLists>
 8008d1c:	e00d      	b.n	8008d3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d1e:	4b23      	ldr	r3, [pc, #140]	@ (8008dac <prvAddNewTaskToReadyList+0xc0>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d109      	bne.n	8008d3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d26:	4b20      	ldr	r3, [pc, #128]	@ (8008da8 <prvAddNewTaskToReadyList+0xbc>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d802      	bhi.n	8008d3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d34:	4a1c      	ldr	r2, [pc, #112]	@ (8008da8 <prvAddNewTaskToReadyList+0xbc>)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8008db0 <prvAddNewTaskToReadyList+0xc4>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	4a1b      	ldr	r2, [pc, #108]	@ (8008db0 <prvAddNewTaskToReadyList+0xc4>)
 8008d42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d48:	2201      	movs	r2, #1
 8008d4a:	409a      	lsls	r2, r3
 8008d4c:	4b19      	ldr	r3, [pc, #100]	@ (8008db4 <prvAddNewTaskToReadyList+0xc8>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	4a18      	ldr	r2, [pc, #96]	@ (8008db4 <prvAddNewTaskToReadyList+0xc8>)
 8008d54:	6013      	str	r3, [r2, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	4413      	add	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4a15      	ldr	r2, [pc, #84]	@ (8008db8 <prvAddNewTaskToReadyList+0xcc>)
 8008d64:	441a      	add	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	3304      	adds	r3, #4
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	f7ff fdf1 	bl	8008954 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d72:	f000 fd43 	bl	80097fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d76:	4b0d      	ldr	r3, [pc, #52]	@ (8008dac <prvAddNewTaskToReadyList+0xc0>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00e      	beq.n	8008d9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8008da8 <prvAddNewTaskToReadyList+0xbc>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d207      	bcs.n	8008d9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8008dbc <prvAddNewTaskToReadyList+0xd0>)
 8008d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d9c:	bf00      	nop
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	200009c4 	.word	0x200009c4
 8008da8:	200008c4 	.word	0x200008c4
 8008dac:	200009d0 	.word	0x200009d0
 8008db0:	200009e0 	.word	0x200009e0
 8008db4:	200009cc 	.word	0x200009cc
 8008db8:	200008c8 	.word	0x200008c8
 8008dbc:	e000ed04 	.word	0xe000ed04

08008dc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d018      	beq.n	8008e04 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008dd2:	4b14      	ldr	r3, [pc, #80]	@ (8008e24 <vTaskDelay+0x64>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00b      	beq.n	8008df2 <vTaskDelay+0x32>
	__asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	60bb      	str	r3, [r7, #8]
}
 8008dec:	bf00      	nop
 8008dee:	bf00      	nop
 8008df0:	e7fd      	b.n	8008dee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008df2:	f000 f885 	bl	8008f00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008df6:	2100      	movs	r1, #0
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fb35 	bl	8009468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008dfe:	f000 f88d 	bl	8008f1c <xTaskResumeAll>
 8008e02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d107      	bne.n	8008e1a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008e0a:	4b07      	ldr	r3, [pc, #28]	@ (8008e28 <vTaskDelay+0x68>)
 8008e0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e1a:	bf00      	nop
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	200009ec 	.word	0x200009ec
 8008e28:	e000ed04 	.word	0xe000ed04

08008e2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b08a      	sub	sp, #40	@ 0x28
 8008e30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e32:	2300      	movs	r3, #0
 8008e34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e36:	2300      	movs	r3, #0
 8008e38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e3a:	463a      	mov	r2, r7
 8008e3c:	1d39      	adds	r1, r7, #4
 8008e3e:	f107 0308 	add.w	r3, r7, #8
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7f8 f98a 	bl	800115c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	9202      	str	r2, [sp, #8]
 8008e50:	9301      	str	r3, [sp, #4]
 8008e52:	2300      	movs	r3, #0
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	2300      	movs	r3, #0
 8008e58:	460a      	mov	r2, r1
 8008e5a:	4921      	ldr	r1, [pc, #132]	@ (8008ee0 <vTaskStartScheduler+0xb4>)
 8008e5c:	4821      	ldr	r0, [pc, #132]	@ (8008ee4 <vTaskStartScheduler+0xb8>)
 8008e5e:	f7ff fe00 	bl	8008a62 <xTaskCreateStatic>
 8008e62:	4603      	mov	r3, r0
 8008e64:	4a20      	ldr	r2, [pc, #128]	@ (8008ee8 <vTaskStartScheduler+0xbc>)
 8008e66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e68:	4b1f      	ldr	r3, [pc, #124]	@ (8008ee8 <vTaskStartScheduler+0xbc>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e70:	2301      	movs	r3, #1
 8008e72:	617b      	str	r3, [r7, #20]
 8008e74:	e001      	b.n	8008e7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e76:	2300      	movs	r3, #0
 8008e78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d11b      	bne.n	8008eb8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	613b      	str	r3, [r7, #16]
}
 8008e92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e94:	4b15      	ldr	r3, [pc, #84]	@ (8008eec <vTaskStartScheduler+0xc0>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	334c      	adds	r3, #76	@ 0x4c
 8008e9a:	4a15      	ldr	r2, [pc, #84]	@ (8008ef0 <vTaskStartScheduler+0xc4>)
 8008e9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e9e:	4b15      	ldr	r3, [pc, #84]	@ (8008ef4 <vTaskStartScheduler+0xc8>)
 8008ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ea6:	4b14      	ldr	r3, [pc, #80]	@ (8008ef8 <vTaskStartScheduler+0xcc>)
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008eac:	4b13      	ldr	r3, [pc, #76]	@ (8008efc <vTaskStartScheduler+0xd0>)
 8008eae:	2200      	movs	r2, #0
 8008eb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008eb2:	f000 fbcd 	bl	8009650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008eb6:	e00f      	b.n	8008ed8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebe:	d10b      	bne.n	8008ed8 <vTaskStartScheduler+0xac>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	60fb      	str	r3, [r7, #12]
}
 8008ed2:	bf00      	nop
 8008ed4:	bf00      	nop
 8008ed6:	e7fd      	b.n	8008ed4 <vTaskStartScheduler+0xa8>
}
 8008ed8:	bf00      	nop
 8008eda:	3718      	adds	r7, #24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	0800e700 	.word	0x0800e700
 8008ee4:	080092b1 	.word	0x080092b1
 8008ee8:	200009e8 	.word	0x200009e8
 8008eec:	200008c4 	.word	0x200008c4
 8008ef0:	2000001c 	.word	0x2000001c
 8008ef4:	200009e4 	.word	0x200009e4
 8008ef8:	200009d0 	.word	0x200009d0
 8008efc:	200009c8 	.word	0x200009c8

08008f00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f00:	b480      	push	{r7}
 8008f02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008f04:	4b04      	ldr	r3, [pc, #16]	@ (8008f18 <vTaskSuspendAll+0x18>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	4a03      	ldr	r2, [pc, #12]	@ (8008f18 <vTaskSuspendAll+0x18>)
 8008f0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008f0e:	bf00      	nop
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	200009ec 	.word	0x200009ec

08008f1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f22:	2300      	movs	r3, #0
 8008f24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f26:	2300      	movs	r3, #0
 8008f28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f2a:	4b42      	ldr	r3, [pc, #264]	@ (8009034 <xTaskResumeAll+0x118>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10b      	bne.n	8008f4a <xTaskResumeAll+0x2e>
	__asm volatile
 8008f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	603b      	str	r3, [r7, #0]
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop
 8008f48:	e7fd      	b.n	8008f46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f4a:	f000 fc25 	bl	8009798 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f4e:	4b39      	ldr	r3, [pc, #228]	@ (8009034 <xTaskResumeAll+0x118>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	4a37      	ldr	r2, [pc, #220]	@ (8009034 <xTaskResumeAll+0x118>)
 8008f56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f58:	4b36      	ldr	r3, [pc, #216]	@ (8009034 <xTaskResumeAll+0x118>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d161      	bne.n	8009024 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f60:	4b35      	ldr	r3, [pc, #212]	@ (8009038 <xTaskResumeAll+0x11c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d05d      	beq.n	8009024 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f68:	e02e      	b.n	8008fc8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f6a:	4b34      	ldr	r3, [pc, #208]	@ (800903c <xTaskResumeAll+0x120>)
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	3318      	adds	r3, #24
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7ff fd49 	bl	8008a0e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	3304      	adds	r3, #4
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7ff fd44 	bl	8008a0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	409a      	lsls	r2, r3
 8008f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8009040 <xTaskResumeAll+0x124>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	4a2a      	ldr	r2, [pc, #168]	@ (8009040 <xTaskResumeAll+0x124>)
 8008f96:	6013      	str	r3, [r2, #0]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4a27      	ldr	r2, [pc, #156]	@ (8009044 <xTaskResumeAll+0x128>)
 8008fa6:	441a      	add	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	3304      	adds	r3, #4
 8008fac:	4619      	mov	r1, r3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	f7ff fcd0 	bl	8008954 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fb8:	4b23      	ldr	r3, [pc, #140]	@ (8009048 <xTaskResumeAll+0x12c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d302      	bcc.n	8008fc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008fc2:	4b22      	ldr	r3, [pc, #136]	@ (800904c <xTaskResumeAll+0x130>)
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800903c <xTaskResumeAll+0x120>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1cc      	bne.n	8008f6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008fd6:	f000 fa27 	bl	8009428 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008fda:	4b1d      	ldr	r3, [pc, #116]	@ (8009050 <xTaskResumeAll+0x134>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d010      	beq.n	8009008 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008fe6:	f000 f837 	bl	8009058 <xTaskIncrementTick>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008ff0:	4b16      	ldr	r3, [pc, #88]	@ (800904c <xTaskResumeAll+0x130>)
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1f1      	bne.n	8008fe6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009002:	4b13      	ldr	r3, [pc, #76]	@ (8009050 <xTaskResumeAll+0x134>)
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009008:	4b10      	ldr	r3, [pc, #64]	@ (800904c <xTaskResumeAll+0x130>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d009      	beq.n	8009024 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009010:	2301      	movs	r3, #1
 8009012:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009014:	4b0f      	ldr	r3, [pc, #60]	@ (8009054 <xTaskResumeAll+0x138>)
 8009016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800901a:	601a      	str	r2, [r3, #0]
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009024:	f000 fbea 	bl	80097fc <vPortExitCritical>

	return xAlreadyYielded;
 8009028:	68bb      	ldr	r3, [r7, #8]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	200009ec 	.word	0x200009ec
 8009038:	200009c4 	.word	0x200009c4
 800903c:	20000984 	.word	0x20000984
 8009040:	200009cc 	.word	0x200009cc
 8009044:	200008c8 	.word	0x200008c8
 8009048:	200008c4 	.word	0x200008c4
 800904c:	200009d8 	.word	0x200009d8
 8009050:	200009d4 	.word	0x200009d4
 8009054:	e000ed04 	.word	0xe000ed04

08009058 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800905e:	2300      	movs	r3, #0
 8009060:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009062:	4b4f      	ldr	r3, [pc, #316]	@ (80091a0 <xTaskIncrementTick+0x148>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	f040 808f 	bne.w	800918a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800906c:	4b4d      	ldr	r3, [pc, #308]	@ (80091a4 <xTaskIncrementTick+0x14c>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3301      	adds	r3, #1
 8009072:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009074:	4a4b      	ldr	r2, [pc, #300]	@ (80091a4 <xTaskIncrementTick+0x14c>)
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d121      	bne.n	80090c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009080:	4b49      	ldr	r3, [pc, #292]	@ (80091a8 <xTaskIncrementTick+0x150>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00b      	beq.n	80090a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	603b      	str	r3, [r7, #0]
}
 800909c:	bf00      	nop
 800909e:	bf00      	nop
 80090a0:	e7fd      	b.n	800909e <xTaskIncrementTick+0x46>
 80090a2:	4b41      	ldr	r3, [pc, #260]	@ (80091a8 <xTaskIncrementTick+0x150>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	4b40      	ldr	r3, [pc, #256]	@ (80091ac <xTaskIncrementTick+0x154>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a3e      	ldr	r2, [pc, #248]	@ (80091a8 <xTaskIncrementTick+0x150>)
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	4a3e      	ldr	r2, [pc, #248]	@ (80091ac <xTaskIncrementTick+0x154>)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	4b3e      	ldr	r3, [pc, #248]	@ (80091b0 <xTaskIncrementTick+0x158>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3301      	adds	r3, #1
 80090bc:	4a3c      	ldr	r2, [pc, #240]	@ (80091b0 <xTaskIncrementTick+0x158>)
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	f000 f9b2 	bl	8009428 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090c4:	4b3b      	ldr	r3, [pc, #236]	@ (80091b4 <xTaskIncrementTick+0x15c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d348      	bcc.n	8009160 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ce:	4b36      	ldr	r3, [pc, #216]	@ (80091a8 <xTaskIncrementTick+0x150>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d104      	bne.n	80090e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090d8:	4b36      	ldr	r3, [pc, #216]	@ (80091b4 <xTaskIncrementTick+0x15c>)
 80090da:	f04f 32ff 	mov.w	r2, #4294967295
 80090de:	601a      	str	r2, [r3, #0]
					break;
 80090e0:	e03e      	b.n	8009160 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090e2:	4b31      	ldr	r3, [pc, #196]	@ (80091a8 <xTaskIncrementTick+0x150>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d203      	bcs.n	8009102 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090fa:	4a2e      	ldr	r2, [pc, #184]	@ (80091b4 <xTaskIncrementTick+0x15c>)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009100:	e02e      	b.n	8009160 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	3304      	adds	r3, #4
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fc81 	bl	8008a0e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009110:	2b00      	cmp	r3, #0
 8009112:	d004      	beq.n	800911e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	3318      	adds	r3, #24
 8009118:	4618      	mov	r0, r3
 800911a:	f7ff fc78 	bl	8008a0e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009122:	2201      	movs	r2, #1
 8009124:	409a      	lsls	r2, r3
 8009126:	4b24      	ldr	r3, [pc, #144]	@ (80091b8 <xTaskIncrementTick+0x160>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4313      	orrs	r3, r2
 800912c:	4a22      	ldr	r2, [pc, #136]	@ (80091b8 <xTaskIncrementTick+0x160>)
 800912e:	6013      	str	r3, [r2, #0]
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009134:	4613      	mov	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4a1f      	ldr	r2, [pc, #124]	@ (80091bc <xTaskIncrementTick+0x164>)
 800913e:	441a      	add	r2, r3
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	3304      	adds	r3, #4
 8009144:	4619      	mov	r1, r3
 8009146:	4610      	mov	r0, r2
 8009148:	f7ff fc04 	bl	8008954 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009150:	4b1b      	ldr	r3, [pc, #108]	@ (80091c0 <xTaskIncrementTick+0x168>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009156:	429a      	cmp	r2, r3
 8009158:	d3b9      	bcc.n	80090ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800915a:	2301      	movs	r3, #1
 800915c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800915e:	e7b6      	b.n	80090ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009160:	4b17      	ldr	r3, [pc, #92]	@ (80091c0 <xTaskIncrementTick+0x168>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009166:	4915      	ldr	r1, [pc, #84]	@ (80091bc <xTaskIncrementTick+0x164>)
 8009168:	4613      	mov	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4413      	add	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	440b      	add	r3, r1
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d901      	bls.n	800917c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009178:	2301      	movs	r3, #1
 800917a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800917c:	4b11      	ldr	r3, [pc, #68]	@ (80091c4 <xTaskIncrementTick+0x16c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d007      	beq.n	8009194 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009184:	2301      	movs	r3, #1
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	e004      	b.n	8009194 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800918a:	4b0f      	ldr	r3, [pc, #60]	@ (80091c8 <xTaskIncrementTick+0x170>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3301      	adds	r3, #1
 8009190:	4a0d      	ldr	r2, [pc, #52]	@ (80091c8 <xTaskIncrementTick+0x170>)
 8009192:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009194:	697b      	ldr	r3, [r7, #20]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3718      	adds	r7, #24
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	200009ec 	.word	0x200009ec
 80091a4:	200009c8 	.word	0x200009c8
 80091a8:	2000097c 	.word	0x2000097c
 80091ac:	20000980 	.word	0x20000980
 80091b0:	200009dc 	.word	0x200009dc
 80091b4:	200009e4 	.word	0x200009e4
 80091b8:	200009cc 	.word	0x200009cc
 80091bc:	200008c8 	.word	0x200008c8
 80091c0:	200008c4 	.word	0x200008c4
 80091c4:	200009d8 	.word	0x200009d8
 80091c8:	200009d4 	.word	0x200009d4

080091cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091d2:	4b31      	ldr	r3, [pc, #196]	@ (8009298 <vTaskSwitchContext+0xcc>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d003      	beq.n	80091e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091da:	4b30      	ldr	r3, [pc, #192]	@ (800929c <vTaskSwitchContext+0xd0>)
 80091dc:	2201      	movs	r2, #1
 80091de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091e0:	e056      	b.n	8009290 <vTaskSwitchContext+0xc4>
		xYieldPending = pdFALSE;
 80091e2:	4b2e      	ldr	r3, [pc, #184]	@ (800929c <vTaskSwitchContext+0xd0>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80091e8:	4b2d      	ldr	r3, [pc, #180]	@ (80092a0 <vTaskSwitchContext+0xd4>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	4b2c      	ldr	r3, [pc, #176]	@ (80092a0 <vTaskSwitchContext+0xd4>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d808      	bhi.n	800920a <vTaskSwitchContext+0x3e>
 80091f8:	4b29      	ldr	r3, [pc, #164]	@ (80092a0 <vTaskSwitchContext+0xd4>)
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	4b28      	ldr	r3, [pc, #160]	@ (80092a0 <vTaskSwitchContext+0xd4>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3334      	adds	r3, #52	@ 0x34
 8009202:	4619      	mov	r1, r3
 8009204:	4610      	mov	r0, r2
 8009206:	f7f8 fbfd 	bl	8001a04 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800920a:	4b26      	ldr	r3, [pc, #152]	@ (80092a4 <vTaskSwitchContext+0xd8>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	fab3 f383 	clz	r3, r3
 8009216:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009218:	7afb      	ldrb	r3, [r7, #11]
 800921a:	f1c3 031f 	rsb	r3, r3, #31
 800921e:	617b      	str	r3, [r7, #20]
 8009220:	4921      	ldr	r1, [pc, #132]	@ (80092a8 <vTaskSwitchContext+0xdc>)
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	4613      	mov	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	440b      	add	r3, r1
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10b      	bne.n	800924c <vTaskSwitchContext+0x80>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	607b      	str	r3, [r7, #4]
}
 8009246:	bf00      	nop
 8009248:	bf00      	nop
 800924a:	e7fd      	b.n	8009248 <vTaskSwitchContext+0x7c>
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	4613      	mov	r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	4413      	add	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4a14      	ldr	r2, [pc, #80]	@ (80092a8 <vTaskSwitchContext+0xdc>)
 8009258:	4413      	add	r3, r2
 800925a:	613b      	str	r3, [r7, #16]
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	685a      	ldr	r2, [r3, #4]
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	605a      	str	r2, [r3, #4]
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	3308      	adds	r3, #8
 800926e:	429a      	cmp	r2, r3
 8009270:	d104      	bne.n	800927c <vTaskSwitchContext+0xb0>
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	605a      	str	r2, [r3, #4]
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	4a07      	ldr	r2, [pc, #28]	@ (80092a0 <vTaskSwitchContext+0xd4>)
 8009284:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009286:	4b06      	ldr	r3, [pc, #24]	@ (80092a0 <vTaskSwitchContext+0xd4>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	334c      	adds	r3, #76	@ 0x4c
 800928c:	4a07      	ldr	r2, [pc, #28]	@ (80092ac <vTaskSwitchContext+0xe0>)
 800928e:	6013      	str	r3, [r2, #0]
}
 8009290:	bf00      	nop
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	200009ec 	.word	0x200009ec
 800929c:	200009d8 	.word	0x200009d8
 80092a0:	200008c4 	.word	0x200008c4
 80092a4:	200009cc 	.word	0x200009cc
 80092a8:	200008c8 	.word	0x200008c8
 80092ac:	2000001c 	.word	0x2000001c

080092b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80092b8:	f000 f852 	bl	8009360 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092bc:	4b06      	ldr	r3, [pc, #24]	@ (80092d8 <prvIdleTask+0x28>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d9f9      	bls.n	80092b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80092c4:	4b05      	ldr	r3, [pc, #20]	@ (80092dc <prvIdleTask+0x2c>)
 80092c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092ca:	601a      	str	r2, [r3, #0]
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80092d4:	e7f0      	b.n	80092b8 <prvIdleTask+0x8>
 80092d6:	bf00      	nop
 80092d8:	200008c8 	.word	0x200008c8
 80092dc:	e000ed04 	.word	0xe000ed04

080092e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092e6:	2300      	movs	r3, #0
 80092e8:	607b      	str	r3, [r7, #4]
 80092ea:	e00c      	b.n	8009306 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	4613      	mov	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4a12      	ldr	r2, [pc, #72]	@ (8009340 <prvInitialiseTaskLists+0x60>)
 80092f8:	4413      	add	r3, r2
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7ff fafd 	bl	80088fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	3301      	adds	r3, #1
 8009304:	607b      	str	r3, [r7, #4]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b06      	cmp	r3, #6
 800930a:	d9ef      	bls.n	80092ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800930c:	480d      	ldr	r0, [pc, #52]	@ (8009344 <prvInitialiseTaskLists+0x64>)
 800930e:	f7ff faf4 	bl	80088fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009312:	480d      	ldr	r0, [pc, #52]	@ (8009348 <prvInitialiseTaskLists+0x68>)
 8009314:	f7ff faf1 	bl	80088fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009318:	480c      	ldr	r0, [pc, #48]	@ (800934c <prvInitialiseTaskLists+0x6c>)
 800931a:	f7ff faee 	bl	80088fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800931e:	480c      	ldr	r0, [pc, #48]	@ (8009350 <prvInitialiseTaskLists+0x70>)
 8009320:	f7ff faeb 	bl	80088fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009324:	480b      	ldr	r0, [pc, #44]	@ (8009354 <prvInitialiseTaskLists+0x74>)
 8009326:	f7ff fae8 	bl	80088fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800932a:	4b0b      	ldr	r3, [pc, #44]	@ (8009358 <prvInitialiseTaskLists+0x78>)
 800932c:	4a05      	ldr	r2, [pc, #20]	@ (8009344 <prvInitialiseTaskLists+0x64>)
 800932e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009330:	4b0a      	ldr	r3, [pc, #40]	@ (800935c <prvInitialiseTaskLists+0x7c>)
 8009332:	4a05      	ldr	r2, [pc, #20]	@ (8009348 <prvInitialiseTaskLists+0x68>)
 8009334:	601a      	str	r2, [r3, #0]
}
 8009336:	bf00      	nop
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	200008c8 	.word	0x200008c8
 8009344:	20000954 	.word	0x20000954
 8009348:	20000968 	.word	0x20000968
 800934c:	20000984 	.word	0x20000984
 8009350:	20000998 	.word	0x20000998
 8009354:	200009b0 	.word	0x200009b0
 8009358:	2000097c 	.word	0x2000097c
 800935c:	20000980 	.word	0x20000980

08009360 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009366:	e019      	b.n	800939c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009368:	f000 fa16 	bl	8009798 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800936c:	4b10      	ldr	r3, [pc, #64]	@ (80093b0 <prvCheckTasksWaitingTermination+0x50>)
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	3304      	adds	r3, #4
 8009378:	4618      	mov	r0, r3
 800937a:	f7ff fb48 	bl	8008a0e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800937e:	4b0d      	ldr	r3, [pc, #52]	@ (80093b4 <prvCheckTasksWaitingTermination+0x54>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3b01      	subs	r3, #1
 8009384:	4a0b      	ldr	r2, [pc, #44]	@ (80093b4 <prvCheckTasksWaitingTermination+0x54>)
 8009386:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009388:	4b0b      	ldr	r3, [pc, #44]	@ (80093b8 <prvCheckTasksWaitingTermination+0x58>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3b01      	subs	r3, #1
 800938e:	4a0a      	ldr	r2, [pc, #40]	@ (80093b8 <prvCheckTasksWaitingTermination+0x58>)
 8009390:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009392:	f000 fa33 	bl	80097fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f810 	bl	80093bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800939c:	4b06      	ldr	r3, [pc, #24]	@ (80093b8 <prvCheckTasksWaitingTermination+0x58>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e1      	bne.n	8009368 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	20000998 	.word	0x20000998
 80093b4:	200009c4 	.word	0x200009c4
 80093b8:	200009ac 	.word	0x200009ac

080093bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	334c      	adds	r3, #76	@ 0x4c
 80093c8:	4618      	mov	r0, r3
 80093ca:	f001 fd03 	bl	800add4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d108      	bne.n	80093ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 fb89 	bl	8009af4 <vPortFree>
				vPortFree( pxTCB );
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fb86 	bl	8009af4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093e8:	e019      	b.n	800941e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d103      	bne.n	80093fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fb7d 	bl	8009af4 <vPortFree>
	}
 80093fa:	e010      	b.n	800941e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009402:	2b02      	cmp	r3, #2
 8009404:	d00b      	beq.n	800941e <prvDeleteTCB+0x62>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	60fb      	str	r3, [r7, #12]
}
 8009418:	bf00      	nop
 800941a:	bf00      	nop
 800941c:	e7fd      	b.n	800941a <prvDeleteTCB+0x5e>
	}
 800941e:	bf00      	nop
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800942e:	4b0c      	ldr	r3, [pc, #48]	@ (8009460 <prvResetNextTaskUnblockTime+0x38>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d104      	bne.n	8009442 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009438:	4b0a      	ldr	r3, [pc, #40]	@ (8009464 <prvResetNextTaskUnblockTime+0x3c>)
 800943a:	f04f 32ff 	mov.w	r2, #4294967295
 800943e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009440:	e008      	b.n	8009454 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009442:	4b07      	ldr	r3, [pc, #28]	@ (8009460 <prvResetNextTaskUnblockTime+0x38>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	4a04      	ldr	r2, [pc, #16]	@ (8009464 <prvResetNextTaskUnblockTime+0x3c>)
 8009452:	6013      	str	r3, [r2, #0]
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	2000097c 	.word	0x2000097c
 8009464:	200009e4 	.word	0x200009e4

08009468 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009472:	4b29      	ldr	r3, [pc, #164]	@ (8009518 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009478:	4b28      	ldr	r3, [pc, #160]	@ (800951c <prvAddCurrentTaskToDelayedList+0xb4>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3304      	adds	r3, #4
 800947e:	4618      	mov	r0, r3
 8009480:	f7ff fac5 	bl	8008a0e <uxListRemove>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d10b      	bne.n	80094a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800948a:	4b24      	ldr	r3, [pc, #144]	@ (800951c <prvAddCurrentTaskToDelayedList+0xb4>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009490:	2201      	movs	r2, #1
 8009492:	fa02 f303 	lsl.w	r3, r2, r3
 8009496:	43da      	mvns	r2, r3
 8009498:	4b21      	ldr	r3, [pc, #132]	@ (8009520 <prvAddCurrentTaskToDelayedList+0xb8>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4013      	ands	r3, r2
 800949e:	4a20      	ldr	r2, [pc, #128]	@ (8009520 <prvAddCurrentTaskToDelayedList+0xb8>)
 80094a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a8:	d10a      	bne.n	80094c0 <prvAddCurrentTaskToDelayedList+0x58>
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d007      	beq.n	80094c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094b0:	4b1a      	ldr	r3, [pc, #104]	@ (800951c <prvAddCurrentTaskToDelayedList+0xb4>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3304      	adds	r3, #4
 80094b6:	4619      	mov	r1, r3
 80094b8:	481a      	ldr	r0, [pc, #104]	@ (8009524 <prvAddCurrentTaskToDelayedList+0xbc>)
 80094ba:	f7ff fa4b 	bl	8008954 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094be:	e026      	b.n	800950e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4413      	add	r3, r2
 80094c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094c8:	4b14      	ldr	r3, [pc, #80]	@ (800951c <prvAddCurrentTaskToDelayedList+0xb4>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d209      	bcs.n	80094ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094d8:	4b13      	ldr	r3, [pc, #76]	@ (8009528 <prvAddCurrentTaskToDelayedList+0xc0>)
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	4b0f      	ldr	r3, [pc, #60]	@ (800951c <prvAddCurrentTaskToDelayedList+0xb4>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4619      	mov	r1, r3
 80094e4:	4610      	mov	r0, r2
 80094e6:	f7ff fa59 	bl	800899c <vListInsert>
}
 80094ea:	e010      	b.n	800950e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094ec:	4b0f      	ldr	r3, [pc, #60]	@ (800952c <prvAddCurrentTaskToDelayedList+0xc4>)
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	4b0a      	ldr	r3, [pc, #40]	@ (800951c <prvAddCurrentTaskToDelayedList+0xb4>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3304      	adds	r3, #4
 80094f6:	4619      	mov	r1, r3
 80094f8:	4610      	mov	r0, r2
 80094fa:	f7ff fa4f 	bl	800899c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009530 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	429a      	cmp	r2, r3
 8009506:	d202      	bcs.n	800950e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009508:	4a09      	ldr	r2, [pc, #36]	@ (8009530 <prvAddCurrentTaskToDelayedList+0xc8>)
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	6013      	str	r3, [r2, #0]
}
 800950e:	bf00      	nop
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	200009c8 	.word	0x200009c8
 800951c:	200008c4 	.word	0x200008c4
 8009520:	200009cc 	.word	0x200009cc
 8009524:	200009b0 	.word	0x200009b0
 8009528:	20000980 	.word	0x20000980
 800952c:	2000097c 	.word	0x2000097c
 8009530:	200009e4 	.word	0x200009e4

08009534 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3b04      	subs	r3, #4
 8009544:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800954c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3b04      	subs	r3, #4
 8009552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	f023 0201 	bic.w	r2, r3, #1
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	3b04      	subs	r3, #4
 8009562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009564:	4a0c      	ldr	r2, [pc, #48]	@ (8009598 <pxPortInitialiseStack+0x64>)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3b14      	subs	r3, #20
 800956e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	3b04      	subs	r3, #4
 800957a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f06f 0202 	mvn.w	r2, #2
 8009582:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	3b20      	subs	r3, #32
 8009588:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800958a:	68fb      	ldr	r3, [r7, #12]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	0800959d 	.word	0x0800959d

0800959c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80095a2:	2300      	movs	r3, #0
 80095a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80095a6:	4b13      	ldr	r3, [pc, #76]	@ (80095f4 <prvTaskExitError+0x58>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ae:	d00b      	beq.n	80095c8 <prvTaskExitError+0x2c>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	60fb      	str	r3, [r7, #12]
}
 80095c2:	bf00      	nop
 80095c4:	bf00      	nop
 80095c6:	e7fd      	b.n	80095c4 <prvTaskExitError+0x28>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	60bb      	str	r3, [r7, #8]
}
 80095da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80095dc:	bf00      	nop
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d0fc      	beq.n	80095de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	2000000c 	.word	0x2000000c
	...

08009600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009600:	4b07      	ldr	r3, [pc, #28]	@ (8009620 <pxCurrentTCBConst2>)
 8009602:	6819      	ldr	r1, [r3, #0]
 8009604:	6808      	ldr	r0, [r1, #0]
 8009606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960a:	f380 8809 	msr	PSP, r0
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f04f 0000 	mov.w	r0, #0
 8009616:	f380 8811 	msr	BASEPRI, r0
 800961a:	4770      	bx	lr
 800961c:	f3af 8000 	nop.w

08009620 <pxCurrentTCBConst2>:
 8009620:	200008c4 	.word	0x200008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009624:	bf00      	nop
 8009626:	bf00      	nop

08009628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009628:	4808      	ldr	r0, [pc, #32]	@ (800964c <prvPortStartFirstTask+0x24>)
 800962a:	6800      	ldr	r0, [r0, #0]
 800962c:	6800      	ldr	r0, [r0, #0]
 800962e:	f380 8808 	msr	MSP, r0
 8009632:	f04f 0000 	mov.w	r0, #0
 8009636:	f380 8814 	msr	CONTROL, r0
 800963a:	b662      	cpsie	i
 800963c:	b661      	cpsie	f
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	df00      	svc	0
 8009648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800964a:	bf00      	nop
 800964c:	e000ed08 	.word	0xe000ed08

08009650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b086      	sub	sp, #24
 8009654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009656:	4b47      	ldr	r3, [pc, #284]	@ (8009774 <xPortStartScheduler+0x124>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a47      	ldr	r2, [pc, #284]	@ (8009778 <xPortStartScheduler+0x128>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d10b      	bne.n	8009678 <xPortStartScheduler+0x28>
	__asm volatile
 8009660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	613b      	str	r3, [r7, #16]
}
 8009672:	bf00      	nop
 8009674:	bf00      	nop
 8009676:	e7fd      	b.n	8009674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009678:	4b3e      	ldr	r3, [pc, #248]	@ (8009774 <xPortStartScheduler+0x124>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a3f      	ldr	r2, [pc, #252]	@ (800977c <xPortStartScheduler+0x12c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d10b      	bne.n	800969a <xPortStartScheduler+0x4a>
	__asm volatile
 8009682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	60fb      	str	r3, [r7, #12]
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop
 8009698:	e7fd      	b.n	8009696 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800969a:	4b39      	ldr	r3, [pc, #228]	@ (8009780 <xPortStartScheduler+0x130>)
 800969c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	22ff      	movs	r2, #255	@ 0xff
 80096aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80096b4:	78fb      	ldrb	r3, [r7, #3]
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	4b31      	ldr	r3, [pc, #196]	@ (8009784 <xPortStartScheduler+0x134>)
 80096c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80096c2:	4b31      	ldr	r3, [pc, #196]	@ (8009788 <xPortStartScheduler+0x138>)
 80096c4:	2207      	movs	r2, #7
 80096c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096c8:	e009      	b.n	80096de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80096ca:	4b2f      	ldr	r3, [pc, #188]	@ (8009788 <xPortStartScheduler+0x138>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	3b01      	subs	r3, #1
 80096d0:	4a2d      	ldr	r2, [pc, #180]	@ (8009788 <xPortStartScheduler+0x138>)
 80096d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80096d4:	78fb      	ldrb	r3, [r7, #3]
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096de:	78fb      	ldrb	r3, [r7, #3]
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096e6:	2b80      	cmp	r3, #128	@ 0x80
 80096e8:	d0ef      	beq.n	80096ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80096ea:	4b27      	ldr	r3, [pc, #156]	@ (8009788 <xPortStartScheduler+0x138>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f1c3 0307 	rsb	r3, r3, #7
 80096f2:	2b04      	cmp	r3, #4
 80096f4:	d00b      	beq.n	800970e <xPortStartScheduler+0xbe>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	60bb      	str	r3, [r7, #8]
}
 8009708:	bf00      	nop
 800970a:	bf00      	nop
 800970c:	e7fd      	b.n	800970a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800970e:	4b1e      	ldr	r3, [pc, #120]	@ (8009788 <xPortStartScheduler+0x138>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	4a1c      	ldr	r2, [pc, #112]	@ (8009788 <xPortStartScheduler+0x138>)
 8009716:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009718:	4b1b      	ldr	r3, [pc, #108]	@ (8009788 <xPortStartScheduler+0x138>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009720:	4a19      	ldr	r2, [pc, #100]	@ (8009788 <xPortStartScheduler+0x138>)
 8009722:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	b2da      	uxtb	r2, r3
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800972c:	4b17      	ldr	r3, [pc, #92]	@ (800978c <xPortStartScheduler+0x13c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a16      	ldr	r2, [pc, #88]	@ (800978c <xPortStartScheduler+0x13c>)
 8009732:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009736:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009738:	4b14      	ldr	r3, [pc, #80]	@ (800978c <xPortStartScheduler+0x13c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a13      	ldr	r2, [pc, #76]	@ (800978c <xPortStartScheduler+0x13c>)
 800973e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009742:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009744:	f000 f8da 	bl	80098fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009748:	4b11      	ldr	r3, [pc, #68]	@ (8009790 <xPortStartScheduler+0x140>)
 800974a:	2200      	movs	r2, #0
 800974c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800974e:	f000 f8f9 	bl	8009944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009752:	4b10      	ldr	r3, [pc, #64]	@ (8009794 <xPortStartScheduler+0x144>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a0f      	ldr	r2, [pc, #60]	@ (8009794 <xPortStartScheduler+0x144>)
 8009758:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800975c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800975e:	f7ff ff63 	bl	8009628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009762:	f7ff fd33 	bl	80091cc <vTaskSwitchContext>
	prvTaskExitError();
 8009766:	f7ff ff19 	bl	800959c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3718      	adds	r7, #24
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	e000ed00 	.word	0xe000ed00
 8009778:	410fc271 	.word	0x410fc271
 800977c:	410fc270 	.word	0x410fc270
 8009780:	e000e400 	.word	0xe000e400
 8009784:	200009f0 	.word	0x200009f0
 8009788:	200009f4 	.word	0x200009f4
 800978c:	e000ed20 	.word	0xe000ed20
 8009790:	2000000c 	.word	0x2000000c
 8009794:	e000ef34 	.word	0xe000ef34

08009798 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	607b      	str	r3, [r7, #4]
}
 80097b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80097b2:	4b10      	ldr	r3, [pc, #64]	@ (80097f4 <vPortEnterCritical+0x5c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	3301      	adds	r3, #1
 80097b8:	4a0e      	ldr	r2, [pc, #56]	@ (80097f4 <vPortEnterCritical+0x5c>)
 80097ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80097bc:	4b0d      	ldr	r3, [pc, #52]	@ (80097f4 <vPortEnterCritical+0x5c>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d110      	bne.n	80097e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80097c4:	4b0c      	ldr	r3, [pc, #48]	@ (80097f8 <vPortEnterCritical+0x60>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00b      	beq.n	80097e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	603b      	str	r3, [r7, #0]
}
 80097e0:	bf00      	nop
 80097e2:	bf00      	nop
 80097e4:	e7fd      	b.n	80097e2 <vPortEnterCritical+0x4a>
	}
}
 80097e6:	bf00      	nop
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	2000000c 	.word	0x2000000c
 80097f8:	e000ed04 	.word	0xe000ed04

080097fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009802:	4b12      	ldr	r3, [pc, #72]	@ (800984c <vPortExitCritical+0x50>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10b      	bne.n	8009822 <vPortExitCritical+0x26>
	__asm volatile
 800980a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	607b      	str	r3, [r7, #4]
}
 800981c:	bf00      	nop
 800981e:	bf00      	nop
 8009820:	e7fd      	b.n	800981e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009822:	4b0a      	ldr	r3, [pc, #40]	@ (800984c <vPortExitCritical+0x50>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	3b01      	subs	r3, #1
 8009828:	4a08      	ldr	r2, [pc, #32]	@ (800984c <vPortExitCritical+0x50>)
 800982a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800982c:	4b07      	ldr	r3, [pc, #28]	@ (800984c <vPortExitCritical+0x50>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d105      	bne.n	8009840 <vPortExitCritical+0x44>
 8009834:	2300      	movs	r3, #0
 8009836:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800983e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	2000000c 	.word	0x2000000c

08009850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009850:	f3ef 8009 	mrs	r0, PSP
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	4b15      	ldr	r3, [pc, #84]	@ (80098b0 <pxCurrentTCBConst>)
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	f01e 0f10 	tst.w	lr, #16
 8009860:	bf08      	it	eq
 8009862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986a:	6010      	str	r0, [r2, #0]
 800986c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009870:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009874:	f380 8811 	msr	BASEPRI, r0
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f7ff fca4 	bl	80091cc <vTaskSwitchContext>
 8009884:	f04f 0000 	mov.w	r0, #0
 8009888:	f380 8811 	msr	BASEPRI, r0
 800988c:	bc09      	pop	{r0, r3}
 800988e:	6819      	ldr	r1, [r3, #0]
 8009890:	6808      	ldr	r0, [r1, #0]
 8009892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009896:	f01e 0f10 	tst.w	lr, #16
 800989a:	bf08      	it	eq
 800989c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80098a0:	f380 8809 	msr	PSP, r0
 80098a4:	f3bf 8f6f 	isb	sy
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	f3af 8000 	nop.w

080098b0 <pxCurrentTCBConst>:
 80098b0:	200008c4 	.word	0x200008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80098b4:	bf00      	nop
 80098b6:	bf00      	nop

080098b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	607b      	str	r3, [r7, #4]
}
 80098d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80098d2:	f7ff fbc1 	bl	8009058 <xTaskIncrementTick>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d003      	beq.n	80098e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80098dc:	4b06      	ldr	r3, [pc, #24]	@ (80098f8 <SysTick_Handler+0x40>)
 80098de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	2300      	movs	r3, #0
 80098e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	f383 8811 	msr	BASEPRI, r3
}
 80098ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	e000ed04 	.word	0xe000ed04

080098fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80098fc:	b480      	push	{r7}
 80098fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009900:	4b0b      	ldr	r3, [pc, #44]	@ (8009930 <vPortSetupTimerInterrupt+0x34>)
 8009902:	2200      	movs	r2, #0
 8009904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009906:	4b0b      	ldr	r3, [pc, #44]	@ (8009934 <vPortSetupTimerInterrupt+0x38>)
 8009908:	2200      	movs	r2, #0
 800990a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800990c:	4b0a      	ldr	r3, [pc, #40]	@ (8009938 <vPortSetupTimerInterrupt+0x3c>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a0a      	ldr	r2, [pc, #40]	@ (800993c <vPortSetupTimerInterrupt+0x40>)
 8009912:	fba2 2303 	umull	r2, r3, r2, r3
 8009916:	099b      	lsrs	r3, r3, #6
 8009918:	4a09      	ldr	r2, [pc, #36]	@ (8009940 <vPortSetupTimerInterrupt+0x44>)
 800991a:	3b01      	subs	r3, #1
 800991c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800991e:	4b04      	ldr	r3, [pc, #16]	@ (8009930 <vPortSetupTimerInterrupt+0x34>)
 8009920:	2207      	movs	r2, #7
 8009922:	601a      	str	r2, [r3, #0]
}
 8009924:	bf00      	nop
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	e000e010 	.word	0xe000e010
 8009934:	e000e018 	.word	0xe000e018
 8009938:	20000000 	.word	0x20000000
 800993c:	10624dd3 	.word	0x10624dd3
 8009940:	e000e014 	.word	0xe000e014

08009944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009944:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009954 <vPortEnableVFP+0x10>
 8009948:	6801      	ldr	r1, [r0, #0]
 800994a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800994e:	6001      	str	r1, [r0, #0]
 8009950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009952:	bf00      	nop
 8009954:	e000ed88 	.word	0xe000ed88

08009958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b08a      	sub	sp, #40	@ 0x28
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009960:	2300      	movs	r3, #0
 8009962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009964:	f7ff facc 	bl	8008f00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009968:	4b5c      	ldr	r3, [pc, #368]	@ (8009adc <pvPortMalloc+0x184>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009970:	f000 f924 	bl	8009bbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009974:	4b5a      	ldr	r3, [pc, #360]	@ (8009ae0 <pvPortMalloc+0x188>)
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4013      	ands	r3, r2
 800997c:	2b00      	cmp	r3, #0
 800997e:	f040 8095 	bne.w	8009aac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d01e      	beq.n	80099c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009988:	2208      	movs	r2, #8
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4413      	add	r3, r2
 800998e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f003 0307 	and.w	r3, r3, #7
 8009996:	2b00      	cmp	r3, #0
 8009998:	d015      	beq.n	80099c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f023 0307 	bic.w	r3, r3, #7
 80099a0:	3308      	adds	r3, #8
 80099a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f003 0307 	and.w	r3, r3, #7
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00b      	beq.n	80099c6 <pvPortMalloc+0x6e>
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	617b      	str	r3, [r7, #20]
}
 80099c0:	bf00      	nop
 80099c2:	bf00      	nop
 80099c4:	e7fd      	b.n	80099c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d06f      	beq.n	8009aac <pvPortMalloc+0x154>
 80099cc:	4b45      	ldr	r3, [pc, #276]	@ (8009ae4 <pvPortMalloc+0x18c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d86a      	bhi.n	8009aac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80099d6:	4b44      	ldr	r3, [pc, #272]	@ (8009ae8 <pvPortMalloc+0x190>)
 80099d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80099da:	4b43      	ldr	r3, [pc, #268]	@ (8009ae8 <pvPortMalloc+0x190>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099e0:	e004      	b.n	80099ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80099e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d903      	bls.n	80099fe <pvPortMalloc+0xa6>
 80099f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1f1      	bne.n	80099e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099fe:	4b37      	ldr	r3, [pc, #220]	@ (8009adc <pvPortMalloc+0x184>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d051      	beq.n	8009aac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2208      	movs	r2, #8
 8009a0e:	4413      	add	r3, r2
 8009a10:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	6a3b      	ldr	r3, [r7, #32]
 8009a18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a1c:	685a      	ldr	r2, [r3, #4]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	1ad2      	subs	r2, r2, r3
 8009a22:	2308      	movs	r3, #8
 8009a24:	005b      	lsls	r3, r3, #1
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d920      	bls.n	8009a6c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4413      	add	r3, r2
 8009a30:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	f003 0307 	and.w	r3, r3, #7
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00b      	beq.n	8009a54 <pvPortMalloc+0xfc>
	__asm volatile
 8009a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a40:	f383 8811 	msr	BASEPRI, r3
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	613b      	str	r3, [r7, #16]
}
 8009a4e:	bf00      	nop
 8009a50:	bf00      	nop
 8009a52:	e7fd      	b.n	8009a50 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	1ad2      	subs	r2, r2, r3
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a66:	69b8      	ldr	r0, [r7, #24]
 8009a68:	f000 f90a 	bl	8009c80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8009ae4 <pvPortMalloc+0x18c>)
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	4a1b      	ldr	r2, [pc, #108]	@ (8009ae4 <pvPortMalloc+0x18c>)
 8009a78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8009ae4 <pvPortMalloc+0x18c>)
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8009aec <pvPortMalloc+0x194>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d203      	bcs.n	8009a8e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a86:	4b17      	ldr	r3, [pc, #92]	@ (8009ae4 <pvPortMalloc+0x18c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a18      	ldr	r2, [pc, #96]	@ (8009aec <pvPortMalloc+0x194>)
 8009a8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a90:	685a      	ldr	r2, [r3, #4]
 8009a92:	4b13      	ldr	r3, [pc, #76]	@ (8009ae0 <pvPortMalloc+0x188>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	431a      	orrs	r2, r3
 8009a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009aa2:	4b13      	ldr	r3, [pc, #76]	@ (8009af0 <pvPortMalloc+0x198>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	4a11      	ldr	r2, [pc, #68]	@ (8009af0 <pvPortMalloc+0x198>)
 8009aaa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009aac:	f7ff fa36 	bl	8008f1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	f003 0307 	and.w	r3, r3, #7
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00b      	beq.n	8009ad2 <pvPortMalloc+0x17a>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	60fb      	str	r3, [r7, #12]
}
 8009acc:	bf00      	nop
 8009ace:	bf00      	nop
 8009ad0:	e7fd      	b.n	8009ace <pvPortMalloc+0x176>
	return pvReturn;
 8009ad2:	69fb      	ldr	r3, [r7, #28]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3728      	adds	r7, #40	@ 0x28
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	20004600 	.word	0x20004600
 8009ae0:	20004614 	.word	0x20004614
 8009ae4:	20004604 	.word	0x20004604
 8009ae8:	200045f8 	.word	0x200045f8
 8009aec:	20004608 	.word	0x20004608
 8009af0:	2000460c 	.word	0x2000460c

08009af4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d04f      	beq.n	8009ba6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b06:	2308      	movs	r3, #8
 8009b08:	425b      	negs	r3, r3
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	685a      	ldr	r2, [r3, #4]
 8009b18:	4b25      	ldr	r3, [pc, #148]	@ (8009bb0 <vPortFree+0xbc>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10b      	bne.n	8009b3a <vPortFree+0x46>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	60fb      	str	r3, [r7, #12]
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop
 8009b38:	e7fd      	b.n	8009b36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00b      	beq.n	8009b5a <vPortFree+0x66>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	60bb      	str	r3, [r7, #8]
}
 8009b54:	bf00      	nop
 8009b56:	bf00      	nop
 8009b58:	e7fd      	b.n	8009b56 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	4b14      	ldr	r3, [pc, #80]	@ (8009bb0 <vPortFree+0xbc>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4013      	ands	r3, r2
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d01e      	beq.n	8009ba6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d11a      	bne.n	8009ba6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	4b0e      	ldr	r3, [pc, #56]	@ (8009bb0 <vPortFree+0xbc>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	43db      	mvns	r3, r3
 8009b7a:	401a      	ands	r2, r3
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b80:	f7ff f9be 	bl	8008f00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	4b0a      	ldr	r3, [pc, #40]	@ (8009bb4 <vPortFree+0xc0>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	4a09      	ldr	r2, [pc, #36]	@ (8009bb4 <vPortFree+0xc0>)
 8009b90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b92:	6938      	ldr	r0, [r7, #16]
 8009b94:	f000 f874 	bl	8009c80 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b98:	4b07      	ldr	r3, [pc, #28]	@ (8009bb8 <vPortFree+0xc4>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	4a06      	ldr	r2, [pc, #24]	@ (8009bb8 <vPortFree+0xc4>)
 8009ba0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009ba2:	f7ff f9bb 	bl	8008f1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ba6:	bf00      	nop
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20004614 	.word	0x20004614
 8009bb4:	20004604 	.word	0x20004604
 8009bb8:	20004610 	.word	0x20004610

08009bbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009bc2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009bc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009bc8:	4b27      	ldr	r3, [pc, #156]	@ (8009c68 <prvHeapInit+0xac>)
 8009bca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f003 0307 	and.w	r3, r3, #7
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00c      	beq.n	8009bf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3307      	adds	r3, #7
 8009bda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f023 0307 	bic.w	r3, r3, #7
 8009be2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	4a1f      	ldr	r2, [pc, #124]	@ (8009c68 <prvHeapInit+0xac>)
 8009bec:	4413      	add	r3, r2
 8009bee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8009c6c <prvHeapInit+0xb0>)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8009c6c <prvHeapInit+0xb0>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	4413      	add	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c08:	2208      	movs	r2, #8
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	1a9b      	subs	r3, r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f023 0307 	bic.w	r3, r3, #7
 8009c16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	4a15      	ldr	r2, [pc, #84]	@ (8009c70 <prvHeapInit+0xb4>)
 8009c1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c1e:	4b14      	ldr	r3, [pc, #80]	@ (8009c70 <prvHeapInit+0xb4>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2200      	movs	r2, #0
 8009c24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c26:	4b12      	ldr	r3, [pc, #72]	@ (8009c70 <prvHeapInit+0xb4>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	1ad2      	subs	r2, r2, r3
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8009c70 <prvHeapInit+0xb4>)
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	4a0a      	ldr	r2, [pc, #40]	@ (8009c74 <prvHeapInit+0xb8>)
 8009c4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	4a09      	ldr	r2, [pc, #36]	@ (8009c78 <prvHeapInit+0xbc>)
 8009c52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c54:	4b09      	ldr	r3, [pc, #36]	@ (8009c7c <prvHeapInit+0xc0>)
 8009c56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009c5a:	601a      	str	r2, [r3, #0]
}
 8009c5c:	bf00      	nop
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	200009f8 	.word	0x200009f8
 8009c6c:	200045f8 	.word	0x200045f8
 8009c70:	20004600 	.word	0x20004600
 8009c74:	20004608 	.word	0x20004608
 8009c78:	20004604 	.word	0x20004604
 8009c7c:	20004614 	.word	0x20004614

08009c80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c88:	4b28      	ldr	r3, [pc, #160]	@ (8009d2c <prvInsertBlockIntoFreeList+0xac>)
 8009c8a:	60fb      	str	r3, [r7, #12]
 8009c8c:	e002      	b.n	8009c94 <prvInsertBlockIntoFreeList+0x14>
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d8f7      	bhi.n	8009c8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	4413      	add	r3, r2
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d108      	bne.n	8009cc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	685a      	ldr	r2, [r3, #4]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	441a      	add	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	441a      	add	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d118      	bne.n	8009d08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	4b15      	ldr	r3, [pc, #84]	@ (8009d30 <prvInsertBlockIntoFreeList+0xb0>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d00d      	beq.n	8009cfe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	441a      	add	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	601a      	str	r2, [r3, #0]
 8009cfc:	e008      	b.n	8009d10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8009d30 <prvInsertBlockIntoFreeList+0xb0>)
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	601a      	str	r2, [r3, #0]
 8009d06:	e003      	b.n	8009d10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d002      	beq.n	8009d1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d1e:	bf00      	nop
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	200045f8 	.word	0x200045f8
 8009d30:	20004600 	.word	0x20004600

08009d34 <__cvt>:
 8009d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d38:	ec57 6b10 	vmov	r6, r7, d0
 8009d3c:	2f00      	cmp	r7, #0
 8009d3e:	460c      	mov	r4, r1
 8009d40:	4619      	mov	r1, r3
 8009d42:	463b      	mov	r3, r7
 8009d44:	bfbb      	ittet	lt
 8009d46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009d4a:	461f      	movlt	r7, r3
 8009d4c:	2300      	movge	r3, #0
 8009d4e:	232d      	movlt	r3, #45	@ 0x2d
 8009d50:	700b      	strb	r3, [r1, #0]
 8009d52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009d58:	4691      	mov	r9, r2
 8009d5a:	f023 0820 	bic.w	r8, r3, #32
 8009d5e:	bfbc      	itt	lt
 8009d60:	4632      	movlt	r2, r6
 8009d62:	4616      	movlt	r6, r2
 8009d64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009d68:	d005      	beq.n	8009d76 <__cvt+0x42>
 8009d6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009d6e:	d100      	bne.n	8009d72 <__cvt+0x3e>
 8009d70:	3401      	adds	r4, #1
 8009d72:	2102      	movs	r1, #2
 8009d74:	e000      	b.n	8009d78 <__cvt+0x44>
 8009d76:	2103      	movs	r1, #3
 8009d78:	ab03      	add	r3, sp, #12
 8009d7a:	9301      	str	r3, [sp, #4]
 8009d7c:	ab02      	add	r3, sp, #8
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	ec47 6b10 	vmov	d0, r6, r7
 8009d84:	4653      	mov	r3, sl
 8009d86:	4622      	mov	r2, r4
 8009d88:	f001 f99a 	bl	800b0c0 <_dtoa_r>
 8009d8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009d90:	4605      	mov	r5, r0
 8009d92:	d119      	bne.n	8009dc8 <__cvt+0x94>
 8009d94:	f019 0f01 	tst.w	r9, #1
 8009d98:	d00e      	beq.n	8009db8 <__cvt+0x84>
 8009d9a:	eb00 0904 	add.w	r9, r0, r4
 8009d9e:	2200      	movs	r2, #0
 8009da0:	2300      	movs	r3, #0
 8009da2:	4630      	mov	r0, r6
 8009da4:	4639      	mov	r1, r7
 8009da6:	f7f6 fe97 	bl	8000ad8 <__aeabi_dcmpeq>
 8009daa:	b108      	cbz	r0, 8009db0 <__cvt+0x7c>
 8009dac:	f8cd 900c 	str.w	r9, [sp, #12]
 8009db0:	2230      	movs	r2, #48	@ 0x30
 8009db2:	9b03      	ldr	r3, [sp, #12]
 8009db4:	454b      	cmp	r3, r9
 8009db6:	d31e      	bcc.n	8009df6 <__cvt+0xc2>
 8009db8:	9b03      	ldr	r3, [sp, #12]
 8009dba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009dbc:	1b5b      	subs	r3, r3, r5
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	6013      	str	r3, [r2, #0]
 8009dc2:	b004      	add	sp, #16
 8009dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009dcc:	eb00 0904 	add.w	r9, r0, r4
 8009dd0:	d1e5      	bne.n	8009d9e <__cvt+0x6a>
 8009dd2:	7803      	ldrb	r3, [r0, #0]
 8009dd4:	2b30      	cmp	r3, #48	@ 0x30
 8009dd6:	d10a      	bne.n	8009dee <__cvt+0xba>
 8009dd8:	2200      	movs	r2, #0
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4630      	mov	r0, r6
 8009dde:	4639      	mov	r1, r7
 8009de0:	f7f6 fe7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009de4:	b918      	cbnz	r0, 8009dee <__cvt+0xba>
 8009de6:	f1c4 0401 	rsb	r4, r4, #1
 8009dea:	f8ca 4000 	str.w	r4, [sl]
 8009dee:	f8da 3000 	ldr.w	r3, [sl]
 8009df2:	4499      	add	r9, r3
 8009df4:	e7d3      	b.n	8009d9e <__cvt+0x6a>
 8009df6:	1c59      	adds	r1, r3, #1
 8009df8:	9103      	str	r1, [sp, #12]
 8009dfa:	701a      	strb	r2, [r3, #0]
 8009dfc:	e7d9      	b.n	8009db2 <__cvt+0x7e>

08009dfe <__exponent>:
 8009dfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e00:	2900      	cmp	r1, #0
 8009e02:	bfba      	itte	lt
 8009e04:	4249      	neglt	r1, r1
 8009e06:	232d      	movlt	r3, #45	@ 0x2d
 8009e08:	232b      	movge	r3, #43	@ 0x2b
 8009e0a:	2909      	cmp	r1, #9
 8009e0c:	7002      	strb	r2, [r0, #0]
 8009e0e:	7043      	strb	r3, [r0, #1]
 8009e10:	dd29      	ble.n	8009e66 <__exponent+0x68>
 8009e12:	f10d 0307 	add.w	r3, sp, #7
 8009e16:	461d      	mov	r5, r3
 8009e18:	270a      	movs	r7, #10
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009e20:	fb07 1416 	mls	r4, r7, r6, r1
 8009e24:	3430      	adds	r4, #48	@ 0x30
 8009e26:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	2c63      	cmp	r4, #99	@ 0x63
 8009e2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e32:	4631      	mov	r1, r6
 8009e34:	dcf1      	bgt.n	8009e1a <__exponent+0x1c>
 8009e36:	3130      	adds	r1, #48	@ 0x30
 8009e38:	1e94      	subs	r4, r2, #2
 8009e3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009e3e:	1c41      	adds	r1, r0, #1
 8009e40:	4623      	mov	r3, r4
 8009e42:	42ab      	cmp	r3, r5
 8009e44:	d30a      	bcc.n	8009e5c <__exponent+0x5e>
 8009e46:	f10d 0309 	add.w	r3, sp, #9
 8009e4a:	1a9b      	subs	r3, r3, r2
 8009e4c:	42ac      	cmp	r4, r5
 8009e4e:	bf88      	it	hi
 8009e50:	2300      	movhi	r3, #0
 8009e52:	3302      	adds	r3, #2
 8009e54:	4403      	add	r3, r0
 8009e56:	1a18      	subs	r0, r3, r0
 8009e58:	b003      	add	sp, #12
 8009e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009e60:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009e64:	e7ed      	b.n	8009e42 <__exponent+0x44>
 8009e66:	2330      	movs	r3, #48	@ 0x30
 8009e68:	3130      	adds	r1, #48	@ 0x30
 8009e6a:	7083      	strb	r3, [r0, #2]
 8009e6c:	70c1      	strb	r1, [r0, #3]
 8009e6e:	1d03      	adds	r3, r0, #4
 8009e70:	e7f1      	b.n	8009e56 <__exponent+0x58>
	...

08009e74 <_printf_float>:
 8009e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e78:	b08d      	sub	sp, #52	@ 0x34
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009e80:	4616      	mov	r6, r2
 8009e82:	461f      	mov	r7, r3
 8009e84:	4605      	mov	r5, r0
 8009e86:	f000 ff91 	bl	800adac <_localeconv_r>
 8009e8a:	6803      	ldr	r3, [r0, #0]
 8009e8c:	9304      	str	r3, [sp, #16]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7f6 f9f6 	bl	8000280 <strlen>
 8009e94:	2300      	movs	r3, #0
 8009e96:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e98:	f8d8 3000 	ldr.w	r3, [r8]
 8009e9c:	9005      	str	r0, [sp, #20]
 8009e9e:	3307      	adds	r3, #7
 8009ea0:	f023 0307 	bic.w	r3, r3, #7
 8009ea4:	f103 0208 	add.w	r2, r3, #8
 8009ea8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009eac:	f8d4 b000 	ldr.w	fp, [r4]
 8009eb0:	f8c8 2000 	str.w	r2, [r8]
 8009eb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009eb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009ebc:	9307      	str	r3, [sp, #28]
 8009ebe:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ec2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009ec6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009eca:	4b9c      	ldr	r3, [pc, #624]	@ (800a13c <_printf_float+0x2c8>)
 8009ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed0:	f7f6 fe34 	bl	8000b3c <__aeabi_dcmpun>
 8009ed4:	bb70      	cbnz	r0, 8009f34 <_printf_float+0xc0>
 8009ed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009eda:	4b98      	ldr	r3, [pc, #608]	@ (800a13c <_printf_float+0x2c8>)
 8009edc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee0:	f7f6 fe0e 	bl	8000b00 <__aeabi_dcmple>
 8009ee4:	bb30      	cbnz	r0, 8009f34 <_printf_float+0xc0>
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4640      	mov	r0, r8
 8009eec:	4649      	mov	r1, r9
 8009eee:	f7f6 fdfd 	bl	8000aec <__aeabi_dcmplt>
 8009ef2:	b110      	cbz	r0, 8009efa <_printf_float+0x86>
 8009ef4:	232d      	movs	r3, #45	@ 0x2d
 8009ef6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009efa:	4a91      	ldr	r2, [pc, #580]	@ (800a140 <_printf_float+0x2cc>)
 8009efc:	4b91      	ldr	r3, [pc, #580]	@ (800a144 <_printf_float+0x2d0>)
 8009efe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009f02:	bf94      	ite	ls
 8009f04:	4690      	movls	r8, r2
 8009f06:	4698      	movhi	r8, r3
 8009f08:	2303      	movs	r3, #3
 8009f0a:	6123      	str	r3, [r4, #16]
 8009f0c:	f02b 0304 	bic.w	r3, fp, #4
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	f04f 0900 	mov.w	r9, #0
 8009f16:	9700      	str	r7, [sp, #0]
 8009f18:	4633      	mov	r3, r6
 8009f1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009f1c:	4621      	mov	r1, r4
 8009f1e:	4628      	mov	r0, r5
 8009f20:	f000 f9d2 	bl	800a2c8 <_printf_common>
 8009f24:	3001      	adds	r0, #1
 8009f26:	f040 808d 	bne.w	800a044 <_printf_float+0x1d0>
 8009f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2e:	b00d      	add	sp, #52	@ 0x34
 8009f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f34:	4642      	mov	r2, r8
 8009f36:	464b      	mov	r3, r9
 8009f38:	4640      	mov	r0, r8
 8009f3a:	4649      	mov	r1, r9
 8009f3c:	f7f6 fdfe 	bl	8000b3c <__aeabi_dcmpun>
 8009f40:	b140      	cbz	r0, 8009f54 <_printf_float+0xe0>
 8009f42:	464b      	mov	r3, r9
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	bfbc      	itt	lt
 8009f48:	232d      	movlt	r3, #45	@ 0x2d
 8009f4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009f4e:	4a7e      	ldr	r2, [pc, #504]	@ (800a148 <_printf_float+0x2d4>)
 8009f50:	4b7e      	ldr	r3, [pc, #504]	@ (800a14c <_printf_float+0x2d8>)
 8009f52:	e7d4      	b.n	8009efe <_printf_float+0x8a>
 8009f54:	6863      	ldr	r3, [r4, #4]
 8009f56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009f5a:	9206      	str	r2, [sp, #24]
 8009f5c:	1c5a      	adds	r2, r3, #1
 8009f5e:	d13b      	bne.n	8009fd8 <_printf_float+0x164>
 8009f60:	2306      	movs	r3, #6
 8009f62:	6063      	str	r3, [r4, #4]
 8009f64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009f68:	2300      	movs	r3, #0
 8009f6a:	6022      	str	r2, [r4, #0]
 8009f6c:	9303      	str	r3, [sp, #12]
 8009f6e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009f70:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009f74:	ab09      	add	r3, sp, #36	@ 0x24
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	6861      	ldr	r1, [r4, #4]
 8009f7a:	ec49 8b10 	vmov	d0, r8, r9
 8009f7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009f82:	4628      	mov	r0, r5
 8009f84:	f7ff fed6 	bl	8009d34 <__cvt>
 8009f88:	9b06      	ldr	r3, [sp, #24]
 8009f8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f8c:	2b47      	cmp	r3, #71	@ 0x47
 8009f8e:	4680      	mov	r8, r0
 8009f90:	d129      	bne.n	8009fe6 <_printf_float+0x172>
 8009f92:	1cc8      	adds	r0, r1, #3
 8009f94:	db02      	blt.n	8009f9c <_printf_float+0x128>
 8009f96:	6863      	ldr	r3, [r4, #4]
 8009f98:	4299      	cmp	r1, r3
 8009f9a:	dd41      	ble.n	800a020 <_printf_float+0x1ac>
 8009f9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009fa0:	fa5f fa8a 	uxtb.w	sl, sl
 8009fa4:	3901      	subs	r1, #1
 8009fa6:	4652      	mov	r2, sl
 8009fa8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009fac:	9109      	str	r1, [sp, #36]	@ 0x24
 8009fae:	f7ff ff26 	bl	8009dfe <__exponent>
 8009fb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009fb4:	1813      	adds	r3, r2, r0
 8009fb6:	2a01      	cmp	r2, #1
 8009fb8:	4681      	mov	r9, r0
 8009fba:	6123      	str	r3, [r4, #16]
 8009fbc:	dc02      	bgt.n	8009fc4 <_printf_float+0x150>
 8009fbe:	6822      	ldr	r2, [r4, #0]
 8009fc0:	07d2      	lsls	r2, r2, #31
 8009fc2:	d501      	bpl.n	8009fc8 <_printf_float+0x154>
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	6123      	str	r3, [r4, #16]
 8009fc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d0a2      	beq.n	8009f16 <_printf_float+0xa2>
 8009fd0:	232d      	movs	r3, #45	@ 0x2d
 8009fd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fd6:	e79e      	b.n	8009f16 <_printf_float+0xa2>
 8009fd8:	9a06      	ldr	r2, [sp, #24]
 8009fda:	2a47      	cmp	r2, #71	@ 0x47
 8009fdc:	d1c2      	bne.n	8009f64 <_printf_float+0xf0>
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1c0      	bne.n	8009f64 <_printf_float+0xf0>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e7bd      	b.n	8009f62 <_printf_float+0xee>
 8009fe6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009fea:	d9db      	bls.n	8009fa4 <_printf_float+0x130>
 8009fec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009ff0:	d118      	bne.n	800a024 <_printf_float+0x1b0>
 8009ff2:	2900      	cmp	r1, #0
 8009ff4:	6863      	ldr	r3, [r4, #4]
 8009ff6:	dd0b      	ble.n	800a010 <_printf_float+0x19c>
 8009ff8:	6121      	str	r1, [r4, #16]
 8009ffa:	b913      	cbnz	r3, 800a002 <_printf_float+0x18e>
 8009ffc:	6822      	ldr	r2, [r4, #0]
 8009ffe:	07d0      	lsls	r0, r2, #31
 800a000:	d502      	bpl.n	800a008 <_printf_float+0x194>
 800a002:	3301      	adds	r3, #1
 800a004:	440b      	add	r3, r1
 800a006:	6123      	str	r3, [r4, #16]
 800a008:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a00a:	f04f 0900 	mov.w	r9, #0
 800a00e:	e7db      	b.n	8009fc8 <_printf_float+0x154>
 800a010:	b913      	cbnz	r3, 800a018 <_printf_float+0x1a4>
 800a012:	6822      	ldr	r2, [r4, #0]
 800a014:	07d2      	lsls	r2, r2, #31
 800a016:	d501      	bpl.n	800a01c <_printf_float+0x1a8>
 800a018:	3302      	adds	r3, #2
 800a01a:	e7f4      	b.n	800a006 <_printf_float+0x192>
 800a01c:	2301      	movs	r3, #1
 800a01e:	e7f2      	b.n	800a006 <_printf_float+0x192>
 800a020:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a026:	4299      	cmp	r1, r3
 800a028:	db05      	blt.n	800a036 <_printf_float+0x1c2>
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	6121      	str	r1, [r4, #16]
 800a02e:	07d8      	lsls	r0, r3, #31
 800a030:	d5ea      	bpl.n	800a008 <_printf_float+0x194>
 800a032:	1c4b      	adds	r3, r1, #1
 800a034:	e7e7      	b.n	800a006 <_printf_float+0x192>
 800a036:	2900      	cmp	r1, #0
 800a038:	bfd4      	ite	le
 800a03a:	f1c1 0202 	rsble	r2, r1, #2
 800a03e:	2201      	movgt	r2, #1
 800a040:	4413      	add	r3, r2
 800a042:	e7e0      	b.n	800a006 <_printf_float+0x192>
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	055a      	lsls	r2, r3, #21
 800a048:	d407      	bmi.n	800a05a <_printf_float+0x1e6>
 800a04a:	6923      	ldr	r3, [r4, #16]
 800a04c:	4642      	mov	r2, r8
 800a04e:	4631      	mov	r1, r6
 800a050:	4628      	mov	r0, r5
 800a052:	47b8      	blx	r7
 800a054:	3001      	adds	r0, #1
 800a056:	d12b      	bne.n	800a0b0 <_printf_float+0x23c>
 800a058:	e767      	b.n	8009f2a <_printf_float+0xb6>
 800a05a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a05e:	f240 80dd 	bls.w	800a21c <_printf_float+0x3a8>
 800a062:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a066:	2200      	movs	r2, #0
 800a068:	2300      	movs	r3, #0
 800a06a:	f7f6 fd35 	bl	8000ad8 <__aeabi_dcmpeq>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d033      	beq.n	800a0da <_printf_float+0x266>
 800a072:	4a37      	ldr	r2, [pc, #220]	@ (800a150 <_printf_float+0x2dc>)
 800a074:	2301      	movs	r3, #1
 800a076:	4631      	mov	r1, r6
 800a078:	4628      	mov	r0, r5
 800a07a:	47b8      	blx	r7
 800a07c:	3001      	adds	r0, #1
 800a07e:	f43f af54 	beq.w	8009f2a <_printf_float+0xb6>
 800a082:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a086:	4543      	cmp	r3, r8
 800a088:	db02      	blt.n	800a090 <_printf_float+0x21c>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	07d8      	lsls	r0, r3, #31
 800a08e:	d50f      	bpl.n	800a0b0 <_printf_float+0x23c>
 800a090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a094:	4631      	mov	r1, r6
 800a096:	4628      	mov	r0, r5
 800a098:	47b8      	blx	r7
 800a09a:	3001      	adds	r0, #1
 800a09c:	f43f af45 	beq.w	8009f2a <_printf_float+0xb6>
 800a0a0:	f04f 0900 	mov.w	r9, #0
 800a0a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a0a8:	f104 0a1a 	add.w	sl, r4, #26
 800a0ac:	45c8      	cmp	r8, r9
 800a0ae:	dc09      	bgt.n	800a0c4 <_printf_float+0x250>
 800a0b0:	6823      	ldr	r3, [r4, #0]
 800a0b2:	079b      	lsls	r3, r3, #30
 800a0b4:	f100 8103 	bmi.w	800a2be <_printf_float+0x44a>
 800a0b8:	68e0      	ldr	r0, [r4, #12]
 800a0ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0bc:	4298      	cmp	r0, r3
 800a0be:	bfb8      	it	lt
 800a0c0:	4618      	movlt	r0, r3
 800a0c2:	e734      	b.n	8009f2e <_printf_float+0xba>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	4652      	mov	r2, sl
 800a0c8:	4631      	mov	r1, r6
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	47b8      	blx	r7
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	f43f af2b 	beq.w	8009f2a <_printf_float+0xb6>
 800a0d4:	f109 0901 	add.w	r9, r9, #1
 800a0d8:	e7e8      	b.n	800a0ac <_printf_float+0x238>
 800a0da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	dc39      	bgt.n	800a154 <_printf_float+0x2e0>
 800a0e0:	4a1b      	ldr	r2, [pc, #108]	@ (800a150 <_printf_float+0x2dc>)
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	4631      	mov	r1, r6
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	47b8      	blx	r7
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	f43f af1d 	beq.w	8009f2a <_printf_float+0xb6>
 800a0f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a0f4:	ea59 0303 	orrs.w	r3, r9, r3
 800a0f8:	d102      	bne.n	800a100 <_printf_float+0x28c>
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	07d9      	lsls	r1, r3, #31
 800a0fe:	d5d7      	bpl.n	800a0b0 <_printf_float+0x23c>
 800a100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a104:	4631      	mov	r1, r6
 800a106:	4628      	mov	r0, r5
 800a108:	47b8      	blx	r7
 800a10a:	3001      	adds	r0, #1
 800a10c:	f43f af0d 	beq.w	8009f2a <_printf_float+0xb6>
 800a110:	f04f 0a00 	mov.w	sl, #0
 800a114:	f104 0b1a 	add.w	fp, r4, #26
 800a118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a11a:	425b      	negs	r3, r3
 800a11c:	4553      	cmp	r3, sl
 800a11e:	dc01      	bgt.n	800a124 <_printf_float+0x2b0>
 800a120:	464b      	mov	r3, r9
 800a122:	e793      	b.n	800a04c <_printf_float+0x1d8>
 800a124:	2301      	movs	r3, #1
 800a126:	465a      	mov	r2, fp
 800a128:	4631      	mov	r1, r6
 800a12a:	4628      	mov	r0, r5
 800a12c:	47b8      	blx	r7
 800a12e:	3001      	adds	r0, #1
 800a130:	f43f aefb 	beq.w	8009f2a <_printf_float+0xb6>
 800a134:	f10a 0a01 	add.w	sl, sl, #1
 800a138:	e7ee      	b.n	800a118 <_printf_float+0x2a4>
 800a13a:	bf00      	nop
 800a13c:	7fefffff 	.word	0x7fefffff
 800a140:	0800e728 	.word	0x0800e728
 800a144:	0800e72c 	.word	0x0800e72c
 800a148:	0800e730 	.word	0x0800e730
 800a14c:	0800e734 	.word	0x0800e734
 800a150:	0800e738 	.word	0x0800e738
 800a154:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a156:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a15a:	4553      	cmp	r3, sl
 800a15c:	bfa8      	it	ge
 800a15e:	4653      	movge	r3, sl
 800a160:	2b00      	cmp	r3, #0
 800a162:	4699      	mov	r9, r3
 800a164:	dc36      	bgt.n	800a1d4 <_printf_float+0x360>
 800a166:	f04f 0b00 	mov.w	fp, #0
 800a16a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a16e:	f104 021a 	add.w	r2, r4, #26
 800a172:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a174:	9306      	str	r3, [sp, #24]
 800a176:	eba3 0309 	sub.w	r3, r3, r9
 800a17a:	455b      	cmp	r3, fp
 800a17c:	dc31      	bgt.n	800a1e2 <_printf_float+0x36e>
 800a17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a180:	459a      	cmp	sl, r3
 800a182:	dc3a      	bgt.n	800a1fa <_printf_float+0x386>
 800a184:	6823      	ldr	r3, [r4, #0]
 800a186:	07da      	lsls	r2, r3, #31
 800a188:	d437      	bmi.n	800a1fa <_printf_float+0x386>
 800a18a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a18c:	ebaa 0903 	sub.w	r9, sl, r3
 800a190:	9b06      	ldr	r3, [sp, #24]
 800a192:	ebaa 0303 	sub.w	r3, sl, r3
 800a196:	4599      	cmp	r9, r3
 800a198:	bfa8      	it	ge
 800a19a:	4699      	movge	r9, r3
 800a19c:	f1b9 0f00 	cmp.w	r9, #0
 800a1a0:	dc33      	bgt.n	800a20a <_printf_float+0x396>
 800a1a2:	f04f 0800 	mov.w	r8, #0
 800a1a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1aa:	f104 0b1a 	add.w	fp, r4, #26
 800a1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1b0:	ebaa 0303 	sub.w	r3, sl, r3
 800a1b4:	eba3 0309 	sub.w	r3, r3, r9
 800a1b8:	4543      	cmp	r3, r8
 800a1ba:	f77f af79 	ble.w	800a0b0 <_printf_float+0x23c>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	465a      	mov	r2, fp
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	47b8      	blx	r7
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	f43f aeae 	beq.w	8009f2a <_printf_float+0xb6>
 800a1ce:	f108 0801 	add.w	r8, r8, #1
 800a1d2:	e7ec      	b.n	800a1ae <_printf_float+0x33a>
 800a1d4:	4642      	mov	r2, r8
 800a1d6:	4631      	mov	r1, r6
 800a1d8:	4628      	mov	r0, r5
 800a1da:	47b8      	blx	r7
 800a1dc:	3001      	adds	r0, #1
 800a1de:	d1c2      	bne.n	800a166 <_printf_float+0x2f2>
 800a1e0:	e6a3      	b.n	8009f2a <_printf_float+0xb6>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	4631      	mov	r1, r6
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	9206      	str	r2, [sp, #24]
 800a1ea:	47b8      	blx	r7
 800a1ec:	3001      	adds	r0, #1
 800a1ee:	f43f ae9c 	beq.w	8009f2a <_printf_float+0xb6>
 800a1f2:	9a06      	ldr	r2, [sp, #24]
 800a1f4:	f10b 0b01 	add.w	fp, fp, #1
 800a1f8:	e7bb      	b.n	800a172 <_printf_float+0x2fe>
 800a1fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1fe:	4631      	mov	r1, r6
 800a200:	4628      	mov	r0, r5
 800a202:	47b8      	blx	r7
 800a204:	3001      	adds	r0, #1
 800a206:	d1c0      	bne.n	800a18a <_printf_float+0x316>
 800a208:	e68f      	b.n	8009f2a <_printf_float+0xb6>
 800a20a:	9a06      	ldr	r2, [sp, #24]
 800a20c:	464b      	mov	r3, r9
 800a20e:	4442      	add	r2, r8
 800a210:	4631      	mov	r1, r6
 800a212:	4628      	mov	r0, r5
 800a214:	47b8      	blx	r7
 800a216:	3001      	adds	r0, #1
 800a218:	d1c3      	bne.n	800a1a2 <_printf_float+0x32e>
 800a21a:	e686      	b.n	8009f2a <_printf_float+0xb6>
 800a21c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a220:	f1ba 0f01 	cmp.w	sl, #1
 800a224:	dc01      	bgt.n	800a22a <_printf_float+0x3b6>
 800a226:	07db      	lsls	r3, r3, #31
 800a228:	d536      	bpl.n	800a298 <_printf_float+0x424>
 800a22a:	2301      	movs	r3, #1
 800a22c:	4642      	mov	r2, r8
 800a22e:	4631      	mov	r1, r6
 800a230:	4628      	mov	r0, r5
 800a232:	47b8      	blx	r7
 800a234:	3001      	adds	r0, #1
 800a236:	f43f ae78 	beq.w	8009f2a <_printf_float+0xb6>
 800a23a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a23e:	4631      	mov	r1, r6
 800a240:	4628      	mov	r0, r5
 800a242:	47b8      	blx	r7
 800a244:	3001      	adds	r0, #1
 800a246:	f43f ae70 	beq.w	8009f2a <_printf_float+0xb6>
 800a24a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a24e:	2200      	movs	r2, #0
 800a250:	2300      	movs	r3, #0
 800a252:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a256:	f7f6 fc3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a25a:	b9c0      	cbnz	r0, 800a28e <_printf_float+0x41a>
 800a25c:	4653      	mov	r3, sl
 800a25e:	f108 0201 	add.w	r2, r8, #1
 800a262:	4631      	mov	r1, r6
 800a264:	4628      	mov	r0, r5
 800a266:	47b8      	blx	r7
 800a268:	3001      	adds	r0, #1
 800a26a:	d10c      	bne.n	800a286 <_printf_float+0x412>
 800a26c:	e65d      	b.n	8009f2a <_printf_float+0xb6>
 800a26e:	2301      	movs	r3, #1
 800a270:	465a      	mov	r2, fp
 800a272:	4631      	mov	r1, r6
 800a274:	4628      	mov	r0, r5
 800a276:	47b8      	blx	r7
 800a278:	3001      	adds	r0, #1
 800a27a:	f43f ae56 	beq.w	8009f2a <_printf_float+0xb6>
 800a27e:	f108 0801 	add.w	r8, r8, #1
 800a282:	45d0      	cmp	r8, sl
 800a284:	dbf3      	blt.n	800a26e <_printf_float+0x3fa>
 800a286:	464b      	mov	r3, r9
 800a288:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a28c:	e6df      	b.n	800a04e <_printf_float+0x1da>
 800a28e:	f04f 0800 	mov.w	r8, #0
 800a292:	f104 0b1a 	add.w	fp, r4, #26
 800a296:	e7f4      	b.n	800a282 <_printf_float+0x40e>
 800a298:	2301      	movs	r3, #1
 800a29a:	4642      	mov	r2, r8
 800a29c:	e7e1      	b.n	800a262 <_printf_float+0x3ee>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	464a      	mov	r2, r9
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	47b8      	blx	r7
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	f43f ae3e 	beq.w	8009f2a <_printf_float+0xb6>
 800a2ae:	f108 0801 	add.w	r8, r8, #1
 800a2b2:	68e3      	ldr	r3, [r4, #12]
 800a2b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a2b6:	1a5b      	subs	r3, r3, r1
 800a2b8:	4543      	cmp	r3, r8
 800a2ba:	dcf0      	bgt.n	800a29e <_printf_float+0x42a>
 800a2bc:	e6fc      	b.n	800a0b8 <_printf_float+0x244>
 800a2be:	f04f 0800 	mov.w	r8, #0
 800a2c2:	f104 0919 	add.w	r9, r4, #25
 800a2c6:	e7f4      	b.n	800a2b2 <_printf_float+0x43e>

0800a2c8 <_printf_common>:
 800a2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2cc:	4616      	mov	r6, r2
 800a2ce:	4698      	mov	r8, r3
 800a2d0:	688a      	ldr	r2, [r1, #8]
 800a2d2:	690b      	ldr	r3, [r1, #16]
 800a2d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	bfb8      	it	lt
 800a2dc:	4613      	movlt	r3, r2
 800a2de:	6033      	str	r3, [r6, #0]
 800a2e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a2e4:	4607      	mov	r7, r0
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	b10a      	cbz	r2, 800a2ee <_printf_common+0x26>
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	6033      	str	r3, [r6, #0]
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	0699      	lsls	r1, r3, #26
 800a2f2:	bf42      	ittt	mi
 800a2f4:	6833      	ldrmi	r3, [r6, #0]
 800a2f6:	3302      	addmi	r3, #2
 800a2f8:	6033      	strmi	r3, [r6, #0]
 800a2fa:	6825      	ldr	r5, [r4, #0]
 800a2fc:	f015 0506 	ands.w	r5, r5, #6
 800a300:	d106      	bne.n	800a310 <_printf_common+0x48>
 800a302:	f104 0a19 	add.w	sl, r4, #25
 800a306:	68e3      	ldr	r3, [r4, #12]
 800a308:	6832      	ldr	r2, [r6, #0]
 800a30a:	1a9b      	subs	r3, r3, r2
 800a30c:	42ab      	cmp	r3, r5
 800a30e:	dc26      	bgt.n	800a35e <_printf_common+0x96>
 800a310:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a314:	6822      	ldr	r2, [r4, #0]
 800a316:	3b00      	subs	r3, #0
 800a318:	bf18      	it	ne
 800a31a:	2301      	movne	r3, #1
 800a31c:	0692      	lsls	r2, r2, #26
 800a31e:	d42b      	bmi.n	800a378 <_printf_common+0xb0>
 800a320:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a324:	4641      	mov	r1, r8
 800a326:	4638      	mov	r0, r7
 800a328:	47c8      	blx	r9
 800a32a:	3001      	adds	r0, #1
 800a32c:	d01e      	beq.n	800a36c <_printf_common+0xa4>
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	6922      	ldr	r2, [r4, #16]
 800a332:	f003 0306 	and.w	r3, r3, #6
 800a336:	2b04      	cmp	r3, #4
 800a338:	bf02      	ittt	eq
 800a33a:	68e5      	ldreq	r5, [r4, #12]
 800a33c:	6833      	ldreq	r3, [r6, #0]
 800a33e:	1aed      	subeq	r5, r5, r3
 800a340:	68a3      	ldr	r3, [r4, #8]
 800a342:	bf0c      	ite	eq
 800a344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a348:	2500      	movne	r5, #0
 800a34a:	4293      	cmp	r3, r2
 800a34c:	bfc4      	itt	gt
 800a34e:	1a9b      	subgt	r3, r3, r2
 800a350:	18ed      	addgt	r5, r5, r3
 800a352:	2600      	movs	r6, #0
 800a354:	341a      	adds	r4, #26
 800a356:	42b5      	cmp	r5, r6
 800a358:	d11a      	bne.n	800a390 <_printf_common+0xc8>
 800a35a:	2000      	movs	r0, #0
 800a35c:	e008      	b.n	800a370 <_printf_common+0xa8>
 800a35e:	2301      	movs	r3, #1
 800a360:	4652      	mov	r2, sl
 800a362:	4641      	mov	r1, r8
 800a364:	4638      	mov	r0, r7
 800a366:	47c8      	blx	r9
 800a368:	3001      	adds	r0, #1
 800a36a:	d103      	bne.n	800a374 <_printf_common+0xac>
 800a36c:	f04f 30ff 	mov.w	r0, #4294967295
 800a370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a374:	3501      	adds	r5, #1
 800a376:	e7c6      	b.n	800a306 <_printf_common+0x3e>
 800a378:	18e1      	adds	r1, r4, r3
 800a37a:	1c5a      	adds	r2, r3, #1
 800a37c:	2030      	movs	r0, #48	@ 0x30
 800a37e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a382:	4422      	add	r2, r4
 800a384:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a388:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a38c:	3302      	adds	r3, #2
 800a38e:	e7c7      	b.n	800a320 <_printf_common+0x58>
 800a390:	2301      	movs	r3, #1
 800a392:	4622      	mov	r2, r4
 800a394:	4641      	mov	r1, r8
 800a396:	4638      	mov	r0, r7
 800a398:	47c8      	blx	r9
 800a39a:	3001      	adds	r0, #1
 800a39c:	d0e6      	beq.n	800a36c <_printf_common+0xa4>
 800a39e:	3601      	adds	r6, #1
 800a3a0:	e7d9      	b.n	800a356 <_printf_common+0x8e>
	...

0800a3a4 <_printf_i>:
 800a3a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a8:	7e0f      	ldrb	r7, [r1, #24]
 800a3aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a3ac:	2f78      	cmp	r7, #120	@ 0x78
 800a3ae:	4691      	mov	r9, r2
 800a3b0:	4680      	mov	r8, r0
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	469a      	mov	sl, r3
 800a3b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a3ba:	d807      	bhi.n	800a3cc <_printf_i+0x28>
 800a3bc:	2f62      	cmp	r7, #98	@ 0x62
 800a3be:	d80a      	bhi.n	800a3d6 <_printf_i+0x32>
 800a3c0:	2f00      	cmp	r7, #0
 800a3c2:	f000 80d2 	beq.w	800a56a <_printf_i+0x1c6>
 800a3c6:	2f58      	cmp	r7, #88	@ 0x58
 800a3c8:	f000 80b9 	beq.w	800a53e <_printf_i+0x19a>
 800a3cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a3d4:	e03a      	b.n	800a44c <_printf_i+0xa8>
 800a3d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a3da:	2b15      	cmp	r3, #21
 800a3dc:	d8f6      	bhi.n	800a3cc <_printf_i+0x28>
 800a3de:	a101      	add	r1, pc, #4	@ (adr r1, 800a3e4 <_printf_i+0x40>)
 800a3e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3e4:	0800a43d 	.word	0x0800a43d
 800a3e8:	0800a451 	.word	0x0800a451
 800a3ec:	0800a3cd 	.word	0x0800a3cd
 800a3f0:	0800a3cd 	.word	0x0800a3cd
 800a3f4:	0800a3cd 	.word	0x0800a3cd
 800a3f8:	0800a3cd 	.word	0x0800a3cd
 800a3fc:	0800a451 	.word	0x0800a451
 800a400:	0800a3cd 	.word	0x0800a3cd
 800a404:	0800a3cd 	.word	0x0800a3cd
 800a408:	0800a3cd 	.word	0x0800a3cd
 800a40c:	0800a3cd 	.word	0x0800a3cd
 800a410:	0800a551 	.word	0x0800a551
 800a414:	0800a47b 	.word	0x0800a47b
 800a418:	0800a50b 	.word	0x0800a50b
 800a41c:	0800a3cd 	.word	0x0800a3cd
 800a420:	0800a3cd 	.word	0x0800a3cd
 800a424:	0800a573 	.word	0x0800a573
 800a428:	0800a3cd 	.word	0x0800a3cd
 800a42c:	0800a47b 	.word	0x0800a47b
 800a430:	0800a3cd 	.word	0x0800a3cd
 800a434:	0800a3cd 	.word	0x0800a3cd
 800a438:	0800a513 	.word	0x0800a513
 800a43c:	6833      	ldr	r3, [r6, #0]
 800a43e:	1d1a      	adds	r2, r3, #4
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	6032      	str	r2, [r6, #0]
 800a444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a448:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a44c:	2301      	movs	r3, #1
 800a44e:	e09d      	b.n	800a58c <_printf_i+0x1e8>
 800a450:	6833      	ldr	r3, [r6, #0]
 800a452:	6820      	ldr	r0, [r4, #0]
 800a454:	1d19      	adds	r1, r3, #4
 800a456:	6031      	str	r1, [r6, #0]
 800a458:	0606      	lsls	r6, r0, #24
 800a45a:	d501      	bpl.n	800a460 <_printf_i+0xbc>
 800a45c:	681d      	ldr	r5, [r3, #0]
 800a45e:	e003      	b.n	800a468 <_printf_i+0xc4>
 800a460:	0645      	lsls	r5, r0, #25
 800a462:	d5fb      	bpl.n	800a45c <_printf_i+0xb8>
 800a464:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a468:	2d00      	cmp	r5, #0
 800a46a:	da03      	bge.n	800a474 <_printf_i+0xd0>
 800a46c:	232d      	movs	r3, #45	@ 0x2d
 800a46e:	426d      	negs	r5, r5
 800a470:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a474:	4859      	ldr	r0, [pc, #356]	@ (800a5dc <_printf_i+0x238>)
 800a476:	230a      	movs	r3, #10
 800a478:	e011      	b.n	800a49e <_printf_i+0xfa>
 800a47a:	6821      	ldr	r1, [r4, #0]
 800a47c:	6833      	ldr	r3, [r6, #0]
 800a47e:	0608      	lsls	r0, r1, #24
 800a480:	f853 5b04 	ldr.w	r5, [r3], #4
 800a484:	d402      	bmi.n	800a48c <_printf_i+0xe8>
 800a486:	0649      	lsls	r1, r1, #25
 800a488:	bf48      	it	mi
 800a48a:	b2ad      	uxthmi	r5, r5
 800a48c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a48e:	4853      	ldr	r0, [pc, #332]	@ (800a5dc <_printf_i+0x238>)
 800a490:	6033      	str	r3, [r6, #0]
 800a492:	bf14      	ite	ne
 800a494:	230a      	movne	r3, #10
 800a496:	2308      	moveq	r3, #8
 800a498:	2100      	movs	r1, #0
 800a49a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a49e:	6866      	ldr	r6, [r4, #4]
 800a4a0:	60a6      	str	r6, [r4, #8]
 800a4a2:	2e00      	cmp	r6, #0
 800a4a4:	bfa2      	ittt	ge
 800a4a6:	6821      	ldrge	r1, [r4, #0]
 800a4a8:	f021 0104 	bicge.w	r1, r1, #4
 800a4ac:	6021      	strge	r1, [r4, #0]
 800a4ae:	b90d      	cbnz	r5, 800a4b4 <_printf_i+0x110>
 800a4b0:	2e00      	cmp	r6, #0
 800a4b2:	d04b      	beq.n	800a54c <_printf_i+0x1a8>
 800a4b4:	4616      	mov	r6, r2
 800a4b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a4ba:	fb03 5711 	mls	r7, r3, r1, r5
 800a4be:	5dc7      	ldrb	r7, [r0, r7]
 800a4c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a4c4:	462f      	mov	r7, r5
 800a4c6:	42bb      	cmp	r3, r7
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	d9f4      	bls.n	800a4b6 <_printf_i+0x112>
 800a4cc:	2b08      	cmp	r3, #8
 800a4ce:	d10b      	bne.n	800a4e8 <_printf_i+0x144>
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	07df      	lsls	r7, r3, #31
 800a4d4:	d508      	bpl.n	800a4e8 <_printf_i+0x144>
 800a4d6:	6923      	ldr	r3, [r4, #16]
 800a4d8:	6861      	ldr	r1, [r4, #4]
 800a4da:	4299      	cmp	r1, r3
 800a4dc:	bfde      	ittt	le
 800a4de:	2330      	movle	r3, #48	@ 0x30
 800a4e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a4e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a4e8:	1b92      	subs	r2, r2, r6
 800a4ea:	6122      	str	r2, [r4, #16]
 800a4ec:	f8cd a000 	str.w	sl, [sp]
 800a4f0:	464b      	mov	r3, r9
 800a4f2:	aa03      	add	r2, sp, #12
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	4640      	mov	r0, r8
 800a4f8:	f7ff fee6 	bl	800a2c8 <_printf_common>
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d14a      	bne.n	800a596 <_printf_i+0x1f2>
 800a500:	f04f 30ff 	mov.w	r0, #4294967295
 800a504:	b004      	add	sp, #16
 800a506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50a:	6823      	ldr	r3, [r4, #0]
 800a50c:	f043 0320 	orr.w	r3, r3, #32
 800a510:	6023      	str	r3, [r4, #0]
 800a512:	4833      	ldr	r0, [pc, #204]	@ (800a5e0 <_printf_i+0x23c>)
 800a514:	2778      	movs	r7, #120	@ 0x78
 800a516:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	6831      	ldr	r1, [r6, #0]
 800a51e:	061f      	lsls	r7, r3, #24
 800a520:	f851 5b04 	ldr.w	r5, [r1], #4
 800a524:	d402      	bmi.n	800a52c <_printf_i+0x188>
 800a526:	065f      	lsls	r7, r3, #25
 800a528:	bf48      	it	mi
 800a52a:	b2ad      	uxthmi	r5, r5
 800a52c:	6031      	str	r1, [r6, #0]
 800a52e:	07d9      	lsls	r1, r3, #31
 800a530:	bf44      	itt	mi
 800a532:	f043 0320 	orrmi.w	r3, r3, #32
 800a536:	6023      	strmi	r3, [r4, #0]
 800a538:	b11d      	cbz	r5, 800a542 <_printf_i+0x19e>
 800a53a:	2310      	movs	r3, #16
 800a53c:	e7ac      	b.n	800a498 <_printf_i+0xf4>
 800a53e:	4827      	ldr	r0, [pc, #156]	@ (800a5dc <_printf_i+0x238>)
 800a540:	e7e9      	b.n	800a516 <_printf_i+0x172>
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	f023 0320 	bic.w	r3, r3, #32
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	e7f6      	b.n	800a53a <_printf_i+0x196>
 800a54c:	4616      	mov	r6, r2
 800a54e:	e7bd      	b.n	800a4cc <_printf_i+0x128>
 800a550:	6833      	ldr	r3, [r6, #0]
 800a552:	6825      	ldr	r5, [r4, #0]
 800a554:	6961      	ldr	r1, [r4, #20]
 800a556:	1d18      	adds	r0, r3, #4
 800a558:	6030      	str	r0, [r6, #0]
 800a55a:	062e      	lsls	r6, r5, #24
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	d501      	bpl.n	800a564 <_printf_i+0x1c0>
 800a560:	6019      	str	r1, [r3, #0]
 800a562:	e002      	b.n	800a56a <_printf_i+0x1c6>
 800a564:	0668      	lsls	r0, r5, #25
 800a566:	d5fb      	bpl.n	800a560 <_printf_i+0x1bc>
 800a568:	8019      	strh	r1, [r3, #0]
 800a56a:	2300      	movs	r3, #0
 800a56c:	6123      	str	r3, [r4, #16]
 800a56e:	4616      	mov	r6, r2
 800a570:	e7bc      	b.n	800a4ec <_printf_i+0x148>
 800a572:	6833      	ldr	r3, [r6, #0]
 800a574:	1d1a      	adds	r2, r3, #4
 800a576:	6032      	str	r2, [r6, #0]
 800a578:	681e      	ldr	r6, [r3, #0]
 800a57a:	6862      	ldr	r2, [r4, #4]
 800a57c:	2100      	movs	r1, #0
 800a57e:	4630      	mov	r0, r6
 800a580:	f7f5 fe2e 	bl	80001e0 <memchr>
 800a584:	b108      	cbz	r0, 800a58a <_printf_i+0x1e6>
 800a586:	1b80      	subs	r0, r0, r6
 800a588:	6060      	str	r0, [r4, #4]
 800a58a:	6863      	ldr	r3, [r4, #4]
 800a58c:	6123      	str	r3, [r4, #16]
 800a58e:	2300      	movs	r3, #0
 800a590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a594:	e7aa      	b.n	800a4ec <_printf_i+0x148>
 800a596:	6923      	ldr	r3, [r4, #16]
 800a598:	4632      	mov	r2, r6
 800a59a:	4649      	mov	r1, r9
 800a59c:	4640      	mov	r0, r8
 800a59e:	47d0      	blx	sl
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d0ad      	beq.n	800a500 <_printf_i+0x15c>
 800a5a4:	6823      	ldr	r3, [r4, #0]
 800a5a6:	079b      	lsls	r3, r3, #30
 800a5a8:	d413      	bmi.n	800a5d2 <_printf_i+0x22e>
 800a5aa:	68e0      	ldr	r0, [r4, #12]
 800a5ac:	9b03      	ldr	r3, [sp, #12]
 800a5ae:	4298      	cmp	r0, r3
 800a5b0:	bfb8      	it	lt
 800a5b2:	4618      	movlt	r0, r3
 800a5b4:	e7a6      	b.n	800a504 <_printf_i+0x160>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	4632      	mov	r2, r6
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	4640      	mov	r0, r8
 800a5be:	47d0      	blx	sl
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d09d      	beq.n	800a500 <_printf_i+0x15c>
 800a5c4:	3501      	adds	r5, #1
 800a5c6:	68e3      	ldr	r3, [r4, #12]
 800a5c8:	9903      	ldr	r1, [sp, #12]
 800a5ca:	1a5b      	subs	r3, r3, r1
 800a5cc:	42ab      	cmp	r3, r5
 800a5ce:	dcf2      	bgt.n	800a5b6 <_printf_i+0x212>
 800a5d0:	e7eb      	b.n	800a5aa <_printf_i+0x206>
 800a5d2:	2500      	movs	r5, #0
 800a5d4:	f104 0619 	add.w	r6, r4, #25
 800a5d8:	e7f5      	b.n	800a5c6 <_printf_i+0x222>
 800a5da:	bf00      	nop
 800a5dc:	0800e73a 	.word	0x0800e73a
 800a5e0:	0800e74b 	.word	0x0800e74b

0800a5e4 <_scanf_float>:
 800a5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e8:	b087      	sub	sp, #28
 800a5ea:	4617      	mov	r7, r2
 800a5ec:	9303      	str	r3, [sp, #12]
 800a5ee:	688b      	ldr	r3, [r1, #8]
 800a5f0:	1e5a      	subs	r2, r3, #1
 800a5f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a5f6:	bf81      	itttt	hi
 800a5f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a5fc:	eb03 0b05 	addhi.w	fp, r3, r5
 800a600:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a604:	608b      	strhi	r3, [r1, #8]
 800a606:	680b      	ldr	r3, [r1, #0]
 800a608:	460a      	mov	r2, r1
 800a60a:	f04f 0500 	mov.w	r5, #0
 800a60e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a612:	f842 3b1c 	str.w	r3, [r2], #28
 800a616:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a61a:	4680      	mov	r8, r0
 800a61c:	460c      	mov	r4, r1
 800a61e:	bf98      	it	ls
 800a620:	f04f 0b00 	movls.w	fp, #0
 800a624:	9201      	str	r2, [sp, #4]
 800a626:	4616      	mov	r6, r2
 800a628:	46aa      	mov	sl, r5
 800a62a:	46a9      	mov	r9, r5
 800a62c:	9502      	str	r5, [sp, #8]
 800a62e:	68a2      	ldr	r2, [r4, #8]
 800a630:	b152      	cbz	r2, 800a648 <_scanf_float+0x64>
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	2b4e      	cmp	r3, #78	@ 0x4e
 800a638:	d864      	bhi.n	800a704 <_scanf_float+0x120>
 800a63a:	2b40      	cmp	r3, #64	@ 0x40
 800a63c:	d83c      	bhi.n	800a6b8 <_scanf_float+0xd4>
 800a63e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a642:	b2c8      	uxtb	r0, r1
 800a644:	280e      	cmp	r0, #14
 800a646:	d93a      	bls.n	800a6be <_scanf_float+0xda>
 800a648:	f1b9 0f00 	cmp.w	r9, #0
 800a64c:	d003      	beq.n	800a656 <_scanf_float+0x72>
 800a64e:	6823      	ldr	r3, [r4, #0]
 800a650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a65a:	f1ba 0f01 	cmp.w	sl, #1
 800a65e:	f200 8117 	bhi.w	800a890 <_scanf_float+0x2ac>
 800a662:	9b01      	ldr	r3, [sp, #4]
 800a664:	429e      	cmp	r6, r3
 800a666:	f200 8108 	bhi.w	800a87a <_scanf_float+0x296>
 800a66a:	2001      	movs	r0, #1
 800a66c:	b007      	add	sp, #28
 800a66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a672:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a676:	2a0d      	cmp	r2, #13
 800a678:	d8e6      	bhi.n	800a648 <_scanf_float+0x64>
 800a67a:	a101      	add	r1, pc, #4	@ (adr r1, 800a680 <_scanf_float+0x9c>)
 800a67c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a680:	0800a7c7 	.word	0x0800a7c7
 800a684:	0800a649 	.word	0x0800a649
 800a688:	0800a649 	.word	0x0800a649
 800a68c:	0800a649 	.word	0x0800a649
 800a690:	0800a827 	.word	0x0800a827
 800a694:	0800a7ff 	.word	0x0800a7ff
 800a698:	0800a649 	.word	0x0800a649
 800a69c:	0800a649 	.word	0x0800a649
 800a6a0:	0800a7d5 	.word	0x0800a7d5
 800a6a4:	0800a649 	.word	0x0800a649
 800a6a8:	0800a649 	.word	0x0800a649
 800a6ac:	0800a649 	.word	0x0800a649
 800a6b0:	0800a649 	.word	0x0800a649
 800a6b4:	0800a78d 	.word	0x0800a78d
 800a6b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a6bc:	e7db      	b.n	800a676 <_scanf_float+0x92>
 800a6be:	290e      	cmp	r1, #14
 800a6c0:	d8c2      	bhi.n	800a648 <_scanf_float+0x64>
 800a6c2:	a001      	add	r0, pc, #4	@ (adr r0, 800a6c8 <_scanf_float+0xe4>)
 800a6c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a6c8:	0800a77d 	.word	0x0800a77d
 800a6cc:	0800a649 	.word	0x0800a649
 800a6d0:	0800a77d 	.word	0x0800a77d
 800a6d4:	0800a813 	.word	0x0800a813
 800a6d8:	0800a649 	.word	0x0800a649
 800a6dc:	0800a725 	.word	0x0800a725
 800a6e0:	0800a763 	.word	0x0800a763
 800a6e4:	0800a763 	.word	0x0800a763
 800a6e8:	0800a763 	.word	0x0800a763
 800a6ec:	0800a763 	.word	0x0800a763
 800a6f0:	0800a763 	.word	0x0800a763
 800a6f4:	0800a763 	.word	0x0800a763
 800a6f8:	0800a763 	.word	0x0800a763
 800a6fc:	0800a763 	.word	0x0800a763
 800a700:	0800a763 	.word	0x0800a763
 800a704:	2b6e      	cmp	r3, #110	@ 0x6e
 800a706:	d809      	bhi.n	800a71c <_scanf_float+0x138>
 800a708:	2b60      	cmp	r3, #96	@ 0x60
 800a70a:	d8b2      	bhi.n	800a672 <_scanf_float+0x8e>
 800a70c:	2b54      	cmp	r3, #84	@ 0x54
 800a70e:	d07b      	beq.n	800a808 <_scanf_float+0x224>
 800a710:	2b59      	cmp	r3, #89	@ 0x59
 800a712:	d199      	bne.n	800a648 <_scanf_float+0x64>
 800a714:	2d07      	cmp	r5, #7
 800a716:	d197      	bne.n	800a648 <_scanf_float+0x64>
 800a718:	2508      	movs	r5, #8
 800a71a:	e02c      	b.n	800a776 <_scanf_float+0x192>
 800a71c:	2b74      	cmp	r3, #116	@ 0x74
 800a71e:	d073      	beq.n	800a808 <_scanf_float+0x224>
 800a720:	2b79      	cmp	r3, #121	@ 0x79
 800a722:	e7f6      	b.n	800a712 <_scanf_float+0x12e>
 800a724:	6821      	ldr	r1, [r4, #0]
 800a726:	05c8      	lsls	r0, r1, #23
 800a728:	d51b      	bpl.n	800a762 <_scanf_float+0x17e>
 800a72a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a72e:	6021      	str	r1, [r4, #0]
 800a730:	f109 0901 	add.w	r9, r9, #1
 800a734:	f1bb 0f00 	cmp.w	fp, #0
 800a738:	d003      	beq.n	800a742 <_scanf_float+0x15e>
 800a73a:	3201      	adds	r2, #1
 800a73c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a740:	60a2      	str	r2, [r4, #8]
 800a742:	68a3      	ldr	r3, [r4, #8]
 800a744:	3b01      	subs	r3, #1
 800a746:	60a3      	str	r3, [r4, #8]
 800a748:	6923      	ldr	r3, [r4, #16]
 800a74a:	3301      	adds	r3, #1
 800a74c:	6123      	str	r3, [r4, #16]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	3b01      	subs	r3, #1
 800a752:	2b00      	cmp	r3, #0
 800a754:	607b      	str	r3, [r7, #4]
 800a756:	f340 8087 	ble.w	800a868 <_scanf_float+0x284>
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	3301      	adds	r3, #1
 800a75e:	603b      	str	r3, [r7, #0]
 800a760:	e765      	b.n	800a62e <_scanf_float+0x4a>
 800a762:	eb1a 0105 	adds.w	r1, sl, r5
 800a766:	f47f af6f 	bne.w	800a648 <_scanf_float+0x64>
 800a76a:	6822      	ldr	r2, [r4, #0]
 800a76c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a770:	6022      	str	r2, [r4, #0]
 800a772:	460d      	mov	r5, r1
 800a774:	468a      	mov	sl, r1
 800a776:	f806 3b01 	strb.w	r3, [r6], #1
 800a77a:	e7e2      	b.n	800a742 <_scanf_float+0x15e>
 800a77c:	6822      	ldr	r2, [r4, #0]
 800a77e:	0610      	lsls	r0, r2, #24
 800a780:	f57f af62 	bpl.w	800a648 <_scanf_float+0x64>
 800a784:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a788:	6022      	str	r2, [r4, #0]
 800a78a:	e7f4      	b.n	800a776 <_scanf_float+0x192>
 800a78c:	f1ba 0f00 	cmp.w	sl, #0
 800a790:	d10e      	bne.n	800a7b0 <_scanf_float+0x1cc>
 800a792:	f1b9 0f00 	cmp.w	r9, #0
 800a796:	d10e      	bne.n	800a7b6 <_scanf_float+0x1d2>
 800a798:	6822      	ldr	r2, [r4, #0]
 800a79a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a79e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a7a2:	d108      	bne.n	800a7b6 <_scanf_float+0x1d2>
 800a7a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a7a8:	6022      	str	r2, [r4, #0]
 800a7aa:	f04f 0a01 	mov.w	sl, #1
 800a7ae:	e7e2      	b.n	800a776 <_scanf_float+0x192>
 800a7b0:	f1ba 0f02 	cmp.w	sl, #2
 800a7b4:	d055      	beq.n	800a862 <_scanf_float+0x27e>
 800a7b6:	2d01      	cmp	r5, #1
 800a7b8:	d002      	beq.n	800a7c0 <_scanf_float+0x1dc>
 800a7ba:	2d04      	cmp	r5, #4
 800a7bc:	f47f af44 	bne.w	800a648 <_scanf_float+0x64>
 800a7c0:	3501      	adds	r5, #1
 800a7c2:	b2ed      	uxtb	r5, r5
 800a7c4:	e7d7      	b.n	800a776 <_scanf_float+0x192>
 800a7c6:	f1ba 0f01 	cmp.w	sl, #1
 800a7ca:	f47f af3d 	bne.w	800a648 <_scanf_float+0x64>
 800a7ce:	f04f 0a02 	mov.w	sl, #2
 800a7d2:	e7d0      	b.n	800a776 <_scanf_float+0x192>
 800a7d4:	b97d      	cbnz	r5, 800a7f6 <_scanf_float+0x212>
 800a7d6:	f1b9 0f00 	cmp.w	r9, #0
 800a7da:	f47f af38 	bne.w	800a64e <_scanf_float+0x6a>
 800a7de:	6822      	ldr	r2, [r4, #0]
 800a7e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a7e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a7e8:	f040 8108 	bne.w	800a9fc <_scanf_float+0x418>
 800a7ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a7f0:	6022      	str	r2, [r4, #0]
 800a7f2:	2501      	movs	r5, #1
 800a7f4:	e7bf      	b.n	800a776 <_scanf_float+0x192>
 800a7f6:	2d03      	cmp	r5, #3
 800a7f8:	d0e2      	beq.n	800a7c0 <_scanf_float+0x1dc>
 800a7fa:	2d05      	cmp	r5, #5
 800a7fc:	e7de      	b.n	800a7bc <_scanf_float+0x1d8>
 800a7fe:	2d02      	cmp	r5, #2
 800a800:	f47f af22 	bne.w	800a648 <_scanf_float+0x64>
 800a804:	2503      	movs	r5, #3
 800a806:	e7b6      	b.n	800a776 <_scanf_float+0x192>
 800a808:	2d06      	cmp	r5, #6
 800a80a:	f47f af1d 	bne.w	800a648 <_scanf_float+0x64>
 800a80e:	2507      	movs	r5, #7
 800a810:	e7b1      	b.n	800a776 <_scanf_float+0x192>
 800a812:	6822      	ldr	r2, [r4, #0]
 800a814:	0591      	lsls	r1, r2, #22
 800a816:	f57f af17 	bpl.w	800a648 <_scanf_float+0x64>
 800a81a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a81e:	6022      	str	r2, [r4, #0]
 800a820:	f8cd 9008 	str.w	r9, [sp, #8]
 800a824:	e7a7      	b.n	800a776 <_scanf_float+0x192>
 800a826:	6822      	ldr	r2, [r4, #0]
 800a828:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a82c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a830:	d006      	beq.n	800a840 <_scanf_float+0x25c>
 800a832:	0550      	lsls	r0, r2, #21
 800a834:	f57f af08 	bpl.w	800a648 <_scanf_float+0x64>
 800a838:	f1b9 0f00 	cmp.w	r9, #0
 800a83c:	f000 80de 	beq.w	800a9fc <_scanf_float+0x418>
 800a840:	0591      	lsls	r1, r2, #22
 800a842:	bf58      	it	pl
 800a844:	9902      	ldrpl	r1, [sp, #8]
 800a846:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a84a:	bf58      	it	pl
 800a84c:	eba9 0101 	subpl.w	r1, r9, r1
 800a850:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a854:	bf58      	it	pl
 800a856:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a85a:	6022      	str	r2, [r4, #0]
 800a85c:	f04f 0900 	mov.w	r9, #0
 800a860:	e789      	b.n	800a776 <_scanf_float+0x192>
 800a862:	f04f 0a03 	mov.w	sl, #3
 800a866:	e786      	b.n	800a776 <_scanf_float+0x192>
 800a868:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a86c:	4639      	mov	r1, r7
 800a86e:	4640      	mov	r0, r8
 800a870:	4798      	blx	r3
 800a872:	2800      	cmp	r0, #0
 800a874:	f43f aedb 	beq.w	800a62e <_scanf_float+0x4a>
 800a878:	e6e6      	b.n	800a648 <_scanf_float+0x64>
 800a87a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a87e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a882:	463a      	mov	r2, r7
 800a884:	4640      	mov	r0, r8
 800a886:	4798      	blx	r3
 800a888:	6923      	ldr	r3, [r4, #16]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	6123      	str	r3, [r4, #16]
 800a88e:	e6e8      	b.n	800a662 <_scanf_float+0x7e>
 800a890:	1e6b      	subs	r3, r5, #1
 800a892:	2b06      	cmp	r3, #6
 800a894:	d824      	bhi.n	800a8e0 <_scanf_float+0x2fc>
 800a896:	2d02      	cmp	r5, #2
 800a898:	d836      	bhi.n	800a908 <_scanf_float+0x324>
 800a89a:	9b01      	ldr	r3, [sp, #4]
 800a89c:	429e      	cmp	r6, r3
 800a89e:	f67f aee4 	bls.w	800a66a <_scanf_float+0x86>
 800a8a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8aa:	463a      	mov	r2, r7
 800a8ac:	4640      	mov	r0, r8
 800a8ae:	4798      	blx	r3
 800a8b0:	6923      	ldr	r3, [r4, #16]
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	6123      	str	r3, [r4, #16]
 800a8b6:	e7f0      	b.n	800a89a <_scanf_float+0x2b6>
 800a8b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a8c0:	463a      	mov	r2, r7
 800a8c2:	4640      	mov	r0, r8
 800a8c4:	4798      	blx	r3
 800a8c6:	6923      	ldr	r3, [r4, #16]
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	6123      	str	r3, [r4, #16]
 800a8cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8d0:	fa5f fa8a 	uxtb.w	sl, sl
 800a8d4:	f1ba 0f02 	cmp.w	sl, #2
 800a8d8:	d1ee      	bne.n	800a8b8 <_scanf_float+0x2d4>
 800a8da:	3d03      	subs	r5, #3
 800a8dc:	b2ed      	uxtb	r5, r5
 800a8de:	1b76      	subs	r6, r6, r5
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	05da      	lsls	r2, r3, #23
 800a8e4:	d530      	bpl.n	800a948 <_scanf_float+0x364>
 800a8e6:	055b      	lsls	r3, r3, #21
 800a8e8:	d511      	bpl.n	800a90e <_scanf_float+0x32a>
 800a8ea:	9b01      	ldr	r3, [sp, #4]
 800a8ec:	429e      	cmp	r6, r3
 800a8ee:	f67f aebc 	bls.w	800a66a <_scanf_float+0x86>
 800a8f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8fa:	463a      	mov	r2, r7
 800a8fc:	4640      	mov	r0, r8
 800a8fe:	4798      	blx	r3
 800a900:	6923      	ldr	r3, [r4, #16]
 800a902:	3b01      	subs	r3, #1
 800a904:	6123      	str	r3, [r4, #16]
 800a906:	e7f0      	b.n	800a8ea <_scanf_float+0x306>
 800a908:	46aa      	mov	sl, r5
 800a90a:	46b3      	mov	fp, r6
 800a90c:	e7de      	b.n	800a8cc <_scanf_float+0x2e8>
 800a90e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a912:	6923      	ldr	r3, [r4, #16]
 800a914:	2965      	cmp	r1, #101	@ 0x65
 800a916:	f103 33ff 	add.w	r3, r3, #4294967295
 800a91a:	f106 35ff 	add.w	r5, r6, #4294967295
 800a91e:	6123      	str	r3, [r4, #16]
 800a920:	d00c      	beq.n	800a93c <_scanf_float+0x358>
 800a922:	2945      	cmp	r1, #69	@ 0x45
 800a924:	d00a      	beq.n	800a93c <_scanf_float+0x358>
 800a926:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a92a:	463a      	mov	r2, r7
 800a92c:	4640      	mov	r0, r8
 800a92e:	4798      	blx	r3
 800a930:	6923      	ldr	r3, [r4, #16]
 800a932:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a936:	3b01      	subs	r3, #1
 800a938:	1eb5      	subs	r5, r6, #2
 800a93a:	6123      	str	r3, [r4, #16]
 800a93c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a940:	463a      	mov	r2, r7
 800a942:	4640      	mov	r0, r8
 800a944:	4798      	blx	r3
 800a946:	462e      	mov	r6, r5
 800a948:	6822      	ldr	r2, [r4, #0]
 800a94a:	f012 0210 	ands.w	r2, r2, #16
 800a94e:	d001      	beq.n	800a954 <_scanf_float+0x370>
 800a950:	2000      	movs	r0, #0
 800a952:	e68b      	b.n	800a66c <_scanf_float+0x88>
 800a954:	7032      	strb	r2, [r6, #0]
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a95c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a960:	d11c      	bne.n	800a99c <_scanf_float+0x3b8>
 800a962:	9b02      	ldr	r3, [sp, #8]
 800a964:	454b      	cmp	r3, r9
 800a966:	eba3 0209 	sub.w	r2, r3, r9
 800a96a:	d123      	bne.n	800a9b4 <_scanf_float+0x3d0>
 800a96c:	9901      	ldr	r1, [sp, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	4640      	mov	r0, r8
 800a972:	f002 fd1d 	bl	800d3b0 <_strtod_r>
 800a976:	9b03      	ldr	r3, [sp, #12]
 800a978:	6821      	ldr	r1, [r4, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f011 0f02 	tst.w	r1, #2
 800a980:	ec57 6b10 	vmov	r6, r7, d0
 800a984:	f103 0204 	add.w	r2, r3, #4
 800a988:	d01f      	beq.n	800a9ca <_scanf_float+0x3e6>
 800a98a:	9903      	ldr	r1, [sp, #12]
 800a98c:	600a      	str	r2, [r1, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	e9c3 6700 	strd	r6, r7, [r3]
 800a994:	68e3      	ldr	r3, [r4, #12]
 800a996:	3301      	adds	r3, #1
 800a998:	60e3      	str	r3, [r4, #12]
 800a99a:	e7d9      	b.n	800a950 <_scanf_float+0x36c>
 800a99c:	9b04      	ldr	r3, [sp, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d0e4      	beq.n	800a96c <_scanf_float+0x388>
 800a9a2:	9905      	ldr	r1, [sp, #20]
 800a9a4:	230a      	movs	r3, #10
 800a9a6:	3101      	adds	r1, #1
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	f002 fd81 	bl	800d4b0 <_strtol_r>
 800a9ae:	9b04      	ldr	r3, [sp, #16]
 800a9b0:	9e05      	ldr	r6, [sp, #20]
 800a9b2:	1ac2      	subs	r2, r0, r3
 800a9b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a9b8:	429e      	cmp	r6, r3
 800a9ba:	bf28      	it	cs
 800a9bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a9c0:	4910      	ldr	r1, [pc, #64]	@ (800aa04 <_scanf_float+0x420>)
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f000 f918 	bl	800abf8 <siprintf>
 800a9c8:	e7d0      	b.n	800a96c <_scanf_float+0x388>
 800a9ca:	f011 0f04 	tst.w	r1, #4
 800a9ce:	9903      	ldr	r1, [sp, #12]
 800a9d0:	600a      	str	r2, [r1, #0]
 800a9d2:	d1dc      	bne.n	800a98e <_scanf_float+0x3aa>
 800a9d4:	681d      	ldr	r5, [r3, #0]
 800a9d6:	4632      	mov	r2, r6
 800a9d8:	463b      	mov	r3, r7
 800a9da:	4630      	mov	r0, r6
 800a9dc:	4639      	mov	r1, r7
 800a9de:	f7f6 f8ad 	bl	8000b3c <__aeabi_dcmpun>
 800a9e2:	b128      	cbz	r0, 800a9f0 <_scanf_float+0x40c>
 800a9e4:	4808      	ldr	r0, [pc, #32]	@ (800aa08 <_scanf_float+0x424>)
 800a9e6:	f000 fabd 	bl	800af64 <nanf>
 800a9ea:	ed85 0a00 	vstr	s0, [r5]
 800a9ee:	e7d1      	b.n	800a994 <_scanf_float+0x3b0>
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	4639      	mov	r1, r7
 800a9f4:	f7f6 f900 	bl	8000bf8 <__aeabi_d2f>
 800a9f8:	6028      	str	r0, [r5, #0]
 800a9fa:	e7cb      	b.n	800a994 <_scanf_float+0x3b0>
 800a9fc:	f04f 0900 	mov.w	r9, #0
 800aa00:	e629      	b.n	800a656 <_scanf_float+0x72>
 800aa02:	bf00      	nop
 800aa04:	0800e75c 	.word	0x0800e75c
 800aa08:	0800e80d 	.word	0x0800e80d

0800aa0c <std>:
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	b510      	push	{r4, lr}
 800aa10:	4604      	mov	r4, r0
 800aa12:	e9c0 3300 	strd	r3, r3, [r0]
 800aa16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa1a:	6083      	str	r3, [r0, #8]
 800aa1c:	8181      	strh	r1, [r0, #12]
 800aa1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800aa20:	81c2      	strh	r2, [r0, #14]
 800aa22:	6183      	str	r3, [r0, #24]
 800aa24:	4619      	mov	r1, r3
 800aa26:	2208      	movs	r2, #8
 800aa28:	305c      	adds	r0, #92	@ 0x5c
 800aa2a:	f000 f948 	bl	800acbe <memset>
 800aa2e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa64 <std+0x58>)
 800aa30:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa32:	4b0d      	ldr	r3, [pc, #52]	@ (800aa68 <std+0x5c>)
 800aa34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aa36:	4b0d      	ldr	r3, [pc, #52]	@ (800aa6c <std+0x60>)
 800aa38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aa3a:	4b0d      	ldr	r3, [pc, #52]	@ (800aa70 <std+0x64>)
 800aa3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800aa3e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa74 <std+0x68>)
 800aa40:	6224      	str	r4, [r4, #32]
 800aa42:	429c      	cmp	r4, r3
 800aa44:	d006      	beq.n	800aa54 <std+0x48>
 800aa46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aa4a:	4294      	cmp	r4, r2
 800aa4c:	d002      	beq.n	800aa54 <std+0x48>
 800aa4e:	33d0      	adds	r3, #208	@ 0xd0
 800aa50:	429c      	cmp	r4, r3
 800aa52:	d105      	bne.n	800aa60 <std+0x54>
 800aa54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aa58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa5c:	f000 ba70 	b.w	800af40 <__retarget_lock_init_recursive>
 800aa60:	bd10      	pop	{r4, pc}
 800aa62:	bf00      	nop
 800aa64:	0800ac39 	.word	0x0800ac39
 800aa68:	0800ac5b 	.word	0x0800ac5b
 800aa6c:	0800ac93 	.word	0x0800ac93
 800aa70:	0800acb7 	.word	0x0800acb7
 800aa74:	20004618 	.word	0x20004618

0800aa78 <stdio_exit_handler>:
 800aa78:	4a02      	ldr	r2, [pc, #8]	@ (800aa84 <stdio_exit_handler+0xc>)
 800aa7a:	4903      	ldr	r1, [pc, #12]	@ (800aa88 <stdio_exit_handler+0x10>)
 800aa7c:	4803      	ldr	r0, [pc, #12]	@ (800aa8c <stdio_exit_handler+0x14>)
 800aa7e:	f000 b869 	b.w	800ab54 <_fwalk_sglue>
 800aa82:	bf00      	nop
 800aa84:	20000010 	.word	0x20000010
 800aa88:	0800d86d 	.word	0x0800d86d
 800aa8c:	20000020 	.word	0x20000020

0800aa90 <cleanup_stdio>:
 800aa90:	6841      	ldr	r1, [r0, #4]
 800aa92:	4b0c      	ldr	r3, [pc, #48]	@ (800aac4 <cleanup_stdio+0x34>)
 800aa94:	4299      	cmp	r1, r3
 800aa96:	b510      	push	{r4, lr}
 800aa98:	4604      	mov	r4, r0
 800aa9a:	d001      	beq.n	800aaa0 <cleanup_stdio+0x10>
 800aa9c:	f002 fee6 	bl	800d86c <_fflush_r>
 800aaa0:	68a1      	ldr	r1, [r4, #8]
 800aaa2:	4b09      	ldr	r3, [pc, #36]	@ (800aac8 <cleanup_stdio+0x38>)
 800aaa4:	4299      	cmp	r1, r3
 800aaa6:	d002      	beq.n	800aaae <cleanup_stdio+0x1e>
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f002 fedf 	bl	800d86c <_fflush_r>
 800aaae:	68e1      	ldr	r1, [r4, #12]
 800aab0:	4b06      	ldr	r3, [pc, #24]	@ (800aacc <cleanup_stdio+0x3c>)
 800aab2:	4299      	cmp	r1, r3
 800aab4:	d004      	beq.n	800aac0 <cleanup_stdio+0x30>
 800aab6:	4620      	mov	r0, r4
 800aab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aabc:	f002 bed6 	b.w	800d86c <_fflush_r>
 800aac0:	bd10      	pop	{r4, pc}
 800aac2:	bf00      	nop
 800aac4:	20004618 	.word	0x20004618
 800aac8:	20004680 	.word	0x20004680
 800aacc:	200046e8 	.word	0x200046e8

0800aad0 <global_stdio_init.part.0>:
 800aad0:	b510      	push	{r4, lr}
 800aad2:	4b0b      	ldr	r3, [pc, #44]	@ (800ab00 <global_stdio_init.part.0+0x30>)
 800aad4:	4c0b      	ldr	r4, [pc, #44]	@ (800ab04 <global_stdio_init.part.0+0x34>)
 800aad6:	4a0c      	ldr	r2, [pc, #48]	@ (800ab08 <global_stdio_init.part.0+0x38>)
 800aad8:	601a      	str	r2, [r3, #0]
 800aada:	4620      	mov	r0, r4
 800aadc:	2200      	movs	r2, #0
 800aade:	2104      	movs	r1, #4
 800aae0:	f7ff ff94 	bl	800aa0c <std>
 800aae4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aae8:	2201      	movs	r2, #1
 800aaea:	2109      	movs	r1, #9
 800aaec:	f7ff ff8e 	bl	800aa0c <std>
 800aaf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aaf4:	2202      	movs	r2, #2
 800aaf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aafa:	2112      	movs	r1, #18
 800aafc:	f7ff bf86 	b.w	800aa0c <std>
 800ab00:	20004750 	.word	0x20004750
 800ab04:	20004618 	.word	0x20004618
 800ab08:	0800aa79 	.word	0x0800aa79

0800ab0c <__sfp_lock_acquire>:
 800ab0c:	4801      	ldr	r0, [pc, #4]	@ (800ab14 <__sfp_lock_acquire+0x8>)
 800ab0e:	f000 ba18 	b.w	800af42 <__retarget_lock_acquire_recursive>
 800ab12:	bf00      	nop
 800ab14:	20004759 	.word	0x20004759

0800ab18 <__sfp_lock_release>:
 800ab18:	4801      	ldr	r0, [pc, #4]	@ (800ab20 <__sfp_lock_release+0x8>)
 800ab1a:	f000 ba13 	b.w	800af44 <__retarget_lock_release_recursive>
 800ab1e:	bf00      	nop
 800ab20:	20004759 	.word	0x20004759

0800ab24 <__sinit>:
 800ab24:	b510      	push	{r4, lr}
 800ab26:	4604      	mov	r4, r0
 800ab28:	f7ff fff0 	bl	800ab0c <__sfp_lock_acquire>
 800ab2c:	6a23      	ldr	r3, [r4, #32]
 800ab2e:	b11b      	cbz	r3, 800ab38 <__sinit+0x14>
 800ab30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab34:	f7ff bff0 	b.w	800ab18 <__sfp_lock_release>
 800ab38:	4b04      	ldr	r3, [pc, #16]	@ (800ab4c <__sinit+0x28>)
 800ab3a:	6223      	str	r3, [r4, #32]
 800ab3c:	4b04      	ldr	r3, [pc, #16]	@ (800ab50 <__sinit+0x2c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1f5      	bne.n	800ab30 <__sinit+0xc>
 800ab44:	f7ff ffc4 	bl	800aad0 <global_stdio_init.part.0>
 800ab48:	e7f2      	b.n	800ab30 <__sinit+0xc>
 800ab4a:	bf00      	nop
 800ab4c:	0800aa91 	.word	0x0800aa91
 800ab50:	20004750 	.word	0x20004750

0800ab54 <_fwalk_sglue>:
 800ab54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab58:	4607      	mov	r7, r0
 800ab5a:	4688      	mov	r8, r1
 800ab5c:	4614      	mov	r4, r2
 800ab5e:	2600      	movs	r6, #0
 800ab60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab64:	f1b9 0901 	subs.w	r9, r9, #1
 800ab68:	d505      	bpl.n	800ab76 <_fwalk_sglue+0x22>
 800ab6a:	6824      	ldr	r4, [r4, #0]
 800ab6c:	2c00      	cmp	r4, #0
 800ab6e:	d1f7      	bne.n	800ab60 <_fwalk_sglue+0xc>
 800ab70:	4630      	mov	r0, r6
 800ab72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab76:	89ab      	ldrh	r3, [r5, #12]
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d907      	bls.n	800ab8c <_fwalk_sglue+0x38>
 800ab7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab80:	3301      	adds	r3, #1
 800ab82:	d003      	beq.n	800ab8c <_fwalk_sglue+0x38>
 800ab84:	4629      	mov	r1, r5
 800ab86:	4638      	mov	r0, r7
 800ab88:	47c0      	blx	r8
 800ab8a:	4306      	orrs	r6, r0
 800ab8c:	3568      	adds	r5, #104	@ 0x68
 800ab8e:	e7e9      	b.n	800ab64 <_fwalk_sglue+0x10>

0800ab90 <sniprintf>:
 800ab90:	b40c      	push	{r2, r3}
 800ab92:	b530      	push	{r4, r5, lr}
 800ab94:	4b17      	ldr	r3, [pc, #92]	@ (800abf4 <sniprintf+0x64>)
 800ab96:	1e0c      	subs	r4, r1, #0
 800ab98:	681d      	ldr	r5, [r3, #0]
 800ab9a:	b09d      	sub	sp, #116	@ 0x74
 800ab9c:	da08      	bge.n	800abb0 <sniprintf+0x20>
 800ab9e:	238b      	movs	r3, #139	@ 0x8b
 800aba0:	602b      	str	r3, [r5, #0]
 800aba2:	f04f 30ff 	mov.w	r0, #4294967295
 800aba6:	b01d      	add	sp, #116	@ 0x74
 800aba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abac:	b002      	add	sp, #8
 800abae:	4770      	bx	lr
 800abb0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800abb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800abb8:	bf14      	ite	ne
 800abba:	f104 33ff 	addne.w	r3, r4, #4294967295
 800abbe:	4623      	moveq	r3, r4
 800abc0:	9304      	str	r3, [sp, #16]
 800abc2:	9307      	str	r3, [sp, #28]
 800abc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800abc8:	9002      	str	r0, [sp, #8]
 800abca:	9006      	str	r0, [sp, #24]
 800abcc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800abd0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800abd2:	ab21      	add	r3, sp, #132	@ 0x84
 800abd4:	a902      	add	r1, sp, #8
 800abd6:	4628      	mov	r0, r5
 800abd8:	9301      	str	r3, [sp, #4]
 800abda:	f002 fcc7 	bl	800d56c <_svfiprintf_r>
 800abde:	1c43      	adds	r3, r0, #1
 800abe0:	bfbc      	itt	lt
 800abe2:	238b      	movlt	r3, #139	@ 0x8b
 800abe4:	602b      	strlt	r3, [r5, #0]
 800abe6:	2c00      	cmp	r4, #0
 800abe8:	d0dd      	beq.n	800aba6 <sniprintf+0x16>
 800abea:	9b02      	ldr	r3, [sp, #8]
 800abec:	2200      	movs	r2, #0
 800abee:	701a      	strb	r2, [r3, #0]
 800abf0:	e7d9      	b.n	800aba6 <sniprintf+0x16>
 800abf2:	bf00      	nop
 800abf4:	2000001c 	.word	0x2000001c

0800abf8 <siprintf>:
 800abf8:	b40e      	push	{r1, r2, r3}
 800abfa:	b500      	push	{lr}
 800abfc:	b09c      	sub	sp, #112	@ 0x70
 800abfe:	ab1d      	add	r3, sp, #116	@ 0x74
 800ac00:	9002      	str	r0, [sp, #8]
 800ac02:	9006      	str	r0, [sp, #24]
 800ac04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ac08:	4809      	ldr	r0, [pc, #36]	@ (800ac30 <siprintf+0x38>)
 800ac0a:	9107      	str	r1, [sp, #28]
 800ac0c:	9104      	str	r1, [sp, #16]
 800ac0e:	4909      	ldr	r1, [pc, #36]	@ (800ac34 <siprintf+0x3c>)
 800ac10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac14:	9105      	str	r1, [sp, #20]
 800ac16:	6800      	ldr	r0, [r0, #0]
 800ac18:	9301      	str	r3, [sp, #4]
 800ac1a:	a902      	add	r1, sp, #8
 800ac1c:	f002 fca6 	bl	800d56c <_svfiprintf_r>
 800ac20:	9b02      	ldr	r3, [sp, #8]
 800ac22:	2200      	movs	r2, #0
 800ac24:	701a      	strb	r2, [r3, #0]
 800ac26:	b01c      	add	sp, #112	@ 0x70
 800ac28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac2c:	b003      	add	sp, #12
 800ac2e:	4770      	bx	lr
 800ac30:	2000001c 	.word	0x2000001c
 800ac34:	ffff0208 	.word	0xffff0208

0800ac38 <__sread>:
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac40:	f000 f930 	bl	800aea4 <_read_r>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	bfab      	itete	ge
 800ac48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac4c:	181b      	addge	r3, r3, r0
 800ac4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac52:	bfac      	ite	ge
 800ac54:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac56:	81a3      	strhlt	r3, [r4, #12]
 800ac58:	bd10      	pop	{r4, pc}

0800ac5a <__swrite>:
 800ac5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5e:	461f      	mov	r7, r3
 800ac60:	898b      	ldrh	r3, [r1, #12]
 800ac62:	05db      	lsls	r3, r3, #23
 800ac64:	4605      	mov	r5, r0
 800ac66:	460c      	mov	r4, r1
 800ac68:	4616      	mov	r6, r2
 800ac6a:	d505      	bpl.n	800ac78 <__swrite+0x1e>
 800ac6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac70:	2302      	movs	r3, #2
 800ac72:	2200      	movs	r2, #0
 800ac74:	f000 f904 	bl	800ae80 <_lseek_r>
 800ac78:	89a3      	ldrh	r3, [r4, #12]
 800ac7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac82:	81a3      	strh	r3, [r4, #12]
 800ac84:	4632      	mov	r2, r6
 800ac86:	463b      	mov	r3, r7
 800ac88:	4628      	mov	r0, r5
 800ac8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8e:	f000 b91b 	b.w	800aec8 <_write_r>

0800ac92 <__sseek>:
 800ac92:	b510      	push	{r4, lr}
 800ac94:	460c      	mov	r4, r1
 800ac96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac9a:	f000 f8f1 	bl	800ae80 <_lseek_r>
 800ac9e:	1c43      	adds	r3, r0, #1
 800aca0:	89a3      	ldrh	r3, [r4, #12]
 800aca2:	bf15      	itete	ne
 800aca4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aca6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800acaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800acae:	81a3      	strheq	r3, [r4, #12]
 800acb0:	bf18      	it	ne
 800acb2:	81a3      	strhne	r3, [r4, #12]
 800acb4:	bd10      	pop	{r4, pc}

0800acb6 <__sclose>:
 800acb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acba:	f000 b87b 	b.w	800adb4 <_close_r>

0800acbe <memset>:
 800acbe:	4402      	add	r2, r0
 800acc0:	4603      	mov	r3, r0
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d100      	bne.n	800acc8 <memset+0xa>
 800acc6:	4770      	bx	lr
 800acc8:	f803 1b01 	strb.w	r1, [r3], #1
 800accc:	e7f9      	b.n	800acc2 <memset+0x4>

0800acce <strncpy>:
 800acce:	b510      	push	{r4, lr}
 800acd0:	3901      	subs	r1, #1
 800acd2:	4603      	mov	r3, r0
 800acd4:	b132      	cbz	r2, 800ace4 <strncpy+0x16>
 800acd6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800acda:	f803 4b01 	strb.w	r4, [r3], #1
 800acde:	3a01      	subs	r2, #1
 800ace0:	2c00      	cmp	r4, #0
 800ace2:	d1f7      	bne.n	800acd4 <strncpy+0x6>
 800ace4:	441a      	add	r2, r3
 800ace6:	2100      	movs	r1, #0
 800ace8:	4293      	cmp	r3, r2
 800acea:	d100      	bne.n	800acee <strncpy+0x20>
 800acec:	bd10      	pop	{r4, pc}
 800acee:	f803 1b01 	strb.w	r1, [r3], #1
 800acf2:	e7f9      	b.n	800ace8 <strncpy+0x1a>

0800acf4 <strtok>:
 800acf4:	4b16      	ldr	r3, [pc, #88]	@ (800ad50 <strtok+0x5c>)
 800acf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acfa:	681f      	ldr	r7, [r3, #0]
 800acfc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800acfe:	4605      	mov	r5, r0
 800ad00:	460e      	mov	r6, r1
 800ad02:	b9ec      	cbnz	r4, 800ad40 <strtok+0x4c>
 800ad04:	2050      	movs	r0, #80	@ 0x50
 800ad06:	f000 ffe9 	bl	800bcdc <malloc>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	6478      	str	r0, [r7, #68]	@ 0x44
 800ad0e:	b920      	cbnz	r0, 800ad1a <strtok+0x26>
 800ad10:	4b10      	ldr	r3, [pc, #64]	@ (800ad54 <strtok+0x60>)
 800ad12:	4811      	ldr	r0, [pc, #68]	@ (800ad58 <strtok+0x64>)
 800ad14:	215b      	movs	r1, #91	@ 0x5b
 800ad16:	f000 f92b 	bl	800af70 <__assert_func>
 800ad1a:	e9c0 4400 	strd	r4, r4, [r0]
 800ad1e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ad22:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ad26:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ad2a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ad2e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ad32:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ad36:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ad3a:	6184      	str	r4, [r0, #24]
 800ad3c:	7704      	strb	r4, [r0, #28]
 800ad3e:	6244      	str	r4, [r0, #36]	@ 0x24
 800ad40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad42:	4631      	mov	r1, r6
 800ad44:	4628      	mov	r0, r5
 800ad46:	2301      	movs	r3, #1
 800ad48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4c:	f000 b806 	b.w	800ad5c <__strtok_r>
 800ad50:	2000001c 	.word	0x2000001c
 800ad54:	0800e761 	.word	0x0800e761
 800ad58:	0800e778 	.word	0x0800e778

0800ad5c <__strtok_r>:
 800ad5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad5e:	4604      	mov	r4, r0
 800ad60:	b908      	cbnz	r0, 800ad66 <__strtok_r+0xa>
 800ad62:	6814      	ldr	r4, [r2, #0]
 800ad64:	b144      	cbz	r4, 800ad78 <__strtok_r+0x1c>
 800ad66:	4620      	mov	r0, r4
 800ad68:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ad6c:	460f      	mov	r7, r1
 800ad6e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ad72:	b91e      	cbnz	r6, 800ad7c <__strtok_r+0x20>
 800ad74:	b965      	cbnz	r5, 800ad90 <__strtok_r+0x34>
 800ad76:	6015      	str	r5, [r2, #0]
 800ad78:	2000      	movs	r0, #0
 800ad7a:	e005      	b.n	800ad88 <__strtok_r+0x2c>
 800ad7c:	42b5      	cmp	r5, r6
 800ad7e:	d1f6      	bne.n	800ad6e <__strtok_r+0x12>
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1f0      	bne.n	800ad66 <__strtok_r+0xa>
 800ad84:	6014      	str	r4, [r2, #0]
 800ad86:	7003      	strb	r3, [r0, #0]
 800ad88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad8a:	461c      	mov	r4, r3
 800ad8c:	e00c      	b.n	800ada8 <__strtok_r+0x4c>
 800ad8e:	b915      	cbnz	r5, 800ad96 <__strtok_r+0x3a>
 800ad90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad94:	460e      	mov	r6, r1
 800ad96:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ad9a:	42ab      	cmp	r3, r5
 800ad9c:	d1f7      	bne.n	800ad8e <__strtok_r+0x32>
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d0f3      	beq.n	800ad8a <__strtok_r+0x2e>
 800ada2:	2300      	movs	r3, #0
 800ada4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ada8:	6014      	str	r4, [r2, #0]
 800adaa:	e7ed      	b.n	800ad88 <__strtok_r+0x2c>

0800adac <_localeconv_r>:
 800adac:	4800      	ldr	r0, [pc, #0]	@ (800adb0 <_localeconv_r+0x4>)
 800adae:	4770      	bx	lr
 800adb0:	2000015c 	.word	0x2000015c

0800adb4 <_close_r>:
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	4d06      	ldr	r5, [pc, #24]	@ (800add0 <_close_r+0x1c>)
 800adb8:	2300      	movs	r3, #0
 800adba:	4604      	mov	r4, r0
 800adbc:	4608      	mov	r0, r1
 800adbe:	602b      	str	r3, [r5, #0]
 800adc0:	f7f7 fb16 	bl	80023f0 <_close>
 800adc4:	1c43      	adds	r3, r0, #1
 800adc6:	d102      	bne.n	800adce <_close_r+0x1a>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	b103      	cbz	r3, 800adce <_close_r+0x1a>
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	bd38      	pop	{r3, r4, r5, pc}
 800add0:	20004754 	.word	0x20004754

0800add4 <_reclaim_reent>:
 800add4:	4b29      	ldr	r3, [pc, #164]	@ (800ae7c <_reclaim_reent+0xa8>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4283      	cmp	r3, r0
 800adda:	b570      	push	{r4, r5, r6, lr}
 800addc:	4604      	mov	r4, r0
 800adde:	d04b      	beq.n	800ae78 <_reclaim_reent+0xa4>
 800ade0:	69c3      	ldr	r3, [r0, #28]
 800ade2:	b1ab      	cbz	r3, 800ae10 <_reclaim_reent+0x3c>
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	b16b      	cbz	r3, 800ae04 <_reclaim_reent+0x30>
 800ade8:	2500      	movs	r5, #0
 800adea:	69e3      	ldr	r3, [r4, #28]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	5959      	ldr	r1, [r3, r5]
 800adf0:	2900      	cmp	r1, #0
 800adf2:	d13b      	bne.n	800ae6c <_reclaim_reent+0x98>
 800adf4:	3504      	adds	r5, #4
 800adf6:	2d80      	cmp	r5, #128	@ 0x80
 800adf8:	d1f7      	bne.n	800adea <_reclaim_reent+0x16>
 800adfa:	69e3      	ldr	r3, [r4, #28]
 800adfc:	4620      	mov	r0, r4
 800adfe:	68d9      	ldr	r1, [r3, #12]
 800ae00:	f000 ff22 	bl	800bc48 <_free_r>
 800ae04:	69e3      	ldr	r3, [r4, #28]
 800ae06:	6819      	ldr	r1, [r3, #0]
 800ae08:	b111      	cbz	r1, 800ae10 <_reclaim_reent+0x3c>
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f000 ff1c 	bl	800bc48 <_free_r>
 800ae10:	6961      	ldr	r1, [r4, #20]
 800ae12:	b111      	cbz	r1, 800ae1a <_reclaim_reent+0x46>
 800ae14:	4620      	mov	r0, r4
 800ae16:	f000 ff17 	bl	800bc48 <_free_r>
 800ae1a:	69e1      	ldr	r1, [r4, #28]
 800ae1c:	b111      	cbz	r1, 800ae24 <_reclaim_reent+0x50>
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f000 ff12 	bl	800bc48 <_free_r>
 800ae24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ae26:	b111      	cbz	r1, 800ae2e <_reclaim_reent+0x5a>
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f000 ff0d 	bl	800bc48 <_free_r>
 800ae2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae30:	b111      	cbz	r1, 800ae38 <_reclaim_reent+0x64>
 800ae32:	4620      	mov	r0, r4
 800ae34:	f000 ff08 	bl	800bc48 <_free_r>
 800ae38:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ae3a:	b111      	cbz	r1, 800ae42 <_reclaim_reent+0x6e>
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	f000 ff03 	bl	800bc48 <_free_r>
 800ae42:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ae44:	b111      	cbz	r1, 800ae4c <_reclaim_reent+0x78>
 800ae46:	4620      	mov	r0, r4
 800ae48:	f000 fefe 	bl	800bc48 <_free_r>
 800ae4c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ae4e:	b111      	cbz	r1, 800ae56 <_reclaim_reent+0x82>
 800ae50:	4620      	mov	r0, r4
 800ae52:	f000 fef9 	bl	800bc48 <_free_r>
 800ae56:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ae58:	b111      	cbz	r1, 800ae60 <_reclaim_reent+0x8c>
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f000 fef4 	bl	800bc48 <_free_r>
 800ae60:	6a23      	ldr	r3, [r4, #32]
 800ae62:	b14b      	cbz	r3, 800ae78 <_reclaim_reent+0xa4>
 800ae64:	4620      	mov	r0, r4
 800ae66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae6a:	4718      	bx	r3
 800ae6c:	680e      	ldr	r6, [r1, #0]
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f000 feea 	bl	800bc48 <_free_r>
 800ae74:	4631      	mov	r1, r6
 800ae76:	e7bb      	b.n	800adf0 <_reclaim_reent+0x1c>
 800ae78:	bd70      	pop	{r4, r5, r6, pc}
 800ae7a:	bf00      	nop
 800ae7c:	2000001c 	.word	0x2000001c

0800ae80 <_lseek_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	4d07      	ldr	r5, [pc, #28]	@ (800aea0 <_lseek_r+0x20>)
 800ae84:	4604      	mov	r4, r0
 800ae86:	4608      	mov	r0, r1
 800ae88:	4611      	mov	r1, r2
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	602a      	str	r2, [r5, #0]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	f7f7 fad5 	bl	800243e <_lseek>
 800ae94:	1c43      	adds	r3, r0, #1
 800ae96:	d102      	bne.n	800ae9e <_lseek_r+0x1e>
 800ae98:	682b      	ldr	r3, [r5, #0]
 800ae9a:	b103      	cbz	r3, 800ae9e <_lseek_r+0x1e>
 800ae9c:	6023      	str	r3, [r4, #0]
 800ae9e:	bd38      	pop	{r3, r4, r5, pc}
 800aea0:	20004754 	.word	0x20004754

0800aea4 <_read_r>:
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	4d07      	ldr	r5, [pc, #28]	@ (800aec4 <_read_r+0x20>)
 800aea8:	4604      	mov	r4, r0
 800aeaa:	4608      	mov	r0, r1
 800aeac:	4611      	mov	r1, r2
 800aeae:	2200      	movs	r2, #0
 800aeb0:	602a      	str	r2, [r5, #0]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	f7f7 fa63 	bl	800237e <_read>
 800aeb8:	1c43      	adds	r3, r0, #1
 800aeba:	d102      	bne.n	800aec2 <_read_r+0x1e>
 800aebc:	682b      	ldr	r3, [r5, #0]
 800aebe:	b103      	cbz	r3, 800aec2 <_read_r+0x1e>
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	bd38      	pop	{r3, r4, r5, pc}
 800aec4:	20004754 	.word	0x20004754

0800aec8 <_write_r>:
 800aec8:	b538      	push	{r3, r4, r5, lr}
 800aeca:	4d07      	ldr	r5, [pc, #28]	@ (800aee8 <_write_r+0x20>)
 800aecc:	4604      	mov	r4, r0
 800aece:	4608      	mov	r0, r1
 800aed0:	4611      	mov	r1, r2
 800aed2:	2200      	movs	r2, #0
 800aed4:	602a      	str	r2, [r5, #0]
 800aed6:	461a      	mov	r2, r3
 800aed8:	f7f7 fa6e 	bl	80023b8 <_write>
 800aedc:	1c43      	adds	r3, r0, #1
 800aede:	d102      	bne.n	800aee6 <_write_r+0x1e>
 800aee0:	682b      	ldr	r3, [r5, #0]
 800aee2:	b103      	cbz	r3, 800aee6 <_write_r+0x1e>
 800aee4:	6023      	str	r3, [r4, #0]
 800aee6:	bd38      	pop	{r3, r4, r5, pc}
 800aee8:	20004754 	.word	0x20004754

0800aeec <__errno>:
 800aeec:	4b01      	ldr	r3, [pc, #4]	@ (800aef4 <__errno+0x8>)
 800aeee:	6818      	ldr	r0, [r3, #0]
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	2000001c 	.word	0x2000001c

0800aef8 <__libc_init_array>:
 800aef8:	b570      	push	{r4, r5, r6, lr}
 800aefa:	4d0d      	ldr	r5, [pc, #52]	@ (800af30 <__libc_init_array+0x38>)
 800aefc:	4c0d      	ldr	r4, [pc, #52]	@ (800af34 <__libc_init_array+0x3c>)
 800aefe:	1b64      	subs	r4, r4, r5
 800af00:	10a4      	asrs	r4, r4, #2
 800af02:	2600      	movs	r6, #0
 800af04:	42a6      	cmp	r6, r4
 800af06:	d109      	bne.n	800af1c <__libc_init_array+0x24>
 800af08:	4d0b      	ldr	r5, [pc, #44]	@ (800af38 <__libc_init_array+0x40>)
 800af0a:	4c0c      	ldr	r4, [pc, #48]	@ (800af3c <__libc_init_array+0x44>)
 800af0c:	f003 fb72 	bl	800e5f4 <_init>
 800af10:	1b64      	subs	r4, r4, r5
 800af12:	10a4      	asrs	r4, r4, #2
 800af14:	2600      	movs	r6, #0
 800af16:	42a6      	cmp	r6, r4
 800af18:	d105      	bne.n	800af26 <__libc_init_array+0x2e>
 800af1a:	bd70      	pop	{r4, r5, r6, pc}
 800af1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af20:	4798      	blx	r3
 800af22:	3601      	adds	r6, #1
 800af24:	e7ee      	b.n	800af04 <__libc_init_array+0xc>
 800af26:	f855 3b04 	ldr.w	r3, [r5], #4
 800af2a:	4798      	blx	r3
 800af2c:	3601      	adds	r6, #1
 800af2e:	e7f2      	b.n	800af16 <__libc_init_array+0x1e>
 800af30:	0800ebbc 	.word	0x0800ebbc
 800af34:	0800ebbc 	.word	0x0800ebbc
 800af38:	0800ebbc 	.word	0x0800ebbc
 800af3c:	0800ebc0 	.word	0x0800ebc0

0800af40 <__retarget_lock_init_recursive>:
 800af40:	4770      	bx	lr

0800af42 <__retarget_lock_acquire_recursive>:
 800af42:	4770      	bx	lr

0800af44 <__retarget_lock_release_recursive>:
 800af44:	4770      	bx	lr

0800af46 <memcpy>:
 800af46:	440a      	add	r2, r1
 800af48:	4291      	cmp	r1, r2
 800af4a:	f100 33ff 	add.w	r3, r0, #4294967295
 800af4e:	d100      	bne.n	800af52 <memcpy+0xc>
 800af50:	4770      	bx	lr
 800af52:	b510      	push	{r4, lr}
 800af54:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af58:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af5c:	4291      	cmp	r1, r2
 800af5e:	d1f9      	bne.n	800af54 <memcpy+0xe>
 800af60:	bd10      	pop	{r4, pc}
	...

0800af64 <nanf>:
 800af64:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800af6c <nanf+0x8>
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	7fc00000 	.word	0x7fc00000

0800af70 <__assert_func>:
 800af70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af72:	4614      	mov	r4, r2
 800af74:	461a      	mov	r2, r3
 800af76:	4b09      	ldr	r3, [pc, #36]	@ (800af9c <__assert_func+0x2c>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4605      	mov	r5, r0
 800af7c:	68d8      	ldr	r0, [r3, #12]
 800af7e:	b954      	cbnz	r4, 800af96 <__assert_func+0x26>
 800af80:	4b07      	ldr	r3, [pc, #28]	@ (800afa0 <__assert_func+0x30>)
 800af82:	461c      	mov	r4, r3
 800af84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af88:	9100      	str	r1, [sp, #0]
 800af8a:	462b      	mov	r3, r5
 800af8c:	4905      	ldr	r1, [pc, #20]	@ (800afa4 <__assert_func+0x34>)
 800af8e:	f002 fc95 	bl	800d8bc <fiprintf>
 800af92:	f002 fce9 	bl	800d968 <abort>
 800af96:	4b04      	ldr	r3, [pc, #16]	@ (800afa8 <__assert_func+0x38>)
 800af98:	e7f4      	b.n	800af84 <__assert_func+0x14>
 800af9a:	bf00      	nop
 800af9c:	2000001c 	.word	0x2000001c
 800afa0:	0800e80d 	.word	0x0800e80d
 800afa4:	0800e7df 	.word	0x0800e7df
 800afa8:	0800e7d2 	.word	0x0800e7d2

0800afac <quorem>:
 800afac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb0:	6903      	ldr	r3, [r0, #16]
 800afb2:	690c      	ldr	r4, [r1, #16]
 800afb4:	42a3      	cmp	r3, r4
 800afb6:	4607      	mov	r7, r0
 800afb8:	db7e      	blt.n	800b0b8 <quorem+0x10c>
 800afba:	3c01      	subs	r4, #1
 800afbc:	f101 0814 	add.w	r8, r1, #20
 800afc0:	00a3      	lsls	r3, r4, #2
 800afc2:	f100 0514 	add.w	r5, r0, #20
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afcc:	9301      	str	r3, [sp, #4]
 800afce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800afd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afd6:	3301      	adds	r3, #1
 800afd8:	429a      	cmp	r2, r3
 800afda:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800afde:	fbb2 f6f3 	udiv	r6, r2, r3
 800afe2:	d32e      	bcc.n	800b042 <quorem+0x96>
 800afe4:	f04f 0a00 	mov.w	sl, #0
 800afe8:	46c4      	mov	ip, r8
 800afea:	46ae      	mov	lr, r5
 800afec:	46d3      	mov	fp, sl
 800afee:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aff2:	b298      	uxth	r0, r3
 800aff4:	fb06 a000 	mla	r0, r6, r0, sl
 800aff8:	0c02      	lsrs	r2, r0, #16
 800affa:	0c1b      	lsrs	r3, r3, #16
 800affc:	fb06 2303 	mla	r3, r6, r3, r2
 800b000:	f8de 2000 	ldr.w	r2, [lr]
 800b004:	b280      	uxth	r0, r0
 800b006:	b292      	uxth	r2, r2
 800b008:	1a12      	subs	r2, r2, r0
 800b00a:	445a      	add	r2, fp
 800b00c:	f8de 0000 	ldr.w	r0, [lr]
 800b010:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b014:	b29b      	uxth	r3, r3
 800b016:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b01a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b01e:	b292      	uxth	r2, r2
 800b020:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b024:	45e1      	cmp	r9, ip
 800b026:	f84e 2b04 	str.w	r2, [lr], #4
 800b02a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b02e:	d2de      	bcs.n	800afee <quorem+0x42>
 800b030:	9b00      	ldr	r3, [sp, #0]
 800b032:	58eb      	ldr	r3, [r5, r3]
 800b034:	b92b      	cbnz	r3, 800b042 <quorem+0x96>
 800b036:	9b01      	ldr	r3, [sp, #4]
 800b038:	3b04      	subs	r3, #4
 800b03a:	429d      	cmp	r5, r3
 800b03c:	461a      	mov	r2, r3
 800b03e:	d32f      	bcc.n	800b0a0 <quorem+0xf4>
 800b040:	613c      	str	r4, [r7, #16]
 800b042:	4638      	mov	r0, r7
 800b044:	f001 f9c4 	bl	800c3d0 <__mcmp>
 800b048:	2800      	cmp	r0, #0
 800b04a:	db25      	blt.n	800b098 <quorem+0xec>
 800b04c:	4629      	mov	r1, r5
 800b04e:	2000      	movs	r0, #0
 800b050:	f858 2b04 	ldr.w	r2, [r8], #4
 800b054:	f8d1 c000 	ldr.w	ip, [r1]
 800b058:	fa1f fe82 	uxth.w	lr, r2
 800b05c:	fa1f f38c 	uxth.w	r3, ip
 800b060:	eba3 030e 	sub.w	r3, r3, lr
 800b064:	4403      	add	r3, r0
 800b066:	0c12      	lsrs	r2, r2, #16
 800b068:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b06c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b070:	b29b      	uxth	r3, r3
 800b072:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b076:	45c1      	cmp	r9, r8
 800b078:	f841 3b04 	str.w	r3, [r1], #4
 800b07c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b080:	d2e6      	bcs.n	800b050 <quorem+0xa4>
 800b082:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b086:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b08a:	b922      	cbnz	r2, 800b096 <quorem+0xea>
 800b08c:	3b04      	subs	r3, #4
 800b08e:	429d      	cmp	r5, r3
 800b090:	461a      	mov	r2, r3
 800b092:	d30b      	bcc.n	800b0ac <quorem+0x100>
 800b094:	613c      	str	r4, [r7, #16]
 800b096:	3601      	adds	r6, #1
 800b098:	4630      	mov	r0, r6
 800b09a:	b003      	add	sp, #12
 800b09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a0:	6812      	ldr	r2, [r2, #0]
 800b0a2:	3b04      	subs	r3, #4
 800b0a4:	2a00      	cmp	r2, #0
 800b0a6:	d1cb      	bne.n	800b040 <quorem+0x94>
 800b0a8:	3c01      	subs	r4, #1
 800b0aa:	e7c6      	b.n	800b03a <quorem+0x8e>
 800b0ac:	6812      	ldr	r2, [r2, #0]
 800b0ae:	3b04      	subs	r3, #4
 800b0b0:	2a00      	cmp	r2, #0
 800b0b2:	d1ef      	bne.n	800b094 <quorem+0xe8>
 800b0b4:	3c01      	subs	r4, #1
 800b0b6:	e7ea      	b.n	800b08e <quorem+0xe2>
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	e7ee      	b.n	800b09a <quorem+0xee>
 800b0bc:	0000      	movs	r0, r0
	...

0800b0c0 <_dtoa_r>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	69c7      	ldr	r7, [r0, #28]
 800b0c6:	b099      	sub	sp, #100	@ 0x64
 800b0c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b0cc:	ec55 4b10 	vmov	r4, r5, d0
 800b0d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b0d2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b0d4:	4683      	mov	fp, r0
 800b0d6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0da:	b97f      	cbnz	r7, 800b0fc <_dtoa_r+0x3c>
 800b0dc:	2010      	movs	r0, #16
 800b0de:	f000 fdfd 	bl	800bcdc <malloc>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b0e8:	b920      	cbnz	r0, 800b0f4 <_dtoa_r+0x34>
 800b0ea:	4ba7      	ldr	r3, [pc, #668]	@ (800b388 <_dtoa_r+0x2c8>)
 800b0ec:	21ef      	movs	r1, #239	@ 0xef
 800b0ee:	48a7      	ldr	r0, [pc, #668]	@ (800b38c <_dtoa_r+0x2cc>)
 800b0f0:	f7ff ff3e 	bl	800af70 <__assert_func>
 800b0f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b0f8:	6007      	str	r7, [r0, #0]
 800b0fa:	60c7      	str	r7, [r0, #12]
 800b0fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b100:	6819      	ldr	r1, [r3, #0]
 800b102:	b159      	cbz	r1, 800b11c <_dtoa_r+0x5c>
 800b104:	685a      	ldr	r2, [r3, #4]
 800b106:	604a      	str	r2, [r1, #4]
 800b108:	2301      	movs	r3, #1
 800b10a:	4093      	lsls	r3, r2
 800b10c:	608b      	str	r3, [r1, #8]
 800b10e:	4658      	mov	r0, fp
 800b110:	f000 feda 	bl	800bec8 <_Bfree>
 800b114:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b118:	2200      	movs	r2, #0
 800b11a:	601a      	str	r2, [r3, #0]
 800b11c:	1e2b      	subs	r3, r5, #0
 800b11e:	bfb9      	ittee	lt
 800b120:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b124:	9303      	strlt	r3, [sp, #12]
 800b126:	2300      	movge	r3, #0
 800b128:	6033      	strge	r3, [r6, #0]
 800b12a:	9f03      	ldr	r7, [sp, #12]
 800b12c:	4b98      	ldr	r3, [pc, #608]	@ (800b390 <_dtoa_r+0x2d0>)
 800b12e:	bfbc      	itt	lt
 800b130:	2201      	movlt	r2, #1
 800b132:	6032      	strlt	r2, [r6, #0]
 800b134:	43bb      	bics	r3, r7
 800b136:	d112      	bne.n	800b15e <_dtoa_r+0x9e>
 800b138:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b13a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b13e:	6013      	str	r3, [r2, #0]
 800b140:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b144:	4323      	orrs	r3, r4
 800b146:	f000 854d 	beq.w	800bbe4 <_dtoa_r+0xb24>
 800b14a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b14c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b3a4 <_dtoa_r+0x2e4>
 800b150:	2b00      	cmp	r3, #0
 800b152:	f000 854f 	beq.w	800bbf4 <_dtoa_r+0xb34>
 800b156:	f10a 0303 	add.w	r3, sl, #3
 800b15a:	f000 bd49 	b.w	800bbf0 <_dtoa_r+0xb30>
 800b15e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b162:	2200      	movs	r2, #0
 800b164:	ec51 0b17 	vmov	r0, r1, d7
 800b168:	2300      	movs	r3, #0
 800b16a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b16e:	f7f5 fcb3 	bl	8000ad8 <__aeabi_dcmpeq>
 800b172:	4680      	mov	r8, r0
 800b174:	b158      	cbz	r0, 800b18e <_dtoa_r+0xce>
 800b176:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b178:	2301      	movs	r3, #1
 800b17a:	6013      	str	r3, [r2, #0]
 800b17c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b17e:	b113      	cbz	r3, 800b186 <_dtoa_r+0xc6>
 800b180:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b182:	4b84      	ldr	r3, [pc, #528]	@ (800b394 <_dtoa_r+0x2d4>)
 800b184:	6013      	str	r3, [r2, #0]
 800b186:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b3a8 <_dtoa_r+0x2e8>
 800b18a:	f000 bd33 	b.w	800bbf4 <_dtoa_r+0xb34>
 800b18e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b192:	aa16      	add	r2, sp, #88	@ 0x58
 800b194:	a917      	add	r1, sp, #92	@ 0x5c
 800b196:	4658      	mov	r0, fp
 800b198:	f001 fa3a 	bl	800c610 <__d2b>
 800b19c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b1a0:	4681      	mov	r9, r0
 800b1a2:	2e00      	cmp	r6, #0
 800b1a4:	d077      	beq.n	800b296 <_dtoa_r+0x1d6>
 800b1a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b1ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b1b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b1bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	4b74      	ldr	r3, [pc, #464]	@ (800b398 <_dtoa_r+0x2d8>)
 800b1c6:	f7f5 f867 	bl	8000298 <__aeabi_dsub>
 800b1ca:	a369      	add	r3, pc, #420	@ (adr r3, 800b370 <_dtoa_r+0x2b0>)
 800b1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d0:	f7f5 fa1a 	bl	8000608 <__aeabi_dmul>
 800b1d4:	a368      	add	r3, pc, #416	@ (adr r3, 800b378 <_dtoa_r+0x2b8>)
 800b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1da:	f7f5 f85f 	bl	800029c <__adddf3>
 800b1de:	4604      	mov	r4, r0
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	460d      	mov	r5, r1
 800b1e4:	f7f5 f9a6 	bl	8000534 <__aeabi_i2d>
 800b1e8:	a365      	add	r3, pc, #404	@ (adr r3, 800b380 <_dtoa_r+0x2c0>)
 800b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ee:	f7f5 fa0b 	bl	8000608 <__aeabi_dmul>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	f7f5 f84f 	bl	800029c <__adddf3>
 800b1fe:	4604      	mov	r4, r0
 800b200:	460d      	mov	r5, r1
 800b202:	f7f5 fcb1 	bl	8000b68 <__aeabi_d2iz>
 800b206:	2200      	movs	r2, #0
 800b208:	4607      	mov	r7, r0
 800b20a:	2300      	movs	r3, #0
 800b20c:	4620      	mov	r0, r4
 800b20e:	4629      	mov	r1, r5
 800b210:	f7f5 fc6c 	bl	8000aec <__aeabi_dcmplt>
 800b214:	b140      	cbz	r0, 800b228 <_dtoa_r+0x168>
 800b216:	4638      	mov	r0, r7
 800b218:	f7f5 f98c 	bl	8000534 <__aeabi_i2d>
 800b21c:	4622      	mov	r2, r4
 800b21e:	462b      	mov	r3, r5
 800b220:	f7f5 fc5a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b224:	b900      	cbnz	r0, 800b228 <_dtoa_r+0x168>
 800b226:	3f01      	subs	r7, #1
 800b228:	2f16      	cmp	r7, #22
 800b22a:	d851      	bhi.n	800b2d0 <_dtoa_r+0x210>
 800b22c:	4b5b      	ldr	r3, [pc, #364]	@ (800b39c <_dtoa_r+0x2dc>)
 800b22e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b236:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b23a:	f7f5 fc57 	bl	8000aec <__aeabi_dcmplt>
 800b23e:	2800      	cmp	r0, #0
 800b240:	d048      	beq.n	800b2d4 <_dtoa_r+0x214>
 800b242:	3f01      	subs	r7, #1
 800b244:	2300      	movs	r3, #0
 800b246:	9312      	str	r3, [sp, #72]	@ 0x48
 800b248:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b24a:	1b9b      	subs	r3, r3, r6
 800b24c:	1e5a      	subs	r2, r3, #1
 800b24e:	bf44      	itt	mi
 800b250:	f1c3 0801 	rsbmi	r8, r3, #1
 800b254:	2300      	movmi	r3, #0
 800b256:	9208      	str	r2, [sp, #32]
 800b258:	bf54      	ite	pl
 800b25a:	f04f 0800 	movpl.w	r8, #0
 800b25e:	9308      	strmi	r3, [sp, #32]
 800b260:	2f00      	cmp	r7, #0
 800b262:	db39      	blt.n	800b2d8 <_dtoa_r+0x218>
 800b264:	9b08      	ldr	r3, [sp, #32]
 800b266:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b268:	443b      	add	r3, r7
 800b26a:	9308      	str	r3, [sp, #32]
 800b26c:	2300      	movs	r3, #0
 800b26e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b272:	2b09      	cmp	r3, #9
 800b274:	d864      	bhi.n	800b340 <_dtoa_r+0x280>
 800b276:	2b05      	cmp	r3, #5
 800b278:	bfc4      	itt	gt
 800b27a:	3b04      	subgt	r3, #4
 800b27c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b280:	f1a3 0302 	sub.w	r3, r3, #2
 800b284:	bfcc      	ite	gt
 800b286:	2400      	movgt	r4, #0
 800b288:	2401      	movle	r4, #1
 800b28a:	2b03      	cmp	r3, #3
 800b28c:	d863      	bhi.n	800b356 <_dtoa_r+0x296>
 800b28e:	e8df f003 	tbb	[pc, r3]
 800b292:	372a      	.short	0x372a
 800b294:	5535      	.short	0x5535
 800b296:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b29a:	441e      	add	r6, r3
 800b29c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b2a0:	2b20      	cmp	r3, #32
 800b2a2:	bfc1      	itttt	gt
 800b2a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b2a8:	409f      	lslgt	r7, r3
 800b2aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b2ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b2b2:	bfd6      	itet	le
 800b2b4:	f1c3 0320 	rsble	r3, r3, #32
 800b2b8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b2bc:	fa04 f003 	lslle.w	r0, r4, r3
 800b2c0:	f7f5 f928 	bl	8000514 <__aeabi_ui2d>
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b2ca:	3e01      	subs	r6, #1
 800b2cc:	9214      	str	r2, [sp, #80]	@ 0x50
 800b2ce:	e777      	b.n	800b1c0 <_dtoa_r+0x100>
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	e7b8      	b.n	800b246 <_dtoa_r+0x186>
 800b2d4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b2d6:	e7b7      	b.n	800b248 <_dtoa_r+0x188>
 800b2d8:	427b      	negs	r3, r7
 800b2da:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2dc:	2300      	movs	r3, #0
 800b2de:	eba8 0807 	sub.w	r8, r8, r7
 800b2e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2e4:	e7c4      	b.n	800b270 <_dtoa_r+0x1b0>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	dc35      	bgt.n	800b35c <_dtoa_r+0x29c>
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	9307      	str	r3, [sp, #28]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2fa:	e00b      	b.n	800b314 <_dtoa_r+0x254>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e7f3      	b.n	800b2e8 <_dtoa_r+0x228>
 800b300:	2300      	movs	r3, #0
 800b302:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b304:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b306:	18fb      	adds	r3, r7, r3
 800b308:	9300      	str	r3, [sp, #0]
 800b30a:	3301      	adds	r3, #1
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	9307      	str	r3, [sp, #28]
 800b310:	bfb8      	it	lt
 800b312:	2301      	movlt	r3, #1
 800b314:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b318:	2100      	movs	r1, #0
 800b31a:	2204      	movs	r2, #4
 800b31c:	f102 0514 	add.w	r5, r2, #20
 800b320:	429d      	cmp	r5, r3
 800b322:	d91f      	bls.n	800b364 <_dtoa_r+0x2a4>
 800b324:	6041      	str	r1, [r0, #4]
 800b326:	4658      	mov	r0, fp
 800b328:	f000 fd8e 	bl	800be48 <_Balloc>
 800b32c:	4682      	mov	sl, r0
 800b32e:	2800      	cmp	r0, #0
 800b330:	d13c      	bne.n	800b3ac <_dtoa_r+0x2ec>
 800b332:	4b1b      	ldr	r3, [pc, #108]	@ (800b3a0 <_dtoa_r+0x2e0>)
 800b334:	4602      	mov	r2, r0
 800b336:	f240 11af 	movw	r1, #431	@ 0x1af
 800b33a:	e6d8      	b.n	800b0ee <_dtoa_r+0x2e>
 800b33c:	2301      	movs	r3, #1
 800b33e:	e7e0      	b.n	800b302 <_dtoa_r+0x242>
 800b340:	2401      	movs	r4, #1
 800b342:	2300      	movs	r3, #0
 800b344:	9309      	str	r3, [sp, #36]	@ 0x24
 800b346:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b348:	f04f 33ff 	mov.w	r3, #4294967295
 800b34c:	9300      	str	r3, [sp, #0]
 800b34e:	9307      	str	r3, [sp, #28]
 800b350:	2200      	movs	r2, #0
 800b352:	2312      	movs	r3, #18
 800b354:	e7d0      	b.n	800b2f8 <_dtoa_r+0x238>
 800b356:	2301      	movs	r3, #1
 800b358:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b35a:	e7f5      	b.n	800b348 <_dtoa_r+0x288>
 800b35c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	9307      	str	r3, [sp, #28]
 800b362:	e7d7      	b.n	800b314 <_dtoa_r+0x254>
 800b364:	3101      	adds	r1, #1
 800b366:	0052      	lsls	r2, r2, #1
 800b368:	e7d8      	b.n	800b31c <_dtoa_r+0x25c>
 800b36a:	bf00      	nop
 800b36c:	f3af 8000 	nop.w
 800b370:	636f4361 	.word	0x636f4361
 800b374:	3fd287a7 	.word	0x3fd287a7
 800b378:	8b60c8b3 	.word	0x8b60c8b3
 800b37c:	3fc68a28 	.word	0x3fc68a28
 800b380:	509f79fb 	.word	0x509f79fb
 800b384:	3fd34413 	.word	0x3fd34413
 800b388:	0800e761 	.word	0x0800e761
 800b38c:	0800e81b 	.word	0x0800e81b
 800b390:	7ff00000 	.word	0x7ff00000
 800b394:	0800e739 	.word	0x0800e739
 800b398:	3ff80000 	.word	0x3ff80000
 800b39c:	0800e918 	.word	0x0800e918
 800b3a0:	0800e873 	.word	0x0800e873
 800b3a4:	0800e817 	.word	0x0800e817
 800b3a8:	0800e738 	.word	0x0800e738
 800b3ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b3b0:	6018      	str	r0, [r3, #0]
 800b3b2:	9b07      	ldr	r3, [sp, #28]
 800b3b4:	2b0e      	cmp	r3, #14
 800b3b6:	f200 80a4 	bhi.w	800b502 <_dtoa_r+0x442>
 800b3ba:	2c00      	cmp	r4, #0
 800b3bc:	f000 80a1 	beq.w	800b502 <_dtoa_r+0x442>
 800b3c0:	2f00      	cmp	r7, #0
 800b3c2:	dd33      	ble.n	800b42c <_dtoa_r+0x36c>
 800b3c4:	4bad      	ldr	r3, [pc, #692]	@ (800b67c <_dtoa_r+0x5bc>)
 800b3c6:	f007 020f 	and.w	r2, r7, #15
 800b3ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3ce:	ed93 7b00 	vldr	d7, [r3]
 800b3d2:	05f8      	lsls	r0, r7, #23
 800b3d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b3d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b3dc:	d516      	bpl.n	800b40c <_dtoa_r+0x34c>
 800b3de:	4ba8      	ldr	r3, [pc, #672]	@ (800b680 <_dtoa_r+0x5c0>)
 800b3e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3e8:	f7f5 fa38 	bl	800085c <__aeabi_ddiv>
 800b3ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3f0:	f004 040f 	and.w	r4, r4, #15
 800b3f4:	2603      	movs	r6, #3
 800b3f6:	4da2      	ldr	r5, [pc, #648]	@ (800b680 <_dtoa_r+0x5c0>)
 800b3f8:	b954      	cbnz	r4, 800b410 <_dtoa_r+0x350>
 800b3fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b402:	f7f5 fa2b 	bl	800085c <__aeabi_ddiv>
 800b406:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b40a:	e028      	b.n	800b45e <_dtoa_r+0x39e>
 800b40c:	2602      	movs	r6, #2
 800b40e:	e7f2      	b.n	800b3f6 <_dtoa_r+0x336>
 800b410:	07e1      	lsls	r1, r4, #31
 800b412:	d508      	bpl.n	800b426 <_dtoa_r+0x366>
 800b414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b418:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b41c:	f7f5 f8f4 	bl	8000608 <__aeabi_dmul>
 800b420:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b424:	3601      	adds	r6, #1
 800b426:	1064      	asrs	r4, r4, #1
 800b428:	3508      	adds	r5, #8
 800b42a:	e7e5      	b.n	800b3f8 <_dtoa_r+0x338>
 800b42c:	f000 80d2 	beq.w	800b5d4 <_dtoa_r+0x514>
 800b430:	427c      	negs	r4, r7
 800b432:	4b92      	ldr	r3, [pc, #584]	@ (800b67c <_dtoa_r+0x5bc>)
 800b434:	4d92      	ldr	r5, [pc, #584]	@ (800b680 <_dtoa_r+0x5c0>)
 800b436:	f004 020f 	and.w	r2, r4, #15
 800b43a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b442:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b446:	f7f5 f8df 	bl	8000608 <__aeabi_dmul>
 800b44a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b44e:	1124      	asrs	r4, r4, #4
 800b450:	2300      	movs	r3, #0
 800b452:	2602      	movs	r6, #2
 800b454:	2c00      	cmp	r4, #0
 800b456:	f040 80b2 	bne.w	800b5be <_dtoa_r+0x4fe>
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d1d3      	bne.n	800b406 <_dtoa_r+0x346>
 800b45e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b460:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	f000 80b7 	beq.w	800b5d8 <_dtoa_r+0x518>
 800b46a:	4b86      	ldr	r3, [pc, #536]	@ (800b684 <_dtoa_r+0x5c4>)
 800b46c:	2200      	movs	r2, #0
 800b46e:	4620      	mov	r0, r4
 800b470:	4629      	mov	r1, r5
 800b472:	f7f5 fb3b 	bl	8000aec <__aeabi_dcmplt>
 800b476:	2800      	cmp	r0, #0
 800b478:	f000 80ae 	beq.w	800b5d8 <_dtoa_r+0x518>
 800b47c:	9b07      	ldr	r3, [sp, #28]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f000 80aa 	beq.w	800b5d8 <_dtoa_r+0x518>
 800b484:	9b00      	ldr	r3, [sp, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	dd37      	ble.n	800b4fa <_dtoa_r+0x43a>
 800b48a:	1e7b      	subs	r3, r7, #1
 800b48c:	9304      	str	r3, [sp, #16]
 800b48e:	4620      	mov	r0, r4
 800b490:	4b7d      	ldr	r3, [pc, #500]	@ (800b688 <_dtoa_r+0x5c8>)
 800b492:	2200      	movs	r2, #0
 800b494:	4629      	mov	r1, r5
 800b496:	f7f5 f8b7 	bl	8000608 <__aeabi_dmul>
 800b49a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b49e:	9c00      	ldr	r4, [sp, #0]
 800b4a0:	3601      	adds	r6, #1
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	f7f5 f846 	bl	8000534 <__aeabi_i2d>
 800b4a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4ac:	f7f5 f8ac 	bl	8000608 <__aeabi_dmul>
 800b4b0:	4b76      	ldr	r3, [pc, #472]	@ (800b68c <_dtoa_r+0x5cc>)
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f7f4 fef2 	bl	800029c <__adddf3>
 800b4b8:	4605      	mov	r5, r0
 800b4ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b4be:	2c00      	cmp	r4, #0
 800b4c0:	f040 808d 	bne.w	800b5de <_dtoa_r+0x51e>
 800b4c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4c8:	4b71      	ldr	r3, [pc, #452]	@ (800b690 <_dtoa_r+0x5d0>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f7f4 fee4 	bl	8000298 <__aeabi_dsub>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4d8:	462a      	mov	r2, r5
 800b4da:	4633      	mov	r3, r6
 800b4dc:	f7f5 fb24 	bl	8000b28 <__aeabi_dcmpgt>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	f040 828b 	bne.w	800b9fc <_dtoa_r+0x93c>
 800b4e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4ea:	462a      	mov	r2, r5
 800b4ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b4f0:	f7f5 fafc 	bl	8000aec <__aeabi_dcmplt>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	f040 8128 	bne.w	800b74a <_dtoa_r+0x68a>
 800b4fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b4fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b502:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b504:	2b00      	cmp	r3, #0
 800b506:	f2c0 815a 	blt.w	800b7be <_dtoa_r+0x6fe>
 800b50a:	2f0e      	cmp	r7, #14
 800b50c:	f300 8157 	bgt.w	800b7be <_dtoa_r+0x6fe>
 800b510:	4b5a      	ldr	r3, [pc, #360]	@ (800b67c <_dtoa_r+0x5bc>)
 800b512:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b516:	ed93 7b00 	vldr	d7, [r3]
 800b51a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	ed8d 7b00 	vstr	d7, [sp]
 800b522:	da03      	bge.n	800b52c <_dtoa_r+0x46c>
 800b524:	9b07      	ldr	r3, [sp, #28]
 800b526:	2b00      	cmp	r3, #0
 800b528:	f340 8101 	ble.w	800b72e <_dtoa_r+0x66e>
 800b52c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b530:	4656      	mov	r6, sl
 800b532:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b536:	4620      	mov	r0, r4
 800b538:	4629      	mov	r1, r5
 800b53a:	f7f5 f98f 	bl	800085c <__aeabi_ddiv>
 800b53e:	f7f5 fb13 	bl	8000b68 <__aeabi_d2iz>
 800b542:	4680      	mov	r8, r0
 800b544:	f7f4 fff6 	bl	8000534 <__aeabi_i2d>
 800b548:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b54c:	f7f5 f85c 	bl	8000608 <__aeabi_dmul>
 800b550:	4602      	mov	r2, r0
 800b552:	460b      	mov	r3, r1
 800b554:	4620      	mov	r0, r4
 800b556:	4629      	mov	r1, r5
 800b558:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b55c:	f7f4 fe9c 	bl	8000298 <__aeabi_dsub>
 800b560:	f806 4b01 	strb.w	r4, [r6], #1
 800b564:	9d07      	ldr	r5, [sp, #28]
 800b566:	eba6 040a 	sub.w	r4, r6, sl
 800b56a:	42a5      	cmp	r5, r4
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	f040 8117 	bne.w	800b7a2 <_dtoa_r+0x6e2>
 800b574:	f7f4 fe92 	bl	800029c <__adddf3>
 800b578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b57c:	4604      	mov	r4, r0
 800b57e:	460d      	mov	r5, r1
 800b580:	f7f5 fad2 	bl	8000b28 <__aeabi_dcmpgt>
 800b584:	2800      	cmp	r0, #0
 800b586:	f040 80f9 	bne.w	800b77c <_dtoa_r+0x6bc>
 800b58a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b58e:	4620      	mov	r0, r4
 800b590:	4629      	mov	r1, r5
 800b592:	f7f5 faa1 	bl	8000ad8 <__aeabi_dcmpeq>
 800b596:	b118      	cbz	r0, 800b5a0 <_dtoa_r+0x4e0>
 800b598:	f018 0f01 	tst.w	r8, #1
 800b59c:	f040 80ee 	bne.w	800b77c <_dtoa_r+0x6bc>
 800b5a0:	4649      	mov	r1, r9
 800b5a2:	4658      	mov	r0, fp
 800b5a4:	f000 fc90 	bl	800bec8 <_Bfree>
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	7033      	strb	r3, [r6, #0]
 800b5ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b5ae:	3701      	adds	r7, #1
 800b5b0:	601f      	str	r7, [r3, #0]
 800b5b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f000 831d 	beq.w	800bbf4 <_dtoa_r+0xb34>
 800b5ba:	601e      	str	r6, [r3, #0]
 800b5bc:	e31a      	b.n	800bbf4 <_dtoa_r+0xb34>
 800b5be:	07e2      	lsls	r2, r4, #31
 800b5c0:	d505      	bpl.n	800b5ce <_dtoa_r+0x50e>
 800b5c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b5c6:	f7f5 f81f 	bl	8000608 <__aeabi_dmul>
 800b5ca:	3601      	adds	r6, #1
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	1064      	asrs	r4, r4, #1
 800b5d0:	3508      	adds	r5, #8
 800b5d2:	e73f      	b.n	800b454 <_dtoa_r+0x394>
 800b5d4:	2602      	movs	r6, #2
 800b5d6:	e742      	b.n	800b45e <_dtoa_r+0x39e>
 800b5d8:	9c07      	ldr	r4, [sp, #28]
 800b5da:	9704      	str	r7, [sp, #16]
 800b5dc:	e761      	b.n	800b4a2 <_dtoa_r+0x3e2>
 800b5de:	4b27      	ldr	r3, [pc, #156]	@ (800b67c <_dtoa_r+0x5bc>)
 800b5e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b5e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5ea:	4454      	add	r4, sl
 800b5ec:	2900      	cmp	r1, #0
 800b5ee:	d053      	beq.n	800b698 <_dtoa_r+0x5d8>
 800b5f0:	4928      	ldr	r1, [pc, #160]	@ (800b694 <_dtoa_r+0x5d4>)
 800b5f2:	2000      	movs	r0, #0
 800b5f4:	f7f5 f932 	bl	800085c <__aeabi_ddiv>
 800b5f8:	4633      	mov	r3, r6
 800b5fa:	462a      	mov	r2, r5
 800b5fc:	f7f4 fe4c 	bl	8000298 <__aeabi_dsub>
 800b600:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b604:	4656      	mov	r6, sl
 800b606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b60a:	f7f5 faad 	bl	8000b68 <__aeabi_d2iz>
 800b60e:	4605      	mov	r5, r0
 800b610:	f7f4 ff90 	bl	8000534 <__aeabi_i2d>
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b61c:	f7f4 fe3c 	bl	8000298 <__aeabi_dsub>
 800b620:	3530      	adds	r5, #48	@ 0x30
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b62a:	f806 5b01 	strb.w	r5, [r6], #1
 800b62e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b632:	f7f5 fa5b 	bl	8000aec <__aeabi_dcmplt>
 800b636:	2800      	cmp	r0, #0
 800b638:	d171      	bne.n	800b71e <_dtoa_r+0x65e>
 800b63a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b63e:	4911      	ldr	r1, [pc, #68]	@ (800b684 <_dtoa_r+0x5c4>)
 800b640:	2000      	movs	r0, #0
 800b642:	f7f4 fe29 	bl	8000298 <__aeabi_dsub>
 800b646:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b64a:	f7f5 fa4f 	bl	8000aec <__aeabi_dcmplt>
 800b64e:	2800      	cmp	r0, #0
 800b650:	f040 8095 	bne.w	800b77e <_dtoa_r+0x6be>
 800b654:	42a6      	cmp	r6, r4
 800b656:	f43f af50 	beq.w	800b4fa <_dtoa_r+0x43a>
 800b65a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b65e:	4b0a      	ldr	r3, [pc, #40]	@ (800b688 <_dtoa_r+0x5c8>)
 800b660:	2200      	movs	r2, #0
 800b662:	f7f4 ffd1 	bl	8000608 <__aeabi_dmul>
 800b666:	4b08      	ldr	r3, [pc, #32]	@ (800b688 <_dtoa_r+0x5c8>)
 800b668:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b66c:	2200      	movs	r2, #0
 800b66e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b672:	f7f4 ffc9 	bl	8000608 <__aeabi_dmul>
 800b676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b67a:	e7c4      	b.n	800b606 <_dtoa_r+0x546>
 800b67c:	0800e918 	.word	0x0800e918
 800b680:	0800e8f0 	.word	0x0800e8f0
 800b684:	3ff00000 	.word	0x3ff00000
 800b688:	40240000 	.word	0x40240000
 800b68c:	401c0000 	.word	0x401c0000
 800b690:	40140000 	.word	0x40140000
 800b694:	3fe00000 	.word	0x3fe00000
 800b698:	4631      	mov	r1, r6
 800b69a:	4628      	mov	r0, r5
 800b69c:	f7f4 ffb4 	bl	8000608 <__aeabi_dmul>
 800b6a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6a4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b6a6:	4656      	mov	r6, sl
 800b6a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6ac:	f7f5 fa5c 	bl	8000b68 <__aeabi_d2iz>
 800b6b0:	4605      	mov	r5, r0
 800b6b2:	f7f4 ff3f 	bl	8000534 <__aeabi_i2d>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6be:	f7f4 fdeb 	bl	8000298 <__aeabi_dsub>
 800b6c2:	3530      	adds	r5, #48	@ 0x30
 800b6c4:	f806 5b01 	strb.w	r5, [r6], #1
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	42a6      	cmp	r6, r4
 800b6ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6d2:	f04f 0200 	mov.w	r2, #0
 800b6d6:	d124      	bne.n	800b722 <_dtoa_r+0x662>
 800b6d8:	4bac      	ldr	r3, [pc, #688]	@ (800b98c <_dtoa_r+0x8cc>)
 800b6da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b6de:	f7f4 fddd 	bl	800029c <__adddf3>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6ea:	f7f5 fa1d 	bl	8000b28 <__aeabi_dcmpgt>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d145      	bne.n	800b77e <_dtoa_r+0x6be>
 800b6f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6f6:	49a5      	ldr	r1, [pc, #660]	@ (800b98c <_dtoa_r+0x8cc>)
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	f7f4 fdcd 	bl	8000298 <__aeabi_dsub>
 800b6fe:	4602      	mov	r2, r0
 800b700:	460b      	mov	r3, r1
 800b702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b706:	f7f5 f9f1 	bl	8000aec <__aeabi_dcmplt>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	f43f aef5 	beq.w	800b4fa <_dtoa_r+0x43a>
 800b710:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b712:	1e73      	subs	r3, r6, #1
 800b714:	9315      	str	r3, [sp, #84]	@ 0x54
 800b716:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b71a:	2b30      	cmp	r3, #48	@ 0x30
 800b71c:	d0f8      	beq.n	800b710 <_dtoa_r+0x650>
 800b71e:	9f04      	ldr	r7, [sp, #16]
 800b720:	e73e      	b.n	800b5a0 <_dtoa_r+0x4e0>
 800b722:	4b9b      	ldr	r3, [pc, #620]	@ (800b990 <_dtoa_r+0x8d0>)
 800b724:	f7f4 ff70 	bl	8000608 <__aeabi_dmul>
 800b728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b72c:	e7bc      	b.n	800b6a8 <_dtoa_r+0x5e8>
 800b72e:	d10c      	bne.n	800b74a <_dtoa_r+0x68a>
 800b730:	4b98      	ldr	r3, [pc, #608]	@ (800b994 <_dtoa_r+0x8d4>)
 800b732:	2200      	movs	r2, #0
 800b734:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b738:	f7f4 ff66 	bl	8000608 <__aeabi_dmul>
 800b73c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b740:	f7f5 f9e8 	bl	8000b14 <__aeabi_dcmpge>
 800b744:	2800      	cmp	r0, #0
 800b746:	f000 8157 	beq.w	800b9f8 <_dtoa_r+0x938>
 800b74a:	2400      	movs	r4, #0
 800b74c:	4625      	mov	r5, r4
 800b74e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b750:	43db      	mvns	r3, r3
 800b752:	9304      	str	r3, [sp, #16]
 800b754:	4656      	mov	r6, sl
 800b756:	2700      	movs	r7, #0
 800b758:	4621      	mov	r1, r4
 800b75a:	4658      	mov	r0, fp
 800b75c:	f000 fbb4 	bl	800bec8 <_Bfree>
 800b760:	2d00      	cmp	r5, #0
 800b762:	d0dc      	beq.n	800b71e <_dtoa_r+0x65e>
 800b764:	b12f      	cbz	r7, 800b772 <_dtoa_r+0x6b2>
 800b766:	42af      	cmp	r7, r5
 800b768:	d003      	beq.n	800b772 <_dtoa_r+0x6b2>
 800b76a:	4639      	mov	r1, r7
 800b76c:	4658      	mov	r0, fp
 800b76e:	f000 fbab 	bl	800bec8 <_Bfree>
 800b772:	4629      	mov	r1, r5
 800b774:	4658      	mov	r0, fp
 800b776:	f000 fba7 	bl	800bec8 <_Bfree>
 800b77a:	e7d0      	b.n	800b71e <_dtoa_r+0x65e>
 800b77c:	9704      	str	r7, [sp, #16]
 800b77e:	4633      	mov	r3, r6
 800b780:	461e      	mov	r6, r3
 800b782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b786:	2a39      	cmp	r2, #57	@ 0x39
 800b788:	d107      	bne.n	800b79a <_dtoa_r+0x6da>
 800b78a:	459a      	cmp	sl, r3
 800b78c:	d1f8      	bne.n	800b780 <_dtoa_r+0x6c0>
 800b78e:	9a04      	ldr	r2, [sp, #16]
 800b790:	3201      	adds	r2, #1
 800b792:	9204      	str	r2, [sp, #16]
 800b794:	2230      	movs	r2, #48	@ 0x30
 800b796:	f88a 2000 	strb.w	r2, [sl]
 800b79a:	781a      	ldrb	r2, [r3, #0]
 800b79c:	3201      	adds	r2, #1
 800b79e:	701a      	strb	r2, [r3, #0]
 800b7a0:	e7bd      	b.n	800b71e <_dtoa_r+0x65e>
 800b7a2:	4b7b      	ldr	r3, [pc, #492]	@ (800b990 <_dtoa_r+0x8d0>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f7f4 ff2f 	bl	8000608 <__aeabi_dmul>
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	460d      	mov	r5, r1
 800b7b2:	f7f5 f991 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	f43f aebb 	beq.w	800b532 <_dtoa_r+0x472>
 800b7bc:	e6f0      	b.n	800b5a0 <_dtoa_r+0x4e0>
 800b7be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b7c0:	2a00      	cmp	r2, #0
 800b7c2:	f000 80db 	beq.w	800b97c <_dtoa_r+0x8bc>
 800b7c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7c8:	2a01      	cmp	r2, #1
 800b7ca:	f300 80bf 	bgt.w	800b94c <_dtoa_r+0x88c>
 800b7ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b7d0:	2a00      	cmp	r2, #0
 800b7d2:	f000 80b7 	beq.w	800b944 <_dtoa_r+0x884>
 800b7d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b7da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b7dc:	4646      	mov	r6, r8
 800b7de:	9a08      	ldr	r2, [sp, #32]
 800b7e0:	2101      	movs	r1, #1
 800b7e2:	441a      	add	r2, r3
 800b7e4:	4658      	mov	r0, fp
 800b7e6:	4498      	add	r8, r3
 800b7e8:	9208      	str	r2, [sp, #32]
 800b7ea:	f000 fc6b 	bl	800c0c4 <__i2b>
 800b7ee:	4605      	mov	r5, r0
 800b7f0:	b15e      	cbz	r6, 800b80a <_dtoa_r+0x74a>
 800b7f2:	9b08      	ldr	r3, [sp, #32]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	dd08      	ble.n	800b80a <_dtoa_r+0x74a>
 800b7f8:	42b3      	cmp	r3, r6
 800b7fa:	9a08      	ldr	r2, [sp, #32]
 800b7fc:	bfa8      	it	ge
 800b7fe:	4633      	movge	r3, r6
 800b800:	eba8 0803 	sub.w	r8, r8, r3
 800b804:	1af6      	subs	r6, r6, r3
 800b806:	1ad3      	subs	r3, r2, r3
 800b808:	9308      	str	r3, [sp, #32]
 800b80a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b80c:	b1f3      	cbz	r3, 800b84c <_dtoa_r+0x78c>
 800b80e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b810:	2b00      	cmp	r3, #0
 800b812:	f000 80b7 	beq.w	800b984 <_dtoa_r+0x8c4>
 800b816:	b18c      	cbz	r4, 800b83c <_dtoa_r+0x77c>
 800b818:	4629      	mov	r1, r5
 800b81a:	4622      	mov	r2, r4
 800b81c:	4658      	mov	r0, fp
 800b81e:	f000 fd11 	bl	800c244 <__pow5mult>
 800b822:	464a      	mov	r2, r9
 800b824:	4601      	mov	r1, r0
 800b826:	4605      	mov	r5, r0
 800b828:	4658      	mov	r0, fp
 800b82a:	f000 fc61 	bl	800c0f0 <__multiply>
 800b82e:	4649      	mov	r1, r9
 800b830:	9004      	str	r0, [sp, #16]
 800b832:	4658      	mov	r0, fp
 800b834:	f000 fb48 	bl	800bec8 <_Bfree>
 800b838:	9b04      	ldr	r3, [sp, #16]
 800b83a:	4699      	mov	r9, r3
 800b83c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b83e:	1b1a      	subs	r2, r3, r4
 800b840:	d004      	beq.n	800b84c <_dtoa_r+0x78c>
 800b842:	4649      	mov	r1, r9
 800b844:	4658      	mov	r0, fp
 800b846:	f000 fcfd 	bl	800c244 <__pow5mult>
 800b84a:	4681      	mov	r9, r0
 800b84c:	2101      	movs	r1, #1
 800b84e:	4658      	mov	r0, fp
 800b850:	f000 fc38 	bl	800c0c4 <__i2b>
 800b854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b856:	4604      	mov	r4, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f000 81cf 	beq.w	800bbfc <_dtoa_r+0xb3c>
 800b85e:	461a      	mov	r2, r3
 800b860:	4601      	mov	r1, r0
 800b862:	4658      	mov	r0, fp
 800b864:	f000 fcee 	bl	800c244 <__pow5mult>
 800b868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	4604      	mov	r4, r0
 800b86e:	f300 8095 	bgt.w	800b99c <_dtoa_r+0x8dc>
 800b872:	9b02      	ldr	r3, [sp, #8]
 800b874:	2b00      	cmp	r3, #0
 800b876:	f040 8087 	bne.w	800b988 <_dtoa_r+0x8c8>
 800b87a:	9b03      	ldr	r3, [sp, #12]
 800b87c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b880:	2b00      	cmp	r3, #0
 800b882:	f040 8089 	bne.w	800b998 <_dtoa_r+0x8d8>
 800b886:	9b03      	ldr	r3, [sp, #12]
 800b888:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b88c:	0d1b      	lsrs	r3, r3, #20
 800b88e:	051b      	lsls	r3, r3, #20
 800b890:	b12b      	cbz	r3, 800b89e <_dtoa_r+0x7de>
 800b892:	9b08      	ldr	r3, [sp, #32]
 800b894:	3301      	adds	r3, #1
 800b896:	9308      	str	r3, [sp, #32]
 800b898:	f108 0801 	add.w	r8, r8, #1
 800b89c:	2301      	movs	r3, #1
 800b89e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	f000 81b0 	beq.w	800bc08 <_dtoa_r+0xb48>
 800b8a8:	6923      	ldr	r3, [r4, #16]
 800b8aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b8ae:	6918      	ldr	r0, [r3, #16]
 800b8b0:	f000 fbbc 	bl	800c02c <__hi0bits>
 800b8b4:	f1c0 0020 	rsb	r0, r0, #32
 800b8b8:	9b08      	ldr	r3, [sp, #32]
 800b8ba:	4418      	add	r0, r3
 800b8bc:	f010 001f 	ands.w	r0, r0, #31
 800b8c0:	d077      	beq.n	800b9b2 <_dtoa_r+0x8f2>
 800b8c2:	f1c0 0320 	rsb	r3, r0, #32
 800b8c6:	2b04      	cmp	r3, #4
 800b8c8:	dd6b      	ble.n	800b9a2 <_dtoa_r+0x8e2>
 800b8ca:	9b08      	ldr	r3, [sp, #32]
 800b8cc:	f1c0 001c 	rsb	r0, r0, #28
 800b8d0:	4403      	add	r3, r0
 800b8d2:	4480      	add	r8, r0
 800b8d4:	4406      	add	r6, r0
 800b8d6:	9308      	str	r3, [sp, #32]
 800b8d8:	f1b8 0f00 	cmp.w	r8, #0
 800b8dc:	dd05      	ble.n	800b8ea <_dtoa_r+0x82a>
 800b8de:	4649      	mov	r1, r9
 800b8e0:	4642      	mov	r2, r8
 800b8e2:	4658      	mov	r0, fp
 800b8e4:	f000 fd08 	bl	800c2f8 <__lshift>
 800b8e8:	4681      	mov	r9, r0
 800b8ea:	9b08      	ldr	r3, [sp, #32]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	dd05      	ble.n	800b8fc <_dtoa_r+0x83c>
 800b8f0:	4621      	mov	r1, r4
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	4658      	mov	r0, fp
 800b8f6:	f000 fcff 	bl	800c2f8 <__lshift>
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d059      	beq.n	800b9b6 <_dtoa_r+0x8f6>
 800b902:	4621      	mov	r1, r4
 800b904:	4648      	mov	r0, r9
 800b906:	f000 fd63 	bl	800c3d0 <__mcmp>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	da53      	bge.n	800b9b6 <_dtoa_r+0x8f6>
 800b90e:	1e7b      	subs	r3, r7, #1
 800b910:	9304      	str	r3, [sp, #16]
 800b912:	4649      	mov	r1, r9
 800b914:	2300      	movs	r3, #0
 800b916:	220a      	movs	r2, #10
 800b918:	4658      	mov	r0, fp
 800b91a:	f000 faf7 	bl	800bf0c <__multadd>
 800b91e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b920:	4681      	mov	r9, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	f000 8172 	beq.w	800bc0c <_dtoa_r+0xb4c>
 800b928:	2300      	movs	r3, #0
 800b92a:	4629      	mov	r1, r5
 800b92c:	220a      	movs	r2, #10
 800b92e:	4658      	mov	r0, fp
 800b930:	f000 faec 	bl	800bf0c <__multadd>
 800b934:	9b00      	ldr	r3, [sp, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	4605      	mov	r5, r0
 800b93a:	dc67      	bgt.n	800ba0c <_dtoa_r+0x94c>
 800b93c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b93e:	2b02      	cmp	r3, #2
 800b940:	dc41      	bgt.n	800b9c6 <_dtoa_r+0x906>
 800b942:	e063      	b.n	800ba0c <_dtoa_r+0x94c>
 800b944:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b946:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b94a:	e746      	b.n	800b7da <_dtoa_r+0x71a>
 800b94c:	9b07      	ldr	r3, [sp, #28]
 800b94e:	1e5c      	subs	r4, r3, #1
 800b950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b952:	42a3      	cmp	r3, r4
 800b954:	bfbf      	itttt	lt
 800b956:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b958:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b95a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b95c:	1ae3      	sublt	r3, r4, r3
 800b95e:	bfb4      	ite	lt
 800b960:	18d2      	addlt	r2, r2, r3
 800b962:	1b1c      	subge	r4, r3, r4
 800b964:	9b07      	ldr	r3, [sp, #28]
 800b966:	bfbc      	itt	lt
 800b968:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b96a:	2400      	movlt	r4, #0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	bfb5      	itete	lt
 800b970:	eba8 0603 	sublt.w	r6, r8, r3
 800b974:	9b07      	ldrge	r3, [sp, #28]
 800b976:	2300      	movlt	r3, #0
 800b978:	4646      	movge	r6, r8
 800b97a:	e730      	b.n	800b7de <_dtoa_r+0x71e>
 800b97c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b97e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b980:	4646      	mov	r6, r8
 800b982:	e735      	b.n	800b7f0 <_dtoa_r+0x730>
 800b984:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b986:	e75c      	b.n	800b842 <_dtoa_r+0x782>
 800b988:	2300      	movs	r3, #0
 800b98a:	e788      	b.n	800b89e <_dtoa_r+0x7de>
 800b98c:	3fe00000 	.word	0x3fe00000
 800b990:	40240000 	.word	0x40240000
 800b994:	40140000 	.word	0x40140000
 800b998:	9b02      	ldr	r3, [sp, #8]
 800b99a:	e780      	b.n	800b89e <_dtoa_r+0x7de>
 800b99c:	2300      	movs	r3, #0
 800b99e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9a0:	e782      	b.n	800b8a8 <_dtoa_r+0x7e8>
 800b9a2:	d099      	beq.n	800b8d8 <_dtoa_r+0x818>
 800b9a4:	9a08      	ldr	r2, [sp, #32]
 800b9a6:	331c      	adds	r3, #28
 800b9a8:	441a      	add	r2, r3
 800b9aa:	4498      	add	r8, r3
 800b9ac:	441e      	add	r6, r3
 800b9ae:	9208      	str	r2, [sp, #32]
 800b9b0:	e792      	b.n	800b8d8 <_dtoa_r+0x818>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	e7f6      	b.n	800b9a4 <_dtoa_r+0x8e4>
 800b9b6:	9b07      	ldr	r3, [sp, #28]
 800b9b8:	9704      	str	r7, [sp, #16]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	dc20      	bgt.n	800ba00 <_dtoa_r+0x940>
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	dd1e      	ble.n	800ba04 <_dtoa_r+0x944>
 800b9c6:	9b00      	ldr	r3, [sp, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f47f aec0 	bne.w	800b74e <_dtoa_r+0x68e>
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	2205      	movs	r2, #5
 800b9d2:	4658      	mov	r0, fp
 800b9d4:	f000 fa9a 	bl	800bf0c <__multadd>
 800b9d8:	4601      	mov	r1, r0
 800b9da:	4604      	mov	r4, r0
 800b9dc:	4648      	mov	r0, r9
 800b9de:	f000 fcf7 	bl	800c3d0 <__mcmp>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	f77f aeb3 	ble.w	800b74e <_dtoa_r+0x68e>
 800b9e8:	4656      	mov	r6, sl
 800b9ea:	2331      	movs	r3, #49	@ 0x31
 800b9ec:	f806 3b01 	strb.w	r3, [r6], #1
 800b9f0:	9b04      	ldr	r3, [sp, #16]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	9304      	str	r3, [sp, #16]
 800b9f6:	e6ae      	b.n	800b756 <_dtoa_r+0x696>
 800b9f8:	9c07      	ldr	r4, [sp, #28]
 800b9fa:	9704      	str	r7, [sp, #16]
 800b9fc:	4625      	mov	r5, r4
 800b9fe:	e7f3      	b.n	800b9e8 <_dtoa_r+0x928>
 800ba00:	9b07      	ldr	r3, [sp, #28]
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f000 8104 	beq.w	800bc14 <_dtoa_r+0xb54>
 800ba0c:	2e00      	cmp	r6, #0
 800ba0e:	dd05      	ble.n	800ba1c <_dtoa_r+0x95c>
 800ba10:	4629      	mov	r1, r5
 800ba12:	4632      	mov	r2, r6
 800ba14:	4658      	mov	r0, fp
 800ba16:	f000 fc6f 	bl	800c2f8 <__lshift>
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d05a      	beq.n	800bad8 <_dtoa_r+0xa18>
 800ba22:	6869      	ldr	r1, [r5, #4]
 800ba24:	4658      	mov	r0, fp
 800ba26:	f000 fa0f 	bl	800be48 <_Balloc>
 800ba2a:	4606      	mov	r6, r0
 800ba2c:	b928      	cbnz	r0, 800ba3a <_dtoa_r+0x97a>
 800ba2e:	4b84      	ldr	r3, [pc, #528]	@ (800bc40 <_dtoa_r+0xb80>)
 800ba30:	4602      	mov	r2, r0
 800ba32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ba36:	f7ff bb5a 	b.w	800b0ee <_dtoa_r+0x2e>
 800ba3a:	692a      	ldr	r2, [r5, #16]
 800ba3c:	3202      	adds	r2, #2
 800ba3e:	0092      	lsls	r2, r2, #2
 800ba40:	f105 010c 	add.w	r1, r5, #12
 800ba44:	300c      	adds	r0, #12
 800ba46:	f7ff fa7e 	bl	800af46 <memcpy>
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	4631      	mov	r1, r6
 800ba4e:	4658      	mov	r0, fp
 800ba50:	f000 fc52 	bl	800c2f8 <__lshift>
 800ba54:	f10a 0301 	add.w	r3, sl, #1
 800ba58:	9307      	str	r3, [sp, #28]
 800ba5a:	9b00      	ldr	r3, [sp, #0]
 800ba5c:	4453      	add	r3, sl
 800ba5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba60:	9b02      	ldr	r3, [sp, #8]
 800ba62:	f003 0301 	and.w	r3, r3, #1
 800ba66:	462f      	mov	r7, r5
 800ba68:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba6a:	4605      	mov	r5, r0
 800ba6c:	9b07      	ldr	r3, [sp, #28]
 800ba6e:	4621      	mov	r1, r4
 800ba70:	3b01      	subs	r3, #1
 800ba72:	4648      	mov	r0, r9
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	f7ff fa99 	bl	800afac <quorem>
 800ba7a:	4639      	mov	r1, r7
 800ba7c:	9002      	str	r0, [sp, #8]
 800ba7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ba82:	4648      	mov	r0, r9
 800ba84:	f000 fca4 	bl	800c3d0 <__mcmp>
 800ba88:	462a      	mov	r2, r5
 800ba8a:	9008      	str	r0, [sp, #32]
 800ba8c:	4621      	mov	r1, r4
 800ba8e:	4658      	mov	r0, fp
 800ba90:	f000 fcba 	bl	800c408 <__mdiff>
 800ba94:	68c2      	ldr	r2, [r0, #12]
 800ba96:	4606      	mov	r6, r0
 800ba98:	bb02      	cbnz	r2, 800badc <_dtoa_r+0xa1c>
 800ba9a:	4601      	mov	r1, r0
 800ba9c:	4648      	mov	r0, r9
 800ba9e:	f000 fc97 	bl	800c3d0 <__mcmp>
 800baa2:	4602      	mov	r2, r0
 800baa4:	4631      	mov	r1, r6
 800baa6:	4658      	mov	r0, fp
 800baa8:	920e      	str	r2, [sp, #56]	@ 0x38
 800baaa:	f000 fa0d 	bl	800bec8 <_Bfree>
 800baae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bab0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bab2:	9e07      	ldr	r6, [sp, #28]
 800bab4:	ea43 0102 	orr.w	r1, r3, r2
 800bab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baba:	4319      	orrs	r1, r3
 800babc:	d110      	bne.n	800bae0 <_dtoa_r+0xa20>
 800babe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bac2:	d029      	beq.n	800bb18 <_dtoa_r+0xa58>
 800bac4:	9b08      	ldr	r3, [sp, #32]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	dd02      	ble.n	800bad0 <_dtoa_r+0xa10>
 800baca:	9b02      	ldr	r3, [sp, #8]
 800bacc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bad0:	9b00      	ldr	r3, [sp, #0]
 800bad2:	f883 8000 	strb.w	r8, [r3]
 800bad6:	e63f      	b.n	800b758 <_dtoa_r+0x698>
 800bad8:	4628      	mov	r0, r5
 800bada:	e7bb      	b.n	800ba54 <_dtoa_r+0x994>
 800badc:	2201      	movs	r2, #1
 800bade:	e7e1      	b.n	800baa4 <_dtoa_r+0x9e4>
 800bae0:	9b08      	ldr	r3, [sp, #32]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	db04      	blt.n	800baf0 <_dtoa_r+0xa30>
 800bae6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bae8:	430b      	orrs	r3, r1
 800baea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800baec:	430b      	orrs	r3, r1
 800baee:	d120      	bne.n	800bb32 <_dtoa_r+0xa72>
 800baf0:	2a00      	cmp	r2, #0
 800baf2:	dded      	ble.n	800bad0 <_dtoa_r+0xa10>
 800baf4:	4649      	mov	r1, r9
 800baf6:	2201      	movs	r2, #1
 800baf8:	4658      	mov	r0, fp
 800bafa:	f000 fbfd 	bl	800c2f8 <__lshift>
 800bafe:	4621      	mov	r1, r4
 800bb00:	4681      	mov	r9, r0
 800bb02:	f000 fc65 	bl	800c3d0 <__mcmp>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	dc03      	bgt.n	800bb12 <_dtoa_r+0xa52>
 800bb0a:	d1e1      	bne.n	800bad0 <_dtoa_r+0xa10>
 800bb0c:	f018 0f01 	tst.w	r8, #1
 800bb10:	d0de      	beq.n	800bad0 <_dtoa_r+0xa10>
 800bb12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb16:	d1d8      	bne.n	800baca <_dtoa_r+0xa0a>
 800bb18:	9a00      	ldr	r2, [sp, #0]
 800bb1a:	2339      	movs	r3, #57	@ 0x39
 800bb1c:	7013      	strb	r3, [r2, #0]
 800bb1e:	4633      	mov	r3, r6
 800bb20:	461e      	mov	r6, r3
 800bb22:	3b01      	subs	r3, #1
 800bb24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bb28:	2a39      	cmp	r2, #57	@ 0x39
 800bb2a:	d052      	beq.n	800bbd2 <_dtoa_r+0xb12>
 800bb2c:	3201      	adds	r2, #1
 800bb2e:	701a      	strb	r2, [r3, #0]
 800bb30:	e612      	b.n	800b758 <_dtoa_r+0x698>
 800bb32:	2a00      	cmp	r2, #0
 800bb34:	dd07      	ble.n	800bb46 <_dtoa_r+0xa86>
 800bb36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb3a:	d0ed      	beq.n	800bb18 <_dtoa_r+0xa58>
 800bb3c:	9a00      	ldr	r2, [sp, #0]
 800bb3e:	f108 0301 	add.w	r3, r8, #1
 800bb42:	7013      	strb	r3, [r2, #0]
 800bb44:	e608      	b.n	800b758 <_dtoa_r+0x698>
 800bb46:	9b07      	ldr	r3, [sp, #28]
 800bb48:	9a07      	ldr	r2, [sp, #28]
 800bb4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bb4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d028      	beq.n	800bba6 <_dtoa_r+0xae6>
 800bb54:	4649      	mov	r1, r9
 800bb56:	2300      	movs	r3, #0
 800bb58:	220a      	movs	r2, #10
 800bb5a:	4658      	mov	r0, fp
 800bb5c:	f000 f9d6 	bl	800bf0c <__multadd>
 800bb60:	42af      	cmp	r7, r5
 800bb62:	4681      	mov	r9, r0
 800bb64:	f04f 0300 	mov.w	r3, #0
 800bb68:	f04f 020a 	mov.w	r2, #10
 800bb6c:	4639      	mov	r1, r7
 800bb6e:	4658      	mov	r0, fp
 800bb70:	d107      	bne.n	800bb82 <_dtoa_r+0xac2>
 800bb72:	f000 f9cb 	bl	800bf0c <__multadd>
 800bb76:	4607      	mov	r7, r0
 800bb78:	4605      	mov	r5, r0
 800bb7a:	9b07      	ldr	r3, [sp, #28]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	9307      	str	r3, [sp, #28]
 800bb80:	e774      	b.n	800ba6c <_dtoa_r+0x9ac>
 800bb82:	f000 f9c3 	bl	800bf0c <__multadd>
 800bb86:	4629      	mov	r1, r5
 800bb88:	4607      	mov	r7, r0
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	220a      	movs	r2, #10
 800bb8e:	4658      	mov	r0, fp
 800bb90:	f000 f9bc 	bl	800bf0c <__multadd>
 800bb94:	4605      	mov	r5, r0
 800bb96:	e7f0      	b.n	800bb7a <_dtoa_r+0xaba>
 800bb98:	9b00      	ldr	r3, [sp, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	bfcc      	ite	gt
 800bb9e:	461e      	movgt	r6, r3
 800bba0:	2601      	movle	r6, #1
 800bba2:	4456      	add	r6, sl
 800bba4:	2700      	movs	r7, #0
 800bba6:	4649      	mov	r1, r9
 800bba8:	2201      	movs	r2, #1
 800bbaa:	4658      	mov	r0, fp
 800bbac:	f000 fba4 	bl	800c2f8 <__lshift>
 800bbb0:	4621      	mov	r1, r4
 800bbb2:	4681      	mov	r9, r0
 800bbb4:	f000 fc0c 	bl	800c3d0 <__mcmp>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	dcb0      	bgt.n	800bb1e <_dtoa_r+0xa5e>
 800bbbc:	d102      	bne.n	800bbc4 <_dtoa_r+0xb04>
 800bbbe:	f018 0f01 	tst.w	r8, #1
 800bbc2:	d1ac      	bne.n	800bb1e <_dtoa_r+0xa5e>
 800bbc4:	4633      	mov	r3, r6
 800bbc6:	461e      	mov	r6, r3
 800bbc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbcc:	2a30      	cmp	r2, #48	@ 0x30
 800bbce:	d0fa      	beq.n	800bbc6 <_dtoa_r+0xb06>
 800bbd0:	e5c2      	b.n	800b758 <_dtoa_r+0x698>
 800bbd2:	459a      	cmp	sl, r3
 800bbd4:	d1a4      	bne.n	800bb20 <_dtoa_r+0xa60>
 800bbd6:	9b04      	ldr	r3, [sp, #16]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	9304      	str	r3, [sp, #16]
 800bbdc:	2331      	movs	r3, #49	@ 0x31
 800bbde:	f88a 3000 	strb.w	r3, [sl]
 800bbe2:	e5b9      	b.n	800b758 <_dtoa_r+0x698>
 800bbe4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bbe6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bc44 <_dtoa_r+0xb84>
 800bbea:	b11b      	cbz	r3, 800bbf4 <_dtoa_r+0xb34>
 800bbec:	f10a 0308 	add.w	r3, sl, #8
 800bbf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bbf2:	6013      	str	r3, [r2, #0]
 800bbf4:	4650      	mov	r0, sl
 800bbf6:	b019      	add	sp, #100	@ 0x64
 800bbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	f77f ae37 	ble.w	800b872 <_dtoa_r+0x7b2>
 800bc04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc06:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc08:	2001      	movs	r0, #1
 800bc0a:	e655      	b.n	800b8b8 <_dtoa_r+0x7f8>
 800bc0c:	9b00      	ldr	r3, [sp, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f77f aed6 	ble.w	800b9c0 <_dtoa_r+0x900>
 800bc14:	4656      	mov	r6, sl
 800bc16:	4621      	mov	r1, r4
 800bc18:	4648      	mov	r0, r9
 800bc1a:	f7ff f9c7 	bl	800afac <quorem>
 800bc1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bc22:	f806 8b01 	strb.w	r8, [r6], #1
 800bc26:	9b00      	ldr	r3, [sp, #0]
 800bc28:	eba6 020a 	sub.w	r2, r6, sl
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	ddb3      	ble.n	800bb98 <_dtoa_r+0xad8>
 800bc30:	4649      	mov	r1, r9
 800bc32:	2300      	movs	r3, #0
 800bc34:	220a      	movs	r2, #10
 800bc36:	4658      	mov	r0, fp
 800bc38:	f000 f968 	bl	800bf0c <__multadd>
 800bc3c:	4681      	mov	r9, r0
 800bc3e:	e7ea      	b.n	800bc16 <_dtoa_r+0xb56>
 800bc40:	0800e873 	.word	0x0800e873
 800bc44:	0800e80e 	.word	0x0800e80e

0800bc48 <_free_r>:
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	4605      	mov	r5, r0
 800bc4c:	2900      	cmp	r1, #0
 800bc4e:	d041      	beq.n	800bcd4 <_free_r+0x8c>
 800bc50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc54:	1f0c      	subs	r4, r1, #4
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	bfb8      	it	lt
 800bc5a:	18e4      	addlt	r4, r4, r3
 800bc5c:	f000 f8e8 	bl	800be30 <__malloc_lock>
 800bc60:	4a1d      	ldr	r2, [pc, #116]	@ (800bcd8 <_free_r+0x90>)
 800bc62:	6813      	ldr	r3, [r2, #0]
 800bc64:	b933      	cbnz	r3, 800bc74 <_free_r+0x2c>
 800bc66:	6063      	str	r3, [r4, #4]
 800bc68:	6014      	str	r4, [r2, #0]
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc70:	f000 b8e4 	b.w	800be3c <__malloc_unlock>
 800bc74:	42a3      	cmp	r3, r4
 800bc76:	d908      	bls.n	800bc8a <_free_r+0x42>
 800bc78:	6820      	ldr	r0, [r4, #0]
 800bc7a:	1821      	adds	r1, r4, r0
 800bc7c:	428b      	cmp	r3, r1
 800bc7e:	bf01      	itttt	eq
 800bc80:	6819      	ldreq	r1, [r3, #0]
 800bc82:	685b      	ldreq	r3, [r3, #4]
 800bc84:	1809      	addeq	r1, r1, r0
 800bc86:	6021      	streq	r1, [r4, #0]
 800bc88:	e7ed      	b.n	800bc66 <_free_r+0x1e>
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	b10b      	cbz	r3, 800bc94 <_free_r+0x4c>
 800bc90:	42a3      	cmp	r3, r4
 800bc92:	d9fa      	bls.n	800bc8a <_free_r+0x42>
 800bc94:	6811      	ldr	r1, [r2, #0]
 800bc96:	1850      	adds	r0, r2, r1
 800bc98:	42a0      	cmp	r0, r4
 800bc9a:	d10b      	bne.n	800bcb4 <_free_r+0x6c>
 800bc9c:	6820      	ldr	r0, [r4, #0]
 800bc9e:	4401      	add	r1, r0
 800bca0:	1850      	adds	r0, r2, r1
 800bca2:	4283      	cmp	r3, r0
 800bca4:	6011      	str	r1, [r2, #0]
 800bca6:	d1e0      	bne.n	800bc6a <_free_r+0x22>
 800bca8:	6818      	ldr	r0, [r3, #0]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	6053      	str	r3, [r2, #4]
 800bcae:	4408      	add	r0, r1
 800bcb0:	6010      	str	r0, [r2, #0]
 800bcb2:	e7da      	b.n	800bc6a <_free_r+0x22>
 800bcb4:	d902      	bls.n	800bcbc <_free_r+0x74>
 800bcb6:	230c      	movs	r3, #12
 800bcb8:	602b      	str	r3, [r5, #0]
 800bcba:	e7d6      	b.n	800bc6a <_free_r+0x22>
 800bcbc:	6820      	ldr	r0, [r4, #0]
 800bcbe:	1821      	adds	r1, r4, r0
 800bcc0:	428b      	cmp	r3, r1
 800bcc2:	bf04      	itt	eq
 800bcc4:	6819      	ldreq	r1, [r3, #0]
 800bcc6:	685b      	ldreq	r3, [r3, #4]
 800bcc8:	6063      	str	r3, [r4, #4]
 800bcca:	bf04      	itt	eq
 800bccc:	1809      	addeq	r1, r1, r0
 800bcce:	6021      	streq	r1, [r4, #0]
 800bcd0:	6054      	str	r4, [r2, #4]
 800bcd2:	e7ca      	b.n	800bc6a <_free_r+0x22>
 800bcd4:	bd38      	pop	{r3, r4, r5, pc}
 800bcd6:	bf00      	nop
 800bcd8:	20004760 	.word	0x20004760

0800bcdc <malloc>:
 800bcdc:	4b02      	ldr	r3, [pc, #8]	@ (800bce8 <malloc+0xc>)
 800bcde:	4601      	mov	r1, r0
 800bce0:	6818      	ldr	r0, [r3, #0]
 800bce2:	f000 b825 	b.w	800bd30 <_malloc_r>
 800bce6:	bf00      	nop
 800bce8:	2000001c 	.word	0x2000001c

0800bcec <sbrk_aligned>:
 800bcec:	b570      	push	{r4, r5, r6, lr}
 800bcee:	4e0f      	ldr	r6, [pc, #60]	@ (800bd2c <sbrk_aligned+0x40>)
 800bcf0:	460c      	mov	r4, r1
 800bcf2:	6831      	ldr	r1, [r6, #0]
 800bcf4:	4605      	mov	r5, r0
 800bcf6:	b911      	cbnz	r1, 800bcfe <sbrk_aligned+0x12>
 800bcf8:	f001 fe1e 	bl	800d938 <_sbrk_r>
 800bcfc:	6030      	str	r0, [r6, #0]
 800bcfe:	4621      	mov	r1, r4
 800bd00:	4628      	mov	r0, r5
 800bd02:	f001 fe19 	bl	800d938 <_sbrk_r>
 800bd06:	1c43      	adds	r3, r0, #1
 800bd08:	d103      	bne.n	800bd12 <sbrk_aligned+0x26>
 800bd0a:	f04f 34ff 	mov.w	r4, #4294967295
 800bd0e:	4620      	mov	r0, r4
 800bd10:	bd70      	pop	{r4, r5, r6, pc}
 800bd12:	1cc4      	adds	r4, r0, #3
 800bd14:	f024 0403 	bic.w	r4, r4, #3
 800bd18:	42a0      	cmp	r0, r4
 800bd1a:	d0f8      	beq.n	800bd0e <sbrk_aligned+0x22>
 800bd1c:	1a21      	subs	r1, r4, r0
 800bd1e:	4628      	mov	r0, r5
 800bd20:	f001 fe0a 	bl	800d938 <_sbrk_r>
 800bd24:	3001      	adds	r0, #1
 800bd26:	d1f2      	bne.n	800bd0e <sbrk_aligned+0x22>
 800bd28:	e7ef      	b.n	800bd0a <sbrk_aligned+0x1e>
 800bd2a:	bf00      	nop
 800bd2c:	2000475c 	.word	0x2000475c

0800bd30 <_malloc_r>:
 800bd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd34:	1ccd      	adds	r5, r1, #3
 800bd36:	f025 0503 	bic.w	r5, r5, #3
 800bd3a:	3508      	adds	r5, #8
 800bd3c:	2d0c      	cmp	r5, #12
 800bd3e:	bf38      	it	cc
 800bd40:	250c      	movcc	r5, #12
 800bd42:	2d00      	cmp	r5, #0
 800bd44:	4606      	mov	r6, r0
 800bd46:	db01      	blt.n	800bd4c <_malloc_r+0x1c>
 800bd48:	42a9      	cmp	r1, r5
 800bd4a:	d904      	bls.n	800bd56 <_malloc_r+0x26>
 800bd4c:	230c      	movs	r3, #12
 800bd4e:	6033      	str	r3, [r6, #0]
 800bd50:	2000      	movs	r0, #0
 800bd52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be2c <_malloc_r+0xfc>
 800bd5a:	f000 f869 	bl	800be30 <__malloc_lock>
 800bd5e:	f8d8 3000 	ldr.w	r3, [r8]
 800bd62:	461c      	mov	r4, r3
 800bd64:	bb44      	cbnz	r4, 800bdb8 <_malloc_r+0x88>
 800bd66:	4629      	mov	r1, r5
 800bd68:	4630      	mov	r0, r6
 800bd6a:	f7ff ffbf 	bl	800bcec <sbrk_aligned>
 800bd6e:	1c43      	adds	r3, r0, #1
 800bd70:	4604      	mov	r4, r0
 800bd72:	d158      	bne.n	800be26 <_malloc_r+0xf6>
 800bd74:	f8d8 4000 	ldr.w	r4, [r8]
 800bd78:	4627      	mov	r7, r4
 800bd7a:	2f00      	cmp	r7, #0
 800bd7c:	d143      	bne.n	800be06 <_malloc_r+0xd6>
 800bd7e:	2c00      	cmp	r4, #0
 800bd80:	d04b      	beq.n	800be1a <_malloc_r+0xea>
 800bd82:	6823      	ldr	r3, [r4, #0]
 800bd84:	4639      	mov	r1, r7
 800bd86:	4630      	mov	r0, r6
 800bd88:	eb04 0903 	add.w	r9, r4, r3
 800bd8c:	f001 fdd4 	bl	800d938 <_sbrk_r>
 800bd90:	4581      	cmp	r9, r0
 800bd92:	d142      	bne.n	800be1a <_malloc_r+0xea>
 800bd94:	6821      	ldr	r1, [r4, #0]
 800bd96:	1a6d      	subs	r5, r5, r1
 800bd98:	4629      	mov	r1, r5
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	f7ff ffa6 	bl	800bcec <sbrk_aligned>
 800bda0:	3001      	adds	r0, #1
 800bda2:	d03a      	beq.n	800be1a <_malloc_r+0xea>
 800bda4:	6823      	ldr	r3, [r4, #0]
 800bda6:	442b      	add	r3, r5
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	f8d8 3000 	ldr.w	r3, [r8]
 800bdae:	685a      	ldr	r2, [r3, #4]
 800bdb0:	bb62      	cbnz	r2, 800be0c <_malloc_r+0xdc>
 800bdb2:	f8c8 7000 	str.w	r7, [r8]
 800bdb6:	e00f      	b.n	800bdd8 <_malloc_r+0xa8>
 800bdb8:	6822      	ldr	r2, [r4, #0]
 800bdba:	1b52      	subs	r2, r2, r5
 800bdbc:	d420      	bmi.n	800be00 <_malloc_r+0xd0>
 800bdbe:	2a0b      	cmp	r2, #11
 800bdc0:	d917      	bls.n	800bdf2 <_malloc_r+0xc2>
 800bdc2:	1961      	adds	r1, r4, r5
 800bdc4:	42a3      	cmp	r3, r4
 800bdc6:	6025      	str	r5, [r4, #0]
 800bdc8:	bf18      	it	ne
 800bdca:	6059      	strne	r1, [r3, #4]
 800bdcc:	6863      	ldr	r3, [r4, #4]
 800bdce:	bf08      	it	eq
 800bdd0:	f8c8 1000 	streq.w	r1, [r8]
 800bdd4:	5162      	str	r2, [r4, r5]
 800bdd6:	604b      	str	r3, [r1, #4]
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f000 f82f 	bl	800be3c <__malloc_unlock>
 800bdde:	f104 000b 	add.w	r0, r4, #11
 800bde2:	1d23      	adds	r3, r4, #4
 800bde4:	f020 0007 	bic.w	r0, r0, #7
 800bde8:	1ac2      	subs	r2, r0, r3
 800bdea:	bf1c      	itt	ne
 800bdec:	1a1b      	subne	r3, r3, r0
 800bdee:	50a3      	strne	r3, [r4, r2]
 800bdf0:	e7af      	b.n	800bd52 <_malloc_r+0x22>
 800bdf2:	6862      	ldr	r2, [r4, #4]
 800bdf4:	42a3      	cmp	r3, r4
 800bdf6:	bf0c      	ite	eq
 800bdf8:	f8c8 2000 	streq.w	r2, [r8]
 800bdfc:	605a      	strne	r2, [r3, #4]
 800bdfe:	e7eb      	b.n	800bdd8 <_malloc_r+0xa8>
 800be00:	4623      	mov	r3, r4
 800be02:	6864      	ldr	r4, [r4, #4]
 800be04:	e7ae      	b.n	800bd64 <_malloc_r+0x34>
 800be06:	463c      	mov	r4, r7
 800be08:	687f      	ldr	r7, [r7, #4]
 800be0a:	e7b6      	b.n	800bd7a <_malloc_r+0x4a>
 800be0c:	461a      	mov	r2, r3
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	42a3      	cmp	r3, r4
 800be12:	d1fb      	bne.n	800be0c <_malloc_r+0xdc>
 800be14:	2300      	movs	r3, #0
 800be16:	6053      	str	r3, [r2, #4]
 800be18:	e7de      	b.n	800bdd8 <_malloc_r+0xa8>
 800be1a:	230c      	movs	r3, #12
 800be1c:	6033      	str	r3, [r6, #0]
 800be1e:	4630      	mov	r0, r6
 800be20:	f000 f80c 	bl	800be3c <__malloc_unlock>
 800be24:	e794      	b.n	800bd50 <_malloc_r+0x20>
 800be26:	6005      	str	r5, [r0, #0]
 800be28:	e7d6      	b.n	800bdd8 <_malloc_r+0xa8>
 800be2a:	bf00      	nop
 800be2c:	20004760 	.word	0x20004760

0800be30 <__malloc_lock>:
 800be30:	4801      	ldr	r0, [pc, #4]	@ (800be38 <__malloc_lock+0x8>)
 800be32:	f7ff b886 	b.w	800af42 <__retarget_lock_acquire_recursive>
 800be36:	bf00      	nop
 800be38:	20004758 	.word	0x20004758

0800be3c <__malloc_unlock>:
 800be3c:	4801      	ldr	r0, [pc, #4]	@ (800be44 <__malloc_unlock+0x8>)
 800be3e:	f7ff b881 	b.w	800af44 <__retarget_lock_release_recursive>
 800be42:	bf00      	nop
 800be44:	20004758 	.word	0x20004758

0800be48 <_Balloc>:
 800be48:	b570      	push	{r4, r5, r6, lr}
 800be4a:	69c6      	ldr	r6, [r0, #28]
 800be4c:	4604      	mov	r4, r0
 800be4e:	460d      	mov	r5, r1
 800be50:	b976      	cbnz	r6, 800be70 <_Balloc+0x28>
 800be52:	2010      	movs	r0, #16
 800be54:	f7ff ff42 	bl	800bcdc <malloc>
 800be58:	4602      	mov	r2, r0
 800be5a:	61e0      	str	r0, [r4, #28]
 800be5c:	b920      	cbnz	r0, 800be68 <_Balloc+0x20>
 800be5e:	4b18      	ldr	r3, [pc, #96]	@ (800bec0 <_Balloc+0x78>)
 800be60:	4818      	ldr	r0, [pc, #96]	@ (800bec4 <_Balloc+0x7c>)
 800be62:	216b      	movs	r1, #107	@ 0x6b
 800be64:	f7ff f884 	bl	800af70 <__assert_func>
 800be68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be6c:	6006      	str	r6, [r0, #0]
 800be6e:	60c6      	str	r6, [r0, #12]
 800be70:	69e6      	ldr	r6, [r4, #28]
 800be72:	68f3      	ldr	r3, [r6, #12]
 800be74:	b183      	cbz	r3, 800be98 <_Balloc+0x50>
 800be76:	69e3      	ldr	r3, [r4, #28]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be7e:	b9b8      	cbnz	r0, 800beb0 <_Balloc+0x68>
 800be80:	2101      	movs	r1, #1
 800be82:	fa01 f605 	lsl.w	r6, r1, r5
 800be86:	1d72      	adds	r2, r6, #5
 800be88:	0092      	lsls	r2, r2, #2
 800be8a:	4620      	mov	r0, r4
 800be8c:	f001 fd73 	bl	800d976 <_calloc_r>
 800be90:	b160      	cbz	r0, 800beac <_Balloc+0x64>
 800be92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be96:	e00e      	b.n	800beb6 <_Balloc+0x6e>
 800be98:	2221      	movs	r2, #33	@ 0x21
 800be9a:	2104      	movs	r1, #4
 800be9c:	4620      	mov	r0, r4
 800be9e:	f001 fd6a 	bl	800d976 <_calloc_r>
 800bea2:	69e3      	ldr	r3, [r4, #28]
 800bea4:	60f0      	str	r0, [r6, #12]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d1e4      	bne.n	800be76 <_Balloc+0x2e>
 800beac:	2000      	movs	r0, #0
 800beae:	bd70      	pop	{r4, r5, r6, pc}
 800beb0:	6802      	ldr	r2, [r0, #0]
 800beb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800beb6:	2300      	movs	r3, #0
 800beb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bebc:	e7f7      	b.n	800beae <_Balloc+0x66>
 800bebe:	bf00      	nop
 800bec0:	0800e761 	.word	0x0800e761
 800bec4:	0800e884 	.word	0x0800e884

0800bec8 <_Bfree>:
 800bec8:	b570      	push	{r4, r5, r6, lr}
 800beca:	69c6      	ldr	r6, [r0, #28]
 800becc:	4605      	mov	r5, r0
 800bece:	460c      	mov	r4, r1
 800bed0:	b976      	cbnz	r6, 800bef0 <_Bfree+0x28>
 800bed2:	2010      	movs	r0, #16
 800bed4:	f7ff ff02 	bl	800bcdc <malloc>
 800bed8:	4602      	mov	r2, r0
 800beda:	61e8      	str	r0, [r5, #28]
 800bedc:	b920      	cbnz	r0, 800bee8 <_Bfree+0x20>
 800bede:	4b09      	ldr	r3, [pc, #36]	@ (800bf04 <_Bfree+0x3c>)
 800bee0:	4809      	ldr	r0, [pc, #36]	@ (800bf08 <_Bfree+0x40>)
 800bee2:	218f      	movs	r1, #143	@ 0x8f
 800bee4:	f7ff f844 	bl	800af70 <__assert_func>
 800bee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800beec:	6006      	str	r6, [r0, #0]
 800beee:	60c6      	str	r6, [r0, #12]
 800bef0:	b13c      	cbz	r4, 800bf02 <_Bfree+0x3a>
 800bef2:	69eb      	ldr	r3, [r5, #28]
 800bef4:	6862      	ldr	r2, [r4, #4]
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800befc:	6021      	str	r1, [r4, #0]
 800befe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf02:	bd70      	pop	{r4, r5, r6, pc}
 800bf04:	0800e761 	.word	0x0800e761
 800bf08:	0800e884 	.word	0x0800e884

0800bf0c <__multadd>:
 800bf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf10:	690d      	ldr	r5, [r1, #16]
 800bf12:	4607      	mov	r7, r0
 800bf14:	460c      	mov	r4, r1
 800bf16:	461e      	mov	r6, r3
 800bf18:	f101 0c14 	add.w	ip, r1, #20
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	f8dc 3000 	ldr.w	r3, [ip]
 800bf22:	b299      	uxth	r1, r3
 800bf24:	fb02 6101 	mla	r1, r2, r1, r6
 800bf28:	0c1e      	lsrs	r6, r3, #16
 800bf2a:	0c0b      	lsrs	r3, r1, #16
 800bf2c:	fb02 3306 	mla	r3, r2, r6, r3
 800bf30:	b289      	uxth	r1, r1
 800bf32:	3001      	adds	r0, #1
 800bf34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf38:	4285      	cmp	r5, r0
 800bf3a:	f84c 1b04 	str.w	r1, [ip], #4
 800bf3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf42:	dcec      	bgt.n	800bf1e <__multadd+0x12>
 800bf44:	b30e      	cbz	r6, 800bf8a <__multadd+0x7e>
 800bf46:	68a3      	ldr	r3, [r4, #8]
 800bf48:	42ab      	cmp	r3, r5
 800bf4a:	dc19      	bgt.n	800bf80 <__multadd+0x74>
 800bf4c:	6861      	ldr	r1, [r4, #4]
 800bf4e:	4638      	mov	r0, r7
 800bf50:	3101      	adds	r1, #1
 800bf52:	f7ff ff79 	bl	800be48 <_Balloc>
 800bf56:	4680      	mov	r8, r0
 800bf58:	b928      	cbnz	r0, 800bf66 <__multadd+0x5a>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	4b0c      	ldr	r3, [pc, #48]	@ (800bf90 <__multadd+0x84>)
 800bf5e:	480d      	ldr	r0, [pc, #52]	@ (800bf94 <__multadd+0x88>)
 800bf60:	21ba      	movs	r1, #186	@ 0xba
 800bf62:	f7ff f805 	bl	800af70 <__assert_func>
 800bf66:	6922      	ldr	r2, [r4, #16]
 800bf68:	3202      	adds	r2, #2
 800bf6a:	f104 010c 	add.w	r1, r4, #12
 800bf6e:	0092      	lsls	r2, r2, #2
 800bf70:	300c      	adds	r0, #12
 800bf72:	f7fe ffe8 	bl	800af46 <memcpy>
 800bf76:	4621      	mov	r1, r4
 800bf78:	4638      	mov	r0, r7
 800bf7a:	f7ff ffa5 	bl	800bec8 <_Bfree>
 800bf7e:	4644      	mov	r4, r8
 800bf80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf84:	3501      	adds	r5, #1
 800bf86:	615e      	str	r6, [r3, #20]
 800bf88:	6125      	str	r5, [r4, #16]
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf90:	0800e873 	.word	0x0800e873
 800bf94:	0800e884 	.word	0x0800e884

0800bf98 <__s2b>:
 800bf98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf9c:	460c      	mov	r4, r1
 800bf9e:	4615      	mov	r5, r2
 800bfa0:	461f      	mov	r7, r3
 800bfa2:	2209      	movs	r2, #9
 800bfa4:	3308      	adds	r3, #8
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfac:	2100      	movs	r1, #0
 800bfae:	2201      	movs	r2, #1
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	db09      	blt.n	800bfc8 <__s2b+0x30>
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	f7ff ff47 	bl	800be48 <_Balloc>
 800bfba:	b940      	cbnz	r0, 800bfce <__s2b+0x36>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	4b19      	ldr	r3, [pc, #100]	@ (800c024 <__s2b+0x8c>)
 800bfc0:	4819      	ldr	r0, [pc, #100]	@ (800c028 <__s2b+0x90>)
 800bfc2:	21d3      	movs	r1, #211	@ 0xd3
 800bfc4:	f7fe ffd4 	bl	800af70 <__assert_func>
 800bfc8:	0052      	lsls	r2, r2, #1
 800bfca:	3101      	adds	r1, #1
 800bfcc:	e7f0      	b.n	800bfb0 <__s2b+0x18>
 800bfce:	9b08      	ldr	r3, [sp, #32]
 800bfd0:	6143      	str	r3, [r0, #20]
 800bfd2:	2d09      	cmp	r5, #9
 800bfd4:	f04f 0301 	mov.w	r3, #1
 800bfd8:	6103      	str	r3, [r0, #16]
 800bfda:	dd16      	ble.n	800c00a <__s2b+0x72>
 800bfdc:	f104 0909 	add.w	r9, r4, #9
 800bfe0:	46c8      	mov	r8, r9
 800bfe2:	442c      	add	r4, r5
 800bfe4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bfe8:	4601      	mov	r1, r0
 800bfea:	3b30      	subs	r3, #48	@ 0x30
 800bfec:	220a      	movs	r2, #10
 800bfee:	4630      	mov	r0, r6
 800bff0:	f7ff ff8c 	bl	800bf0c <__multadd>
 800bff4:	45a0      	cmp	r8, r4
 800bff6:	d1f5      	bne.n	800bfe4 <__s2b+0x4c>
 800bff8:	f1a5 0408 	sub.w	r4, r5, #8
 800bffc:	444c      	add	r4, r9
 800bffe:	1b2d      	subs	r5, r5, r4
 800c000:	1963      	adds	r3, r4, r5
 800c002:	42bb      	cmp	r3, r7
 800c004:	db04      	blt.n	800c010 <__s2b+0x78>
 800c006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c00a:	340a      	adds	r4, #10
 800c00c:	2509      	movs	r5, #9
 800c00e:	e7f6      	b.n	800bffe <__s2b+0x66>
 800c010:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c014:	4601      	mov	r1, r0
 800c016:	3b30      	subs	r3, #48	@ 0x30
 800c018:	220a      	movs	r2, #10
 800c01a:	4630      	mov	r0, r6
 800c01c:	f7ff ff76 	bl	800bf0c <__multadd>
 800c020:	e7ee      	b.n	800c000 <__s2b+0x68>
 800c022:	bf00      	nop
 800c024:	0800e873 	.word	0x0800e873
 800c028:	0800e884 	.word	0x0800e884

0800c02c <__hi0bits>:
 800c02c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c030:	4603      	mov	r3, r0
 800c032:	bf36      	itet	cc
 800c034:	0403      	lslcc	r3, r0, #16
 800c036:	2000      	movcs	r0, #0
 800c038:	2010      	movcc	r0, #16
 800c03a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c03e:	bf3c      	itt	cc
 800c040:	021b      	lslcc	r3, r3, #8
 800c042:	3008      	addcc	r0, #8
 800c044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c048:	bf3c      	itt	cc
 800c04a:	011b      	lslcc	r3, r3, #4
 800c04c:	3004      	addcc	r0, #4
 800c04e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c052:	bf3c      	itt	cc
 800c054:	009b      	lslcc	r3, r3, #2
 800c056:	3002      	addcc	r0, #2
 800c058:	2b00      	cmp	r3, #0
 800c05a:	db05      	blt.n	800c068 <__hi0bits+0x3c>
 800c05c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c060:	f100 0001 	add.w	r0, r0, #1
 800c064:	bf08      	it	eq
 800c066:	2020      	moveq	r0, #32
 800c068:	4770      	bx	lr

0800c06a <__lo0bits>:
 800c06a:	6803      	ldr	r3, [r0, #0]
 800c06c:	4602      	mov	r2, r0
 800c06e:	f013 0007 	ands.w	r0, r3, #7
 800c072:	d00b      	beq.n	800c08c <__lo0bits+0x22>
 800c074:	07d9      	lsls	r1, r3, #31
 800c076:	d421      	bmi.n	800c0bc <__lo0bits+0x52>
 800c078:	0798      	lsls	r0, r3, #30
 800c07a:	bf49      	itett	mi
 800c07c:	085b      	lsrmi	r3, r3, #1
 800c07e:	089b      	lsrpl	r3, r3, #2
 800c080:	2001      	movmi	r0, #1
 800c082:	6013      	strmi	r3, [r2, #0]
 800c084:	bf5c      	itt	pl
 800c086:	6013      	strpl	r3, [r2, #0]
 800c088:	2002      	movpl	r0, #2
 800c08a:	4770      	bx	lr
 800c08c:	b299      	uxth	r1, r3
 800c08e:	b909      	cbnz	r1, 800c094 <__lo0bits+0x2a>
 800c090:	0c1b      	lsrs	r3, r3, #16
 800c092:	2010      	movs	r0, #16
 800c094:	b2d9      	uxtb	r1, r3
 800c096:	b909      	cbnz	r1, 800c09c <__lo0bits+0x32>
 800c098:	3008      	adds	r0, #8
 800c09a:	0a1b      	lsrs	r3, r3, #8
 800c09c:	0719      	lsls	r1, r3, #28
 800c09e:	bf04      	itt	eq
 800c0a0:	091b      	lsreq	r3, r3, #4
 800c0a2:	3004      	addeq	r0, #4
 800c0a4:	0799      	lsls	r1, r3, #30
 800c0a6:	bf04      	itt	eq
 800c0a8:	089b      	lsreq	r3, r3, #2
 800c0aa:	3002      	addeq	r0, #2
 800c0ac:	07d9      	lsls	r1, r3, #31
 800c0ae:	d403      	bmi.n	800c0b8 <__lo0bits+0x4e>
 800c0b0:	085b      	lsrs	r3, r3, #1
 800c0b2:	f100 0001 	add.w	r0, r0, #1
 800c0b6:	d003      	beq.n	800c0c0 <__lo0bits+0x56>
 800c0b8:	6013      	str	r3, [r2, #0]
 800c0ba:	4770      	bx	lr
 800c0bc:	2000      	movs	r0, #0
 800c0be:	4770      	bx	lr
 800c0c0:	2020      	movs	r0, #32
 800c0c2:	4770      	bx	lr

0800c0c4 <__i2b>:
 800c0c4:	b510      	push	{r4, lr}
 800c0c6:	460c      	mov	r4, r1
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	f7ff febd 	bl	800be48 <_Balloc>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	b928      	cbnz	r0, 800c0de <__i2b+0x1a>
 800c0d2:	4b05      	ldr	r3, [pc, #20]	@ (800c0e8 <__i2b+0x24>)
 800c0d4:	4805      	ldr	r0, [pc, #20]	@ (800c0ec <__i2b+0x28>)
 800c0d6:	f240 1145 	movw	r1, #325	@ 0x145
 800c0da:	f7fe ff49 	bl	800af70 <__assert_func>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	6144      	str	r4, [r0, #20]
 800c0e2:	6103      	str	r3, [r0, #16]
 800c0e4:	bd10      	pop	{r4, pc}
 800c0e6:	bf00      	nop
 800c0e8:	0800e873 	.word	0x0800e873
 800c0ec:	0800e884 	.word	0x0800e884

0800c0f0 <__multiply>:
 800c0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f4:	4614      	mov	r4, r2
 800c0f6:	690a      	ldr	r2, [r1, #16]
 800c0f8:	6923      	ldr	r3, [r4, #16]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	bfa8      	it	ge
 800c0fe:	4623      	movge	r3, r4
 800c100:	460f      	mov	r7, r1
 800c102:	bfa4      	itt	ge
 800c104:	460c      	movge	r4, r1
 800c106:	461f      	movge	r7, r3
 800c108:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c10c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c110:	68a3      	ldr	r3, [r4, #8]
 800c112:	6861      	ldr	r1, [r4, #4]
 800c114:	eb0a 0609 	add.w	r6, sl, r9
 800c118:	42b3      	cmp	r3, r6
 800c11a:	b085      	sub	sp, #20
 800c11c:	bfb8      	it	lt
 800c11e:	3101      	addlt	r1, #1
 800c120:	f7ff fe92 	bl	800be48 <_Balloc>
 800c124:	b930      	cbnz	r0, 800c134 <__multiply+0x44>
 800c126:	4602      	mov	r2, r0
 800c128:	4b44      	ldr	r3, [pc, #272]	@ (800c23c <__multiply+0x14c>)
 800c12a:	4845      	ldr	r0, [pc, #276]	@ (800c240 <__multiply+0x150>)
 800c12c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c130:	f7fe ff1e 	bl	800af70 <__assert_func>
 800c134:	f100 0514 	add.w	r5, r0, #20
 800c138:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c13c:	462b      	mov	r3, r5
 800c13e:	2200      	movs	r2, #0
 800c140:	4543      	cmp	r3, r8
 800c142:	d321      	bcc.n	800c188 <__multiply+0x98>
 800c144:	f107 0114 	add.w	r1, r7, #20
 800c148:	f104 0214 	add.w	r2, r4, #20
 800c14c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c150:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c154:	9302      	str	r3, [sp, #8]
 800c156:	1b13      	subs	r3, r2, r4
 800c158:	3b15      	subs	r3, #21
 800c15a:	f023 0303 	bic.w	r3, r3, #3
 800c15e:	3304      	adds	r3, #4
 800c160:	f104 0715 	add.w	r7, r4, #21
 800c164:	42ba      	cmp	r2, r7
 800c166:	bf38      	it	cc
 800c168:	2304      	movcc	r3, #4
 800c16a:	9301      	str	r3, [sp, #4]
 800c16c:	9b02      	ldr	r3, [sp, #8]
 800c16e:	9103      	str	r1, [sp, #12]
 800c170:	428b      	cmp	r3, r1
 800c172:	d80c      	bhi.n	800c18e <__multiply+0x9e>
 800c174:	2e00      	cmp	r6, #0
 800c176:	dd03      	ble.n	800c180 <__multiply+0x90>
 800c178:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d05b      	beq.n	800c238 <__multiply+0x148>
 800c180:	6106      	str	r6, [r0, #16]
 800c182:	b005      	add	sp, #20
 800c184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c188:	f843 2b04 	str.w	r2, [r3], #4
 800c18c:	e7d8      	b.n	800c140 <__multiply+0x50>
 800c18e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c192:	f1ba 0f00 	cmp.w	sl, #0
 800c196:	d024      	beq.n	800c1e2 <__multiply+0xf2>
 800c198:	f104 0e14 	add.w	lr, r4, #20
 800c19c:	46a9      	mov	r9, r5
 800c19e:	f04f 0c00 	mov.w	ip, #0
 800c1a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c1a6:	f8d9 3000 	ldr.w	r3, [r9]
 800c1aa:	fa1f fb87 	uxth.w	fp, r7
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	fb0a 330b 	mla	r3, sl, fp, r3
 800c1b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c1b8:	f8d9 7000 	ldr.w	r7, [r9]
 800c1bc:	4463      	add	r3, ip
 800c1be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1c2:	fb0a c70b 	mla	r7, sl, fp, ip
 800c1c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c1d0:	4572      	cmp	r2, lr
 800c1d2:	f849 3b04 	str.w	r3, [r9], #4
 800c1d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1da:	d8e2      	bhi.n	800c1a2 <__multiply+0xb2>
 800c1dc:	9b01      	ldr	r3, [sp, #4]
 800c1de:	f845 c003 	str.w	ip, [r5, r3]
 800c1e2:	9b03      	ldr	r3, [sp, #12]
 800c1e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c1e8:	3104      	adds	r1, #4
 800c1ea:	f1b9 0f00 	cmp.w	r9, #0
 800c1ee:	d021      	beq.n	800c234 <__multiply+0x144>
 800c1f0:	682b      	ldr	r3, [r5, #0]
 800c1f2:	f104 0c14 	add.w	ip, r4, #20
 800c1f6:	46ae      	mov	lr, r5
 800c1f8:	f04f 0a00 	mov.w	sl, #0
 800c1fc:	f8bc b000 	ldrh.w	fp, [ip]
 800c200:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c204:	fb09 770b 	mla	r7, r9, fp, r7
 800c208:	4457      	add	r7, sl
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c210:	f84e 3b04 	str.w	r3, [lr], #4
 800c214:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c218:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c21c:	f8be 3000 	ldrh.w	r3, [lr]
 800c220:	fb09 330a 	mla	r3, r9, sl, r3
 800c224:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c228:	4562      	cmp	r2, ip
 800c22a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c22e:	d8e5      	bhi.n	800c1fc <__multiply+0x10c>
 800c230:	9f01      	ldr	r7, [sp, #4]
 800c232:	51eb      	str	r3, [r5, r7]
 800c234:	3504      	adds	r5, #4
 800c236:	e799      	b.n	800c16c <__multiply+0x7c>
 800c238:	3e01      	subs	r6, #1
 800c23a:	e79b      	b.n	800c174 <__multiply+0x84>
 800c23c:	0800e873 	.word	0x0800e873
 800c240:	0800e884 	.word	0x0800e884

0800c244 <__pow5mult>:
 800c244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c248:	4615      	mov	r5, r2
 800c24a:	f012 0203 	ands.w	r2, r2, #3
 800c24e:	4607      	mov	r7, r0
 800c250:	460e      	mov	r6, r1
 800c252:	d007      	beq.n	800c264 <__pow5mult+0x20>
 800c254:	4c25      	ldr	r4, [pc, #148]	@ (800c2ec <__pow5mult+0xa8>)
 800c256:	3a01      	subs	r2, #1
 800c258:	2300      	movs	r3, #0
 800c25a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c25e:	f7ff fe55 	bl	800bf0c <__multadd>
 800c262:	4606      	mov	r6, r0
 800c264:	10ad      	asrs	r5, r5, #2
 800c266:	d03d      	beq.n	800c2e4 <__pow5mult+0xa0>
 800c268:	69fc      	ldr	r4, [r7, #28]
 800c26a:	b97c      	cbnz	r4, 800c28c <__pow5mult+0x48>
 800c26c:	2010      	movs	r0, #16
 800c26e:	f7ff fd35 	bl	800bcdc <malloc>
 800c272:	4602      	mov	r2, r0
 800c274:	61f8      	str	r0, [r7, #28]
 800c276:	b928      	cbnz	r0, 800c284 <__pow5mult+0x40>
 800c278:	4b1d      	ldr	r3, [pc, #116]	@ (800c2f0 <__pow5mult+0xac>)
 800c27a:	481e      	ldr	r0, [pc, #120]	@ (800c2f4 <__pow5mult+0xb0>)
 800c27c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c280:	f7fe fe76 	bl	800af70 <__assert_func>
 800c284:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c288:	6004      	str	r4, [r0, #0]
 800c28a:	60c4      	str	r4, [r0, #12]
 800c28c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c290:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c294:	b94c      	cbnz	r4, 800c2aa <__pow5mult+0x66>
 800c296:	f240 2171 	movw	r1, #625	@ 0x271
 800c29a:	4638      	mov	r0, r7
 800c29c:	f7ff ff12 	bl	800c0c4 <__i2b>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	6003      	str	r3, [r0, #0]
 800c2aa:	f04f 0900 	mov.w	r9, #0
 800c2ae:	07eb      	lsls	r3, r5, #31
 800c2b0:	d50a      	bpl.n	800c2c8 <__pow5mult+0x84>
 800c2b2:	4631      	mov	r1, r6
 800c2b4:	4622      	mov	r2, r4
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	f7ff ff1a 	bl	800c0f0 <__multiply>
 800c2bc:	4631      	mov	r1, r6
 800c2be:	4680      	mov	r8, r0
 800c2c0:	4638      	mov	r0, r7
 800c2c2:	f7ff fe01 	bl	800bec8 <_Bfree>
 800c2c6:	4646      	mov	r6, r8
 800c2c8:	106d      	asrs	r5, r5, #1
 800c2ca:	d00b      	beq.n	800c2e4 <__pow5mult+0xa0>
 800c2cc:	6820      	ldr	r0, [r4, #0]
 800c2ce:	b938      	cbnz	r0, 800c2e0 <__pow5mult+0x9c>
 800c2d0:	4622      	mov	r2, r4
 800c2d2:	4621      	mov	r1, r4
 800c2d4:	4638      	mov	r0, r7
 800c2d6:	f7ff ff0b 	bl	800c0f0 <__multiply>
 800c2da:	6020      	str	r0, [r4, #0]
 800c2dc:	f8c0 9000 	str.w	r9, [r0]
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	e7e4      	b.n	800c2ae <__pow5mult+0x6a>
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ea:	bf00      	nop
 800c2ec:	0800e8e0 	.word	0x0800e8e0
 800c2f0:	0800e761 	.word	0x0800e761
 800c2f4:	0800e884 	.word	0x0800e884

0800c2f8 <__lshift>:
 800c2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2fc:	460c      	mov	r4, r1
 800c2fe:	6849      	ldr	r1, [r1, #4]
 800c300:	6923      	ldr	r3, [r4, #16]
 800c302:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c306:	68a3      	ldr	r3, [r4, #8]
 800c308:	4607      	mov	r7, r0
 800c30a:	4691      	mov	r9, r2
 800c30c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c310:	f108 0601 	add.w	r6, r8, #1
 800c314:	42b3      	cmp	r3, r6
 800c316:	db0b      	blt.n	800c330 <__lshift+0x38>
 800c318:	4638      	mov	r0, r7
 800c31a:	f7ff fd95 	bl	800be48 <_Balloc>
 800c31e:	4605      	mov	r5, r0
 800c320:	b948      	cbnz	r0, 800c336 <__lshift+0x3e>
 800c322:	4602      	mov	r2, r0
 800c324:	4b28      	ldr	r3, [pc, #160]	@ (800c3c8 <__lshift+0xd0>)
 800c326:	4829      	ldr	r0, [pc, #164]	@ (800c3cc <__lshift+0xd4>)
 800c328:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c32c:	f7fe fe20 	bl	800af70 <__assert_func>
 800c330:	3101      	adds	r1, #1
 800c332:	005b      	lsls	r3, r3, #1
 800c334:	e7ee      	b.n	800c314 <__lshift+0x1c>
 800c336:	2300      	movs	r3, #0
 800c338:	f100 0114 	add.w	r1, r0, #20
 800c33c:	f100 0210 	add.w	r2, r0, #16
 800c340:	4618      	mov	r0, r3
 800c342:	4553      	cmp	r3, sl
 800c344:	db33      	blt.n	800c3ae <__lshift+0xb6>
 800c346:	6920      	ldr	r0, [r4, #16]
 800c348:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c34c:	f104 0314 	add.w	r3, r4, #20
 800c350:	f019 091f 	ands.w	r9, r9, #31
 800c354:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c358:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c35c:	d02b      	beq.n	800c3b6 <__lshift+0xbe>
 800c35e:	f1c9 0e20 	rsb	lr, r9, #32
 800c362:	468a      	mov	sl, r1
 800c364:	2200      	movs	r2, #0
 800c366:	6818      	ldr	r0, [r3, #0]
 800c368:	fa00 f009 	lsl.w	r0, r0, r9
 800c36c:	4310      	orrs	r0, r2
 800c36e:	f84a 0b04 	str.w	r0, [sl], #4
 800c372:	f853 2b04 	ldr.w	r2, [r3], #4
 800c376:	459c      	cmp	ip, r3
 800c378:	fa22 f20e 	lsr.w	r2, r2, lr
 800c37c:	d8f3      	bhi.n	800c366 <__lshift+0x6e>
 800c37e:	ebac 0304 	sub.w	r3, ip, r4
 800c382:	3b15      	subs	r3, #21
 800c384:	f023 0303 	bic.w	r3, r3, #3
 800c388:	3304      	adds	r3, #4
 800c38a:	f104 0015 	add.w	r0, r4, #21
 800c38e:	4584      	cmp	ip, r0
 800c390:	bf38      	it	cc
 800c392:	2304      	movcc	r3, #4
 800c394:	50ca      	str	r2, [r1, r3]
 800c396:	b10a      	cbz	r2, 800c39c <__lshift+0xa4>
 800c398:	f108 0602 	add.w	r6, r8, #2
 800c39c:	3e01      	subs	r6, #1
 800c39e:	4638      	mov	r0, r7
 800c3a0:	612e      	str	r6, [r5, #16]
 800c3a2:	4621      	mov	r1, r4
 800c3a4:	f7ff fd90 	bl	800bec8 <_Bfree>
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	e7c5      	b.n	800c342 <__lshift+0x4a>
 800c3b6:	3904      	subs	r1, #4
 800c3b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3c0:	459c      	cmp	ip, r3
 800c3c2:	d8f9      	bhi.n	800c3b8 <__lshift+0xc0>
 800c3c4:	e7ea      	b.n	800c39c <__lshift+0xa4>
 800c3c6:	bf00      	nop
 800c3c8:	0800e873 	.word	0x0800e873
 800c3cc:	0800e884 	.word	0x0800e884

0800c3d0 <__mcmp>:
 800c3d0:	690a      	ldr	r2, [r1, #16]
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	6900      	ldr	r0, [r0, #16]
 800c3d6:	1a80      	subs	r0, r0, r2
 800c3d8:	b530      	push	{r4, r5, lr}
 800c3da:	d10e      	bne.n	800c3fa <__mcmp+0x2a>
 800c3dc:	3314      	adds	r3, #20
 800c3de:	3114      	adds	r1, #20
 800c3e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c3e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c3e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c3ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c3f0:	4295      	cmp	r5, r2
 800c3f2:	d003      	beq.n	800c3fc <__mcmp+0x2c>
 800c3f4:	d205      	bcs.n	800c402 <__mcmp+0x32>
 800c3f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3fa:	bd30      	pop	{r4, r5, pc}
 800c3fc:	42a3      	cmp	r3, r4
 800c3fe:	d3f3      	bcc.n	800c3e8 <__mcmp+0x18>
 800c400:	e7fb      	b.n	800c3fa <__mcmp+0x2a>
 800c402:	2001      	movs	r0, #1
 800c404:	e7f9      	b.n	800c3fa <__mcmp+0x2a>
	...

0800c408 <__mdiff>:
 800c408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c40c:	4689      	mov	r9, r1
 800c40e:	4606      	mov	r6, r0
 800c410:	4611      	mov	r1, r2
 800c412:	4648      	mov	r0, r9
 800c414:	4614      	mov	r4, r2
 800c416:	f7ff ffdb 	bl	800c3d0 <__mcmp>
 800c41a:	1e05      	subs	r5, r0, #0
 800c41c:	d112      	bne.n	800c444 <__mdiff+0x3c>
 800c41e:	4629      	mov	r1, r5
 800c420:	4630      	mov	r0, r6
 800c422:	f7ff fd11 	bl	800be48 <_Balloc>
 800c426:	4602      	mov	r2, r0
 800c428:	b928      	cbnz	r0, 800c436 <__mdiff+0x2e>
 800c42a:	4b3f      	ldr	r3, [pc, #252]	@ (800c528 <__mdiff+0x120>)
 800c42c:	f240 2137 	movw	r1, #567	@ 0x237
 800c430:	483e      	ldr	r0, [pc, #248]	@ (800c52c <__mdiff+0x124>)
 800c432:	f7fe fd9d 	bl	800af70 <__assert_func>
 800c436:	2301      	movs	r3, #1
 800c438:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c43c:	4610      	mov	r0, r2
 800c43e:	b003      	add	sp, #12
 800c440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c444:	bfbc      	itt	lt
 800c446:	464b      	movlt	r3, r9
 800c448:	46a1      	movlt	r9, r4
 800c44a:	4630      	mov	r0, r6
 800c44c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c450:	bfba      	itte	lt
 800c452:	461c      	movlt	r4, r3
 800c454:	2501      	movlt	r5, #1
 800c456:	2500      	movge	r5, #0
 800c458:	f7ff fcf6 	bl	800be48 <_Balloc>
 800c45c:	4602      	mov	r2, r0
 800c45e:	b918      	cbnz	r0, 800c468 <__mdiff+0x60>
 800c460:	4b31      	ldr	r3, [pc, #196]	@ (800c528 <__mdiff+0x120>)
 800c462:	f240 2145 	movw	r1, #581	@ 0x245
 800c466:	e7e3      	b.n	800c430 <__mdiff+0x28>
 800c468:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c46c:	6926      	ldr	r6, [r4, #16]
 800c46e:	60c5      	str	r5, [r0, #12]
 800c470:	f109 0310 	add.w	r3, r9, #16
 800c474:	f109 0514 	add.w	r5, r9, #20
 800c478:	f104 0e14 	add.w	lr, r4, #20
 800c47c:	f100 0b14 	add.w	fp, r0, #20
 800c480:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c484:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c488:	9301      	str	r3, [sp, #4]
 800c48a:	46d9      	mov	r9, fp
 800c48c:	f04f 0c00 	mov.w	ip, #0
 800c490:	9b01      	ldr	r3, [sp, #4]
 800c492:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c496:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c49a:	9301      	str	r3, [sp, #4]
 800c49c:	fa1f f38a 	uxth.w	r3, sl
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	b283      	uxth	r3, r0
 800c4a4:	1acb      	subs	r3, r1, r3
 800c4a6:	0c00      	lsrs	r0, r0, #16
 800c4a8:	4463      	add	r3, ip
 800c4aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c4ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c4b8:	4576      	cmp	r6, lr
 800c4ba:	f849 3b04 	str.w	r3, [r9], #4
 800c4be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c4c2:	d8e5      	bhi.n	800c490 <__mdiff+0x88>
 800c4c4:	1b33      	subs	r3, r6, r4
 800c4c6:	3b15      	subs	r3, #21
 800c4c8:	f023 0303 	bic.w	r3, r3, #3
 800c4cc:	3415      	adds	r4, #21
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	42a6      	cmp	r6, r4
 800c4d2:	bf38      	it	cc
 800c4d4:	2304      	movcc	r3, #4
 800c4d6:	441d      	add	r5, r3
 800c4d8:	445b      	add	r3, fp
 800c4da:	461e      	mov	r6, r3
 800c4dc:	462c      	mov	r4, r5
 800c4de:	4544      	cmp	r4, r8
 800c4e0:	d30e      	bcc.n	800c500 <__mdiff+0xf8>
 800c4e2:	f108 0103 	add.w	r1, r8, #3
 800c4e6:	1b49      	subs	r1, r1, r5
 800c4e8:	f021 0103 	bic.w	r1, r1, #3
 800c4ec:	3d03      	subs	r5, #3
 800c4ee:	45a8      	cmp	r8, r5
 800c4f0:	bf38      	it	cc
 800c4f2:	2100      	movcc	r1, #0
 800c4f4:	440b      	add	r3, r1
 800c4f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4fa:	b191      	cbz	r1, 800c522 <__mdiff+0x11a>
 800c4fc:	6117      	str	r7, [r2, #16]
 800c4fe:	e79d      	b.n	800c43c <__mdiff+0x34>
 800c500:	f854 1b04 	ldr.w	r1, [r4], #4
 800c504:	46e6      	mov	lr, ip
 800c506:	0c08      	lsrs	r0, r1, #16
 800c508:	fa1c fc81 	uxtah	ip, ip, r1
 800c50c:	4471      	add	r1, lr
 800c50e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c512:	b289      	uxth	r1, r1
 800c514:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c518:	f846 1b04 	str.w	r1, [r6], #4
 800c51c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c520:	e7dd      	b.n	800c4de <__mdiff+0xd6>
 800c522:	3f01      	subs	r7, #1
 800c524:	e7e7      	b.n	800c4f6 <__mdiff+0xee>
 800c526:	bf00      	nop
 800c528:	0800e873 	.word	0x0800e873
 800c52c:	0800e884 	.word	0x0800e884

0800c530 <__ulp>:
 800c530:	b082      	sub	sp, #8
 800c532:	ed8d 0b00 	vstr	d0, [sp]
 800c536:	9a01      	ldr	r2, [sp, #4]
 800c538:	4b0f      	ldr	r3, [pc, #60]	@ (800c578 <__ulp+0x48>)
 800c53a:	4013      	ands	r3, r2
 800c53c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c540:	2b00      	cmp	r3, #0
 800c542:	dc08      	bgt.n	800c556 <__ulp+0x26>
 800c544:	425b      	negs	r3, r3
 800c546:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c54a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c54e:	da04      	bge.n	800c55a <__ulp+0x2a>
 800c550:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c554:	4113      	asrs	r3, r2
 800c556:	2200      	movs	r2, #0
 800c558:	e008      	b.n	800c56c <__ulp+0x3c>
 800c55a:	f1a2 0314 	sub.w	r3, r2, #20
 800c55e:	2b1e      	cmp	r3, #30
 800c560:	bfda      	itte	le
 800c562:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c566:	40da      	lsrle	r2, r3
 800c568:	2201      	movgt	r2, #1
 800c56a:	2300      	movs	r3, #0
 800c56c:	4619      	mov	r1, r3
 800c56e:	4610      	mov	r0, r2
 800c570:	ec41 0b10 	vmov	d0, r0, r1
 800c574:	b002      	add	sp, #8
 800c576:	4770      	bx	lr
 800c578:	7ff00000 	.word	0x7ff00000

0800c57c <__b2d>:
 800c57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c580:	6906      	ldr	r6, [r0, #16]
 800c582:	f100 0814 	add.w	r8, r0, #20
 800c586:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c58a:	1f37      	subs	r7, r6, #4
 800c58c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c590:	4610      	mov	r0, r2
 800c592:	f7ff fd4b 	bl	800c02c <__hi0bits>
 800c596:	f1c0 0320 	rsb	r3, r0, #32
 800c59a:	280a      	cmp	r0, #10
 800c59c:	600b      	str	r3, [r1, #0]
 800c59e:	491b      	ldr	r1, [pc, #108]	@ (800c60c <__b2d+0x90>)
 800c5a0:	dc15      	bgt.n	800c5ce <__b2d+0x52>
 800c5a2:	f1c0 0c0b 	rsb	ip, r0, #11
 800c5a6:	fa22 f30c 	lsr.w	r3, r2, ip
 800c5aa:	45b8      	cmp	r8, r7
 800c5ac:	ea43 0501 	orr.w	r5, r3, r1
 800c5b0:	bf34      	ite	cc
 800c5b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c5b6:	2300      	movcs	r3, #0
 800c5b8:	3015      	adds	r0, #21
 800c5ba:	fa02 f000 	lsl.w	r0, r2, r0
 800c5be:	fa23 f30c 	lsr.w	r3, r3, ip
 800c5c2:	4303      	orrs	r3, r0
 800c5c4:	461c      	mov	r4, r3
 800c5c6:	ec45 4b10 	vmov	d0, r4, r5
 800c5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5ce:	45b8      	cmp	r8, r7
 800c5d0:	bf3a      	itte	cc
 800c5d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c5d6:	f1a6 0708 	subcc.w	r7, r6, #8
 800c5da:	2300      	movcs	r3, #0
 800c5dc:	380b      	subs	r0, #11
 800c5de:	d012      	beq.n	800c606 <__b2d+0x8a>
 800c5e0:	f1c0 0120 	rsb	r1, r0, #32
 800c5e4:	fa23 f401 	lsr.w	r4, r3, r1
 800c5e8:	4082      	lsls	r2, r0
 800c5ea:	4322      	orrs	r2, r4
 800c5ec:	4547      	cmp	r7, r8
 800c5ee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c5f2:	bf8c      	ite	hi
 800c5f4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c5f8:	2200      	movls	r2, #0
 800c5fa:	4083      	lsls	r3, r0
 800c5fc:	40ca      	lsrs	r2, r1
 800c5fe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c602:	4313      	orrs	r3, r2
 800c604:	e7de      	b.n	800c5c4 <__b2d+0x48>
 800c606:	ea42 0501 	orr.w	r5, r2, r1
 800c60a:	e7db      	b.n	800c5c4 <__b2d+0x48>
 800c60c:	3ff00000 	.word	0x3ff00000

0800c610 <__d2b>:
 800c610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c614:	460f      	mov	r7, r1
 800c616:	2101      	movs	r1, #1
 800c618:	ec59 8b10 	vmov	r8, r9, d0
 800c61c:	4616      	mov	r6, r2
 800c61e:	f7ff fc13 	bl	800be48 <_Balloc>
 800c622:	4604      	mov	r4, r0
 800c624:	b930      	cbnz	r0, 800c634 <__d2b+0x24>
 800c626:	4602      	mov	r2, r0
 800c628:	4b23      	ldr	r3, [pc, #140]	@ (800c6b8 <__d2b+0xa8>)
 800c62a:	4824      	ldr	r0, [pc, #144]	@ (800c6bc <__d2b+0xac>)
 800c62c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c630:	f7fe fc9e 	bl	800af70 <__assert_func>
 800c634:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c638:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c63c:	b10d      	cbz	r5, 800c642 <__d2b+0x32>
 800c63e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c642:	9301      	str	r3, [sp, #4]
 800c644:	f1b8 0300 	subs.w	r3, r8, #0
 800c648:	d023      	beq.n	800c692 <__d2b+0x82>
 800c64a:	4668      	mov	r0, sp
 800c64c:	9300      	str	r3, [sp, #0]
 800c64e:	f7ff fd0c 	bl	800c06a <__lo0bits>
 800c652:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c656:	b1d0      	cbz	r0, 800c68e <__d2b+0x7e>
 800c658:	f1c0 0320 	rsb	r3, r0, #32
 800c65c:	fa02 f303 	lsl.w	r3, r2, r3
 800c660:	430b      	orrs	r3, r1
 800c662:	40c2      	lsrs	r2, r0
 800c664:	6163      	str	r3, [r4, #20]
 800c666:	9201      	str	r2, [sp, #4]
 800c668:	9b01      	ldr	r3, [sp, #4]
 800c66a:	61a3      	str	r3, [r4, #24]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	bf0c      	ite	eq
 800c670:	2201      	moveq	r2, #1
 800c672:	2202      	movne	r2, #2
 800c674:	6122      	str	r2, [r4, #16]
 800c676:	b1a5      	cbz	r5, 800c6a2 <__d2b+0x92>
 800c678:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c67c:	4405      	add	r5, r0
 800c67e:	603d      	str	r5, [r7, #0]
 800c680:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c684:	6030      	str	r0, [r6, #0]
 800c686:	4620      	mov	r0, r4
 800c688:	b003      	add	sp, #12
 800c68a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c68e:	6161      	str	r1, [r4, #20]
 800c690:	e7ea      	b.n	800c668 <__d2b+0x58>
 800c692:	a801      	add	r0, sp, #4
 800c694:	f7ff fce9 	bl	800c06a <__lo0bits>
 800c698:	9b01      	ldr	r3, [sp, #4]
 800c69a:	6163      	str	r3, [r4, #20]
 800c69c:	3020      	adds	r0, #32
 800c69e:	2201      	movs	r2, #1
 800c6a0:	e7e8      	b.n	800c674 <__d2b+0x64>
 800c6a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c6aa:	6038      	str	r0, [r7, #0]
 800c6ac:	6918      	ldr	r0, [r3, #16]
 800c6ae:	f7ff fcbd 	bl	800c02c <__hi0bits>
 800c6b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6b6:	e7e5      	b.n	800c684 <__d2b+0x74>
 800c6b8:	0800e873 	.word	0x0800e873
 800c6bc:	0800e884 	.word	0x0800e884

0800c6c0 <__ratio>:
 800c6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c4:	b085      	sub	sp, #20
 800c6c6:	e9cd 1000 	strd	r1, r0, [sp]
 800c6ca:	a902      	add	r1, sp, #8
 800c6cc:	f7ff ff56 	bl	800c57c <__b2d>
 800c6d0:	9800      	ldr	r0, [sp, #0]
 800c6d2:	a903      	add	r1, sp, #12
 800c6d4:	ec55 4b10 	vmov	r4, r5, d0
 800c6d8:	f7ff ff50 	bl	800c57c <__b2d>
 800c6dc:	9b01      	ldr	r3, [sp, #4]
 800c6de:	6919      	ldr	r1, [r3, #16]
 800c6e0:	9b00      	ldr	r3, [sp, #0]
 800c6e2:	691b      	ldr	r3, [r3, #16]
 800c6e4:	1ac9      	subs	r1, r1, r3
 800c6e6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c6ea:	1a9b      	subs	r3, r3, r2
 800c6ec:	ec5b ab10 	vmov	sl, fp, d0
 800c6f0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	bfce      	itee	gt
 800c6f8:	462a      	movgt	r2, r5
 800c6fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c6fe:	465a      	movle	r2, fp
 800c700:	462f      	mov	r7, r5
 800c702:	46d9      	mov	r9, fp
 800c704:	bfcc      	ite	gt
 800c706:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c70a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c70e:	464b      	mov	r3, r9
 800c710:	4652      	mov	r2, sl
 800c712:	4620      	mov	r0, r4
 800c714:	4639      	mov	r1, r7
 800c716:	f7f4 f8a1 	bl	800085c <__aeabi_ddiv>
 800c71a:	ec41 0b10 	vmov	d0, r0, r1
 800c71e:	b005      	add	sp, #20
 800c720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c724 <__copybits>:
 800c724:	3901      	subs	r1, #1
 800c726:	b570      	push	{r4, r5, r6, lr}
 800c728:	1149      	asrs	r1, r1, #5
 800c72a:	6914      	ldr	r4, [r2, #16]
 800c72c:	3101      	adds	r1, #1
 800c72e:	f102 0314 	add.w	r3, r2, #20
 800c732:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c736:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c73a:	1f05      	subs	r5, r0, #4
 800c73c:	42a3      	cmp	r3, r4
 800c73e:	d30c      	bcc.n	800c75a <__copybits+0x36>
 800c740:	1aa3      	subs	r3, r4, r2
 800c742:	3b11      	subs	r3, #17
 800c744:	f023 0303 	bic.w	r3, r3, #3
 800c748:	3211      	adds	r2, #17
 800c74a:	42a2      	cmp	r2, r4
 800c74c:	bf88      	it	hi
 800c74e:	2300      	movhi	r3, #0
 800c750:	4418      	add	r0, r3
 800c752:	2300      	movs	r3, #0
 800c754:	4288      	cmp	r0, r1
 800c756:	d305      	bcc.n	800c764 <__copybits+0x40>
 800c758:	bd70      	pop	{r4, r5, r6, pc}
 800c75a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c75e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c762:	e7eb      	b.n	800c73c <__copybits+0x18>
 800c764:	f840 3b04 	str.w	r3, [r0], #4
 800c768:	e7f4      	b.n	800c754 <__copybits+0x30>

0800c76a <__any_on>:
 800c76a:	f100 0214 	add.w	r2, r0, #20
 800c76e:	6900      	ldr	r0, [r0, #16]
 800c770:	114b      	asrs	r3, r1, #5
 800c772:	4298      	cmp	r0, r3
 800c774:	b510      	push	{r4, lr}
 800c776:	db11      	blt.n	800c79c <__any_on+0x32>
 800c778:	dd0a      	ble.n	800c790 <__any_on+0x26>
 800c77a:	f011 011f 	ands.w	r1, r1, #31
 800c77e:	d007      	beq.n	800c790 <__any_on+0x26>
 800c780:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c784:	fa24 f001 	lsr.w	r0, r4, r1
 800c788:	fa00 f101 	lsl.w	r1, r0, r1
 800c78c:	428c      	cmp	r4, r1
 800c78e:	d10b      	bne.n	800c7a8 <__any_on+0x3e>
 800c790:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c794:	4293      	cmp	r3, r2
 800c796:	d803      	bhi.n	800c7a0 <__any_on+0x36>
 800c798:	2000      	movs	r0, #0
 800c79a:	bd10      	pop	{r4, pc}
 800c79c:	4603      	mov	r3, r0
 800c79e:	e7f7      	b.n	800c790 <__any_on+0x26>
 800c7a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7a4:	2900      	cmp	r1, #0
 800c7a6:	d0f5      	beq.n	800c794 <__any_on+0x2a>
 800c7a8:	2001      	movs	r0, #1
 800c7aa:	e7f6      	b.n	800c79a <__any_on+0x30>

0800c7ac <sulp>:
 800c7ac:	b570      	push	{r4, r5, r6, lr}
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	460d      	mov	r5, r1
 800c7b2:	ec45 4b10 	vmov	d0, r4, r5
 800c7b6:	4616      	mov	r6, r2
 800c7b8:	f7ff feba 	bl	800c530 <__ulp>
 800c7bc:	ec51 0b10 	vmov	r0, r1, d0
 800c7c0:	b17e      	cbz	r6, 800c7e2 <sulp+0x36>
 800c7c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c7c6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	dd09      	ble.n	800c7e2 <sulp+0x36>
 800c7ce:	051b      	lsls	r3, r3, #20
 800c7d0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c7d4:	2400      	movs	r4, #0
 800c7d6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c7da:	4622      	mov	r2, r4
 800c7dc:	462b      	mov	r3, r5
 800c7de:	f7f3 ff13 	bl	8000608 <__aeabi_dmul>
 800c7e2:	ec41 0b10 	vmov	d0, r0, r1
 800c7e6:	bd70      	pop	{r4, r5, r6, pc}

0800c7e8 <_strtod_l>:
 800c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ec:	b09f      	sub	sp, #124	@ 0x7c
 800c7ee:	460c      	mov	r4, r1
 800c7f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	921a      	str	r2, [sp, #104]	@ 0x68
 800c7f6:	9005      	str	r0, [sp, #20]
 800c7f8:	f04f 0a00 	mov.w	sl, #0
 800c7fc:	f04f 0b00 	mov.w	fp, #0
 800c800:	460a      	mov	r2, r1
 800c802:	9219      	str	r2, [sp, #100]	@ 0x64
 800c804:	7811      	ldrb	r1, [r2, #0]
 800c806:	292b      	cmp	r1, #43	@ 0x2b
 800c808:	d04a      	beq.n	800c8a0 <_strtod_l+0xb8>
 800c80a:	d838      	bhi.n	800c87e <_strtod_l+0x96>
 800c80c:	290d      	cmp	r1, #13
 800c80e:	d832      	bhi.n	800c876 <_strtod_l+0x8e>
 800c810:	2908      	cmp	r1, #8
 800c812:	d832      	bhi.n	800c87a <_strtod_l+0x92>
 800c814:	2900      	cmp	r1, #0
 800c816:	d03b      	beq.n	800c890 <_strtod_l+0xa8>
 800c818:	2200      	movs	r2, #0
 800c81a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c81c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c81e:	782a      	ldrb	r2, [r5, #0]
 800c820:	2a30      	cmp	r2, #48	@ 0x30
 800c822:	f040 80b3 	bne.w	800c98c <_strtod_l+0x1a4>
 800c826:	786a      	ldrb	r2, [r5, #1]
 800c828:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c82c:	2a58      	cmp	r2, #88	@ 0x58
 800c82e:	d16e      	bne.n	800c90e <_strtod_l+0x126>
 800c830:	9302      	str	r3, [sp, #8]
 800c832:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c834:	9301      	str	r3, [sp, #4]
 800c836:	ab1a      	add	r3, sp, #104	@ 0x68
 800c838:	9300      	str	r3, [sp, #0]
 800c83a:	4a8e      	ldr	r2, [pc, #568]	@ (800ca74 <_strtod_l+0x28c>)
 800c83c:	9805      	ldr	r0, [sp, #20]
 800c83e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c840:	a919      	add	r1, sp, #100	@ 0x64
 800c842:	f001 f913 	bl	800da6c <__gethex>
 800c846:	f010 060f 	ands.w	r6, r0, #15
 800c84a:	4604      	mov	r4, r0
 800c84c:	d005      	beq.n	800c85a <_strtod_l+0x72>
 800c84e:	2e06      	cmp	r6, #6
 800c850:	d128      	bne.n	800c8a4 <_strtod_l+0xbc>
 800c852:	3501      	adds	r5, #1
 800c854:	2300      	movs	r3, #0
 800c856:	9519      	str	r5, [sp, #100]	@ 0x64
 800c858:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c85a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f040 858e 	bne.w	800d37e <_strtod_l+0xb96>
 800c862:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c864:	b1cb      	cbz	r3, 800c89a <_strtod_l+0xb2>
 800c866:	4652      	mov	r2, sl
 800c868:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c86c:	ec43 2b10 	vmov	d0, r2, r3
 800c870:	b01f      	add	sp, #124	@ 0x7c
 800c872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c876:	2920      	cmp	r1, #32
 800c878:	d1ce      	bne.n	800c818 <_strtod_l+0x30>
 800c87a:	3201      	adds	r2, #1
 800c87c:	e7c1      	b.n	800c802 <_strtod_l+0x1a>
 800c87e:	292d      	cmp	r1, #45	@ 0x2d
 800c880:	d1ca      	bne.n	800c818 <_strtod_l+0x30>
 800c882:	2101      	movs	r1, #1
 800c884:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c886:	1c51      	adds	r1, r2, #1
 800c888:	9119      	str	r1, [sp, #100]	@ 0x64
 800c88a:	7852      	ldrb	r2, [r2, #1]
 800c88c:	2a00      	cmp	r2, #0
 800c88e:	d1c5      	bne.n	800c81c <_strtod_l+0x34>
 800c890:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c892:	9419      	str	r4, [sp, #100]	@ 0x64
 800c894:	2b00      	cmp	r3, #0
 800c896:	f040 8570 	bne.w	800d37a <_strtod_l+0xb92>
 800c89a:	4652      	mov	r2, sl
 800c89c:	465b      	mov	r3, fp
 800c89e:	e7e5      	b.n	800c86c <_strtod_l+0x84>
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	e7ef      	b.n	800c884 <_strtod_l+0x9c>
 800c8a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c8a6:	b13a      	cbz	r2, 800c8b8 <_strtod_l+0xd0>
 800c8a8:	2135      	movs	r1, #53	@ 0x35
 800c8aa:	a81c      	add	r0, sp, #112	@ 0x70
 800c8ac:	f7ff ff3a 	bl	800c724 <__copybits>
 800c8b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c8b2:	9805      	ldr	r0, [sp, #20]
 800c8b4:	f7ff fb08 	bl	800bec8 <_Bfree>
 800c8b8:	3e01      	subs	r6, #1
 800c8ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c8bc:	2e04      	cmp	r6, #4
 800c8be:	d806      	bhi.n	800c8ce <_strtod_l+0xe6>
 800c8c0:	e8df f006 	tbb	[pc, r6]
 800c8c4:	201d0314 	.word	0x201d0314
 800c8c8:	14          	.byte	0x14
 800c8c9:	00          	.byte	0x00
 800c8ca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c8ce:	05e1      	lsls	r1, r4, #23
 800c8d0:	bf48      	it	mi
 800c8d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c8d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c8da:	0d1b      	lsrs	r3, r3, #20
 800c8dc:	051b      	lsls	r3, r3, #20
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1bb      	bne.n	800c85a <_strtod_l+0x72>
 800c8e2:	f7fe fb03 	bl	800aeec <__errno>
 800c8e6:	2322      	movs	r3, #34	@ 0x22
 800c8e8:	6003      	str	r3, [r0, #0]
 800c8ea:	e7b6      	b.n	800c85a <_strtod_l+0x72>
 800c8ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c8f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c8f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c8f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c8fc:	e7e7      	b.n	800c8ce <_strtod_l+0xe6>
 800c8fe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ca7c <_strtod_l+0x294>
 800c902:	e7e4      	b.n	800c8ce <_strtod_l+0xe6>
 800c904:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c908:	f04f 3aff 	mov.w	sl, #4294967295
 800c90c:	e7df      	b.n	800c8ce <_strtod_l+0xe6>
 800c90e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c910:	1c5a      	adds	r2, r3, #1
 800c912:	9219      	str	r2, [sp, #100]	@ 0x64
 800c914:	785b      	ldrb	r3, [r3, #1]
 800c916:	2b30      	cmp	r3, #48	@ 0x30
 800c918:	d0f9      	beq.n	800c90e <_strtod_l+0x126>
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d09d      	beq.n	800c85a <_strtod_l+0x72>
 800c91e:	2301      	movs	r3, #1
 800c920:	9309      	str	r3, [sp, #36]	@ 0x24
 800c922:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c924:	930c      	str	r3, [sp, #48]	@ 0x30
 800c926:	2300      	movs	r3, #0
 800c928:	9308      	str	r3, [sp, #32]
 800c92a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c92c:	461f      	mov	r7, r3
 800c92e:	220a      	movs	r2, #10
 800c930:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c932:	7805      	ldrb	r5, [r0, #0]
 800c934:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c938:	b2d9      	uxtb	r1, r3
 800c93a:	2909      	cmp	r1, #9
 800c93c:	d928      	bls.n	800c990 <_strtod_l+0x1a8>
 800c93e:	494e      	ldr	r1, [pc, #312]	@ (800ca78 <_strtod_l+0x290>)
 800c940:	2201      	movs	r2, #1
 800c942:	f000 ffe7 	bl	800d914 <strncmp>
 800c946:	2800      	cmp	r0, #0
 800c948:	d032      	beq.n	800c9b0 <_strtod_l+0x1c8>
 800c94a:	2000      	movs	r0, #0
 800c94c:	462a      	mov	r2, r5
 800c94e:	4681      	mov	r9, r0
 800c950:	463d      	mov	r5, r7
 800c952:	4603      	mov	r3, r0
 800c954:	2a65      	cmp	r2, #101	@ 0x65
 800c956:	d001      	beq.n	800c95c <_strtod_l+0x174>
 800c958:	2a45      	cmp	r2, #69	@ 0x45
 800c95a:	d114      	bne.n	800c986 <_strtod_l+0x19e>
 800c95c:	b91d      	cbnz	r5, 800c966 <_strtod_l+0x17e>
 800c95e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c960:	4302      	orrs	r2, r0
 800c962:	d095      	beq.n	800c890 <_strtod_l+0xa8>
 800c964:	2500      	movs	r5, #0
 800c966:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c968:	1c62      	adds	r2, r4, #1
 800c96a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c96c:	7862      	ldrb	r2, [r4, #1]
 800c96e:	2a2b      	cmp	r2, #43	@ 0x2b
 800c970:	d077      	beq.n	800ca62 <_strtod_l+0x27a>
 800c972:	2a2d      	cmp	r2, #45	@ 0x2d
 800c974:	d07b      	beq.n	800ca6e <_strtod_l+0x286>
 800c976:	f04f 0c00 	mov.w	ip, #0
 800c97a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c97e:	2909      	cmp	r1, #9
 800c980:	f240 8082 	bls.w	800ca88 <_strtod_l+0x2a0>
 800c984:	9419      	str	r4, [sp, #100]	@ 0x64
 800c986:	f04f 0800 	mov.w	r8, #0
 800c98a:	e0a2      	b.n	800cad2 <_strtod_l+0x2ea>
 800c98c:	2300      	movs	r3, #0
 800c98e:	e7c7      	b.n	800c920 <_strtod_l+0x138>
 800c990:	2f08      	cmp	r7, #8
 800c992:	bfd5      	itete	le
 800c994:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c996:	9908      	ldrgt	r1, [sp, #32]
 800c998:	fb02 3301 	mlale	r3, r2, r1, r3
 800c99c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c9a0:	f100 0001 	add.w	r0, r0, #1
 800c9a4:	bfd4      	ite	le
 800c9a6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c9a8:	9308      	strgt	r3, [sp, #32]
 800c9aa:	3701      	adds	r7, #1
 800c9ac:	9019      	str	r0, [sp, #100]	@ 0x64
 800c9ae:	e7bf      	b.n	800c930 <_strtod_l+0x148>
 800c9b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9b2:	1c5a      	adds	r2, r3, #1
 800c9b4:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9b6:	785a      	ldrb	r2, [r3, #1]
 800c9b8:	b37f      	cbz	r7, 800ca1a <_strtod_l+0x232>
 800c9ba:	4681      	mov	r9, r0
 800c9bc:	463d      	mov	r5, r7
 800c9be:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c9c2:	2b09      	cmp	r3, #9
 800c9c4:	d912      	bls.n	800c9ec <_strtod_l+0x204>
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	e7c4      	b.n	800c954 <_strtod_l+0x16c>
 800c9ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9cc:	1c5a      	adds	r2, r3, #1
 800c9ce:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9d0:	785a      	ldrb	r2, [r3, #1]
 800c9d2:	3001      	adds	r0, #1
 800c9d4:	2a30      	cmp	r2, #48	@ 0x30
 800c9d6:	d0f8      	beq.n	800c9ca <_strtod_l+0x1e2>
 800c9d8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c9dc:	2b08      	cmp	r3, #8
 800c9de:	f200 84d3 	bhi.w	800d388 <_strtod_l+0xba0>
 800c9e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c9e6:	4681      	mov	r9, r0
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	4605      	mov	r5, r0
 800c9ec:	3a30      	subs	r2, #48	@ 0x30
 800c9ee:	f100 0301 	add.w	r3, r0, #1
 800c9f2:	d02a      	beq.n	800ca4a <_strtod_l+0x262>
 800c9f4:	4499      	add	r9, r3
 800c9f6:	eb00 0c05 	add.w	ip, r0, r5
 800c9fa:	462b      	mov	r3, r5
 800c9fc:	210a      	movs	r1, #10
 800c9fe:	4563      	cmp	r3, ip
 800ca00:	d10d      	bne.n	800ca1e <_strtod_l+0x236>
 800ca02:	1c69      	adds	r1, r5, #1
 800ca04:	4401      	add	r1, r0
 800ca06:	4428      	add	r0, r5
 800ca08:	2808      	cmp	r0, #8
 800ca0a:	dc16      	bgt.n	800ca3a <_strtod_l+0x252>
 800ca0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ca0e:	230a      	movs	r3, #10
 800ca10:	fb03 2300 	mla	r3, r3, r0, r2
 800ca14:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca16:	2300      	movs	r3, #0
 800ca18:	e018      	b.n	800ca4c <_strtod_l+0x264>
 800ca1a:	4638      	mov	r0, r7
 800ca1c:	e7da      	b.n	800c9d4 <_strtod_l+0x1ec>
 800ca1e:	2b08      	cmp	r3, #8
 800ca20:	f103 0301 	add.w	r3, r3, #1
 800ca24:	dc03      	bgt.n	800ca2e <_strtod_l+0x246>
 800ca26:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ca28:	434e      	muls	r6, r1
 800ca2a:	960a      	str	r6, [sp, #40]	@ 0x28
 800ca2c:	e7e7      	b.n	800c9fe <_strtod_l+0x216>
 800ca2e:	2b10      	cmp	r3, #16
 800ca30:	bfde      	ittt	le
 800ca32:	9e08      	ldrle	r6, [sp, #32]
 800ca34:	434e      	mulle	r6, r1
 800ca36:	9608      	strle	r6, [sp, #32]
 800ca38:	e7e1      	b.n	800c9fe <_strtod_l+0x216>
 800ca3a:	280f      	cmp	r0, #15
 800ca3c:	dceb      	bgt.n	800ca16 <_strtod_l+0x22e>
 800ca3e:	9808      	ldr	r0, [sp, #32]
 800ca40:	230a      	movs	r3, #10
 800ca42:	fb03 2300 	mla	r3, r3, r0, r2
 800ca46:	9308      	str	r3, [sp, #32]
 800ca48:	e7e5      	b.n	800ca16 <_strtod_l+0x22e>
 800ca4a:	4629      	mov	r1, r5
 800ca4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca4e:	1c50      	adds	r0, r2, #1
 800ca50:	9019      	str	r0, [sp, #100]	@ 0x64
 800ca52:	7852      	ldrb	r2, [r2, #1]
 800ca54:	4618      	mov	r0, r3
 800ca56:	460d      	mov	r5, r1
 800ca58:	e7b1      	b.n	800c9be <_strtod_l+0x1d6>
 800ca5a:	f04f 0900 	mov.w	r9, #0
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e77d      	b.n	800c95e <_strtod_l+0x176>
 800ca62:	f04f 0c00 	mov.w	ip, #0
 800ca66:	1ca2      	adds	r2, r4, #2
 800ca68:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca6a:	78a2      	ldrb	r2, [r4, #2]
 800ca6c:	e785      	b.n	800c97a <_strtod_l+0x192>
 800ca6e:	f04f 0c01 	mov.w	ip, #1
 800ca72:	e7f8      	b.n	800ca66 <_strtod_l+0x27e>
 800ca74:	0800e9f8 	.word	0x0800e9f8
 800ca78:	0800e9e0 	.word	0x0800e9e0
 800ca7c:	7ff00000 	.word	0x7ff00000
 800ca80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca82:	1c51      	adds	r1, r2, #1
 800ca84:	9119      	str	r1, [sp, #100]	@ 0x64
 800ca86:	7852      	ldrb	r2, [r2, #1]
 800ca88:	2a30      	cmp	r2, #48	@ 0x30
 800ca8a:	d0f9      	beq.n	800ca80 <_strtod_l+0x298>
 800ca8c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ca90:	2908      	cmp	r1, #8
 800ca92:	f63f af78 	bhi.w	800c986 <_strtod_l+0x19e>
 800ca96:	3a30      	subs	r2, #48	@ 0x30
 800ca98:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca9c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ca9e:	f04f 080a 	mov.w	r8, #10
 800caa2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800caa4:	1c56      	adds	r6, r2, #1
 800caa6:	9619      	str	r6, [sp, #100]	@ 0x64
 800caa8:	7852      	ldrb	r2, [r2, #1]
 800caaa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800caae:	f1be 0f09 	cmp.w	lr, #9
 800cab2:	d939      	bls.n	800cb28 <_strtod_l+0x340>
 800cab4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cab6:	1a76      	subs	r6, r6, r1
 800cab8:	2e08      	cmp	r6, #8
 800caba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cabe:	dc03      	bgt.n	800cac8 <_strtod_l+0x2e0>
 800cac0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cac2:	4588      	cmp	r8, r1
 800cac4:	bfa8      	it	ge
 800cac6:	4688      	movge	r8, r1
 800cac8:	f1bc 0f00 	cmp.w	ip, #0
 800cacc:	d001      	beq.n	800cad2 <_strtod_l+0x2ea>
 800cace:	f1c8 0800 	rsb	r8, r8, #0
 800cad2:	2d00      	cmp	r5, #0
 800cad4:	d14e      	bne.n	800cb74 <_strtod_l+0x38c>
 800cad6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cad8:	4308      	orrs	r0, r1
 800cada:	f47f aebe 	bne.w	800c85a <_strtod_l+0x72>
 800cade:	2b00      	cmp	r3, #0
 800cae0:	f47f aed6 	bne.w	800c890 <_strtod_l+0xa8>
 800cae4:	2a69      	cmp	r2, #105	@ 0x69
 800cae6:	d028      	beq.n	800cb3a <_strtod_l+0x352>
 800cae8:	dc25      	bgt.n	800cb36 <_strtod_l+0x34e>
 800caea:	2a49      	cmp	r2, #73	@ 0x49
 800caec:	d025      	beq.n	800cb3a <_strtod_l+0x352>
 800caee:	2a4e      	cmp	r2, #78	@ 0x4e
 800caf0:	f47f aece 	bne.w	800c890 <_strtod_l+0xa8>
 800caf4:	499b      	ldr	r1, [pc, #620]	@ (800cd64 <_strtod_l+0x57c>)
 800caf6:	a819      	add	r0, sp, #100	@ 0x64
 800caf8:	f001 f9da 	bl	800deb0 <__match>
 800cafc:	2800      	cmp	r0, #0
 800cafe:	f43f aec7 	beq.w	800c890 <_strtod_l+0xa8>
 800cb02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	2b28      	cmp	r3, #40	@ 0x28
 800cb08:	d12e      	bne.n	800cb68 <_strtod_l+0x380>
 800cb0a:	4997      	ldr	r1, [pc, #604]	@ (800cd68 <_strtod_l+0x580>)
 800cb0c:	aa1c      	add	r2, sp, #112	@ 0x70
 800cb0e:	a819      	add	r0, sp, #100	@ 0x64
 800cb10:	f001 f9e2 	bl	800ded8 <__hexnan>
 800cb14:	2805      	cmp	r0, #5
 800cb16:	d127      	bne.n	800cb68 <_strtod_l+0x380>
 800cb18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb1a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cb1e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cb22:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cb26:	e698      	b.n	800c85a <_strtod_l+0x72>
 800cb28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cb2a:	fb08 2101 	mla	r1, r8, r1, r2
 800cb2e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cb32:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb34:	e7b5      	b.n	800caa2 <_strtod_l+0x2ba>
 800cb36:	2a6e      	cmp	r2, #110	@ 0x6e
 800cb38:	e7da      	b.n	800caf0 <_strtod_l+0x308>
 800cb3a:	498c      	ldr	r1, [pc, #560]	@ (800cd6c <_strtod_l+0x584>)
 800cb3c:	a819      	add	r0, sp, #100	@ 0x64
 800cb3e:	f001 f9b7 	bl	800deb0 <__match>
 800cb42:	2800      	cmp	r0, #0
 800cb44:	f43f aea4 	beq.w	800c890 <_strtod_l+0xa8>
 800cb48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb4a:	4989      	ldr	r1, [pc, #548]	@ (800cd70 <_strtod_l+0x588>)
 800cb4c:	3b01      	subs	r3, #1
 800cb4e:	a819      	add	r0, sp, #100	@ 0x64
 800cb50:	9319      	str	r3, [sp, #100]	@ 0x64
 800cb52:	f001 f9ad 	bl	800deb0 <__match>
 800cb56:	b910      	cbnz	r0, 800cb5e <_strtod_l+0x376>
 800cb58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	9319      	str	r3, [sp, #100]	@ 0x64
 800cb5e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cd80 <_strtod_l+0x598>
 800cb62:	f04f 0a00 	mov.w	sl, #0
 800cb66:	e678      	b.n	800c85a <_strtod_l+0x72>
 800cb68:	4882      	ldr	r0, [pc, #520]	@ (800cd74 <_strtod_l+0x58c>)
 800cb6a:	f000 fef5 	bl	800d958 <nan>
 800cb6e:	ec5b ab10 	vmov	sl, fp, d0
 800cb72:	e672      	b.n	800c85a <_strtod_l+0x72>
 800cb74:	eba8 0309 	sub.w	r3, r8, r9
 800cb78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cb7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb7c:	2f00      	cmp	r7, #0
 800cb7e:	bf08      	it	eq
 800cb80:	462f      	moveq	r7, r5
 800cb82:	2d10      	cmp	r5, #16
 800cb84:	462c      	mov	r4, r5
 800cb86:	bfa8      	it	ge
 800cb88:	2410      	movge	r4, #16
 800cb8a:	f7f3 fcc3 	bl	8000514 <__aeabi_ui2d>
 800cb8e:	2d09      	cmp	r5, #9
 800cb90:	4682      	mov	sl, r0
 800cb92:	468b      	mov	fp, r1
 800cb94:	dc13      	bgt.n	800cbbe <_strtod_l+0x3d6>
 800cb96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f43f ae5e 	beq.w	800c85a <_strtod_l+0x72>
 800cb9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cba0:	dd78      	ble.n	800cc94 <_strtod_l+0x4ac>
 800cba2:	2b16      	cmp	r3, #22
 800cba4:	dc5f      	bgt.n	800cc66 <_strtod_l+0x47e>
 800cba6:	4974      	ldr	r1, [pc, #464]	@ (800cd78 <_strtod_l+0x590>)
 800cba8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cbac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbb0:	4652      	mov	r2, sl
 800cbb2:	465b      	mov	r3, fp
 800cbb4:	f7f3 fd28 	bl	8000608 <__aeabi_dmul>
 800cbb8:	4682      	mov	sl, r0
 800cbba:	468b      	mov	fp, r1
 800cbbc:	e64d      	b.n	800c85a <_strtod_l+0x72>
 800cbbe:	4b6e      	ldr	r3, [pc, #440]	@ (800cd78 <_strtod_l+0x590>)
 800cbc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cbc4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cbc8:	f7f3 fd1e 	bl	8000608 <__aeabi_dmul>
 800cbcc:	4682      	mov	sl, r0
 800cbce:	9808      	ldr	r0, [sp, #32]
 800cbd0:	468b      	mov	fp, r1
 800cbd2:	f7f3 fc9f 	bl	8000514 <__aeabi_ui2d>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	460b      	mov	r3, r1
 800cbda:	4650      	mov	r0, sl
 800cbdc:	4659      	mov	r1, fp
 800cbde:	f7f3 fb5d 	bl	800029c <__adddf3>
 800cbe2:	2d0f      	cmp	r5, #15
 800cbe4:	4682      	mov	sl, r0
 800cbe6:	468b      	mov	fp, r1
 800cbe8:	ddd5      	ble.n	800cb96 <_strtod_l+0x3ae>
 800cbea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbec:	1b2c      	subs	r4, r5, r4
 800cbee:	441c      	add	r4, r3
 800cbf0:	2c00      	cmp	r4, #0
 800cbf2:	f340 8096 	ble.w	800cd22 <_strtod_l+0x53a>
 800cbf6:	f014 030f 	ands.w	r3, r4, #15
 800cbfa:	d00a      	beq.n	800cc12 <_strtod_l+0x42a>
 800cbfc:	495e      	ldr	r1, [pc, #376]	@ (800cd78 <_strtod_l+0x590>)
 800cbfe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cc02:	4652      	mov	r2, sl
 800cc04:	465b      	mov	r3, fp
 800cc06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc0a:	f7f3 fcfd 	bl	8000608 <__aeabi_dmul>
 800cc0e:	4682      	mov	sl, r0
 800cc10:	468b      	mov	fp, r1
 800cc12:	f034 040f 	bics.w	r4, r4, #15
 800cc16:	d073      	beq.n	800cd00 <_strtod_l+0x518>
 800cc18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cc1c:	dd48      	ble.n	800ccb0 <_strtod_l+0x4c8>
 800cc1e:	2400      	movs	r4, #0
 800cc20:	46a0      	mov	r8, r4
 800cc22:	940a      	str	r4, [sp, #40]	@ 0x28
 800cc24:	46a1      	mov	r9, r4
 800cc26:	9a05      	ldr	r2, [sp, #20]
 800cc28:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cd80 <_strtod_l+0x598>
 800cc2c:	2322      	movs	r3, #34	@ 0x22
 800cc2e:	6013      	str	r3, [r2, #0]
 800cc30:	f04f 0a00 	mov.w	sl, #0
 800cc34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	f43f ae0f 	beq.w	800c85a <_strtod_l+0x72>
 800cc3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc3e:	9805      	ldr	r0, [sp, #20]
 800cc40:	f7ff f942 	bl	800bec8 <_Bfree>
 800cc44:	9805      	ldr	r0, [sp, #20]
 800cc46:	4649      	mov	r1, r9
 800cc48:	f7ff f93e 	bl	800bec8 <_Bfree>
 800cc4c:	9805      	ldr	r0, [sp, #20]
 800cc4e:	4641      	mov	r1, r8
 800cc50:	f7ff f93a 	bl	800bec8 <_Bfree>
 800cc54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc56:	9805      	ldr	r0, [sp, #20]
 800cc58:	f7ff f936 	bl	800bec8 <_Bfree>
 800cc5c:	9805      	ldr	r0, [sp, #20]
 800cc5e:	4621      	mov	r1, r4
 800cc60:	f7ff f932 	bl	800bec8 <_Bfree>
 800cc64:	e5f9      	b.n	800c85a <_strtod_l+0x72>
 800cc66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	dbbc      	blt.n	800cbea <_strtod_l+0x402>
 800cc70:	4c41      	ldr	r4, [pc, #260]	@ (800cd78 <_strtod_l+0x590>)
 800cc72:	f1c5 050f 	rsb	r5, r5, #15
 800cc76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cc7a:	4652      	mov	r2, sl
 800cc7c:	465b      	mov	r3, fp
 800cc7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc82:	f7f3 fcc1 	bl	8000608 <__aeabi_dmul>
 800cc86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc88:	1b5d      	subs	r5, r3, r5
 800cc8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cc8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cc92:	e78f      	b.n	800cbb4 <_strtod_l+0x3cc>
 800cc94:	3316      	adds	r3, #22
 800cc96:	dba8      	blt.n	800cbea <_strtod_l+0x402>
 800cc98:	4b37      	ldr	r3, [pc, #220]	@ (800cd78 <_strtod_l+0x590>)
 800cc9a:	eba9 0808 	sub.w	r8, r9, r8
 800cc9e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cca2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cca6:	4650      	mov	r0, sl
 800cca8:	4659      	mov	r1, fp
 800ccaa:	f7f3 fdd7 	bl	800085c <__aeabi_ddiv>
 800ccae:	e783      	b.n	800cbb8 <_strtod_l+0x3d0>
 800ccb0:	4b32      	ldr	r3, [pc, #200]	@ (800cd7c <_strtod_l+0x594>)
 800ccb2:	9308      	str	r3, [sp, #32]
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	1124      	asrs	r4, r4, #4
 800ccb8:	4650      	mov	r0, sl
 800ccba:	4659      	mov	r1, fp
 800ccbc:	461e      	mov	r6, r3
 800ccbe:	2c01      	cmp	r4, #1
 800ccc0:	dc21      	bgt.n	800cd06 <_strtod_l+0x51e>
 800ccc2:	b10b      	cbz	r3, 800ccc8 <_strtod_l+0x4e0>
 800ccc4:	4682      	mov	sl, r0
 800ccc6:	468b      	mov	fp, r1
 800ccc8:	492c      	ldr	r1, [pc, #176]	@ (800cd7c <_strtod_l+0x594>)
 800ccca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ccce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ccd2:	4652      	mov	r2, sl
 800ccd4:	465b      	mov	r3, fp
 800ccd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccda:	f7f3 fc95 	bl	8000608 <__aeabi_dmul>
 800ccde:	4b28      	ldr	r3, [pc, #160]	@ (800cd80 <_strtod_l+0x598>)
 800cce0:	460a      	mov	r2, r1
 800cce2:	400b      	ands	r3, r1
 800cce4:	4927      	ldr	r1, [pc, #156]	@ (800cd84 <_strtod_l+0x59c>)
 800cce6:	428b      	cmp	r3, r1
 800cce8:	4682      	mov	sl, r0
 800ccea:	d898      	bhi.n	800cc1e <_strtod_l+0x436>
 800ccec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ccf0:	428b      	cmp	r3, r1
 800ccf2:	bf86      	itte	hi
 800ccf4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cd88 <_strtod_l+0x5a0>
 800ccf8:	f04f 3aff 	movhi.w	sl, #4294967295
 800ccfc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cd00:	2300      	movs	r3, #0
 800cd02:	9308      	str	r3, [sp, #32]
 800cd04:	e07a      	b.n	800cdfc <_strtod_l+0x614>
 800cd06:	07e2      	lsls	r2, r4, #31
 800cd08:	d505      	bpl.n	800cd16 <_strtod_l+0x52e>
 800cd0a:	9b08      	ldr	r3, [sp, #32]
 800cd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd10:	f7f3 fc7a 	bl	8000608 <__aeabi_dmul>
 800cd14:	2301      	movs	r3, #1
 800cd16:	9a08      	ldr	r2, [sp, #32]
 800cd18:	3208      	adds	r2, #8
 800cd1a:	3601      	adds	r6, #1
 800cd1c:	1064      	asrs	r4, r4, #1
 800cd1e:	9208      	str	r2, [sp, #32]
 800cd20:	e7cd      	b.n	800ccbe <_strtod_l+0x4d6>
 800cd22:	d0ed      	beq.n	800cd00 <_strtod_l+0x518>
 800cd24:	4264      	negs	r4, r4
 800cd26:	f014 020f 	ands.w	r2, r4, #15
 800cd2a:	d00a      	beq.n	800cd42 <_strtod_l+0x55a>
 800cd2c:	4b12      	ldr	r3, [pc, #72]	@ (800cd78 <_strtod_l+0x590>)
 800cd2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd32:	4650      	mov	r0, sl
 800cd34:	4659      	mov	r1, fp
 800cd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3a:	f7f3 fd8f 	bl	800085c <__aeabi_ddiv>
 800cd3e:	4682      	mov	sl, r0
 800cd40:	468b      	mov	fp, r1
 800cd42:	1124      	asrs	r4, r4, #4
 800cd44:	d0dc      	beq.n	800cd00 <_strtod_l+0x518>
 800cd46:	2c1f      	cmp	r4, #31
 800cd48:	dd20      	ble.n	800cd8c <_strtod_l+0x5a4>
 800cd4a:	2400      	movs	r4, #0
 800cd4c:	46a0      	mov	r8, r4
 800cd4e:	940a      	str	r4, [sp, #40]	@ 0x28
 800cd50:	46a1      	mov	r9, r4
 800cd52:	9a05      	ldr	r2, [sp, #20]
 800cd54:	2322      	movs	r3, #34	@ 0x22
 800cd56:	f04f 0a00 	mov.w	sl, #0
 800cd5a:	f04f 0b00 	mov.w	fp, #0
 800cd5e:	6013      	str	r3, [r2, #0]
 800cd60:	e768      	b.n	800cc34 <_strtod_l+0x44c>
 800cd62:	bf00      	nop
 800cd64:	0800e735 	.word	0x0800e735
 800cd68:	0800e9e4 	.word	0x0800e9e4
 800cd6c:	0800e72d 	.word	0x0800e72d
 800cd70:	0800e811 	.word	0x0800e811
 800cd74:	0800e80d 	.word	0x0800e80d
 800cd78:	0800e918 	.word	0x0800e918
 800cd7c:	0800e8f0 	.word	0x0800e8f0
 800cd80:	7ff00000 	.word	0x7ff00000
 800cd84:	7ca00000 	.word	0x7ca00000
 800cd88:	7fefffff 	.word	0x7fefffff
 800cd8c:	f014 0310 	ands.w	r3, r4, #16
 800cd90:	bf18      	it	ne
 800cd92:	236a      	movne	r3, #106	@ 0x6a
 800cd94:	4ea9      	ldr	r6, [pc, #676]	@ (800d03c <_strtod_l+0x854>)
 800cd96:	9308      	str	r3, [sp, #32]
 800cd98:	4650      	mov	r0, sl
 800cd9a:	4659      	mov	r1, fp
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	07e2      	lsls	r2, r4, #31
 800cda0:	d504      	bpl.n	800cdac <_strtod_l+0x5c4>
 800cda2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cda6:	f7f3 fc2f 	bl	8000608 <__aeabi_dmul>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	1064      	asrs	r4, r4, #1
 800cdae:	f106 0608 	add.w	r6, r6, #8
 800cdb2:	d1f4      	bne.n	800cd9e <_strtod_l+0x5b6>
 800cdb4:	b10b      	cbz	r3, 800cdba <_strtod_l+0x5d2>
 800cdb6:	4682      	mov	sl, r0
 800cdb8:	468b      	mov	fp, r1
 800cdba:	9b08      	ldr	r3, [sp, #32]
 800cdbc:	b1b3      	cbz	r3, 800cdec <_strtod_l+0x604>
 800cdbe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cdc2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	4659      	mov	r1, fp
 800cdca:	dd0f      	ble.n	800cdec <_strtod_l+0x604>
 800cdcc:	2b1f      	cmp	r3, #31
 800cdce:	dd55      	ble.n	800ce7c <_strtod_l+0x694>
 800cdd0:	2b34      	cmp	r3, #52	@ 0x34
 800cdd2:	bfde      	ittt	le
 800cdd4:	f04f 33ff 	movle.w	r3, #4294967295
 800cdd8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cddc:	4093      	lslle	r3, r2
 800cdde:	f04f 0a00 	mov.w	sl, #0
 800cde2:	bfcc      	ite	gt
 800cde4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cde8:	ea03 0b01 	andle.w	fp, r3, r1
 800cdec:	2200      	movs	r2, #0
 800cdee:	2300      	movs	r3, #0
 800cdf0:	4650      	mov	r0, sl
 800cdf2:	4659      	mov	r1, fp
 800cdf4:	f7f3 fe70 	bl	8000ad8 <__aeabi_dcmpeq>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d1a6      	bne.n	800cd4a <_strtod_l+0x562>
 800cdfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdfe:	9300      	str	r3, [sp, #0]
 800ce00:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ce02:	9805      	ldr	r0, [sp, #20]
 800ce04:	462b      	mov	r3, r5
 800ce06:	463a      	mov	r2, r7
 800ce08:	f7ff f8c6 	bl	800bf98 <__s2b>
 800ce0c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	f43f af05 	beq.w	800cc1e <_strtod_l+0x436>
 800ce14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce16:	2a00      	cmp	r2, #0
 800ce18:	eba9 0308 	sub.w	r3, r9, r8
 800ce1c:	bfa8      	it	ge
 800ce1e:	2300      	movge	r3, #0
 800ce20:	9312      	str	r3, [sp, #72]	@ 0x48
 800ce22:	2400      	movs	r4, #0
 800ce24:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ce28:	9316      	str	r3, [sp, #88]	@ 0x58
 800ce2a:	46a0      	mov	r8, r4
 800ce2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce2e:	9805      	ldr	r0, [sp, #20]
 800ce30:	6859      	ldr	r1, [r3, #4]
 800ce32:	f7ff f809 	bl	800be48 <_Balloc>
 800ce36:	4681      	mov	r9, r0
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	f43f aef4 	beq.w	800cc26 <_strtod_l+0x43e>
 800ce3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce40:	691a      	ldr	r2, [r3, #16]
 800ce42:	3202      	adds	r2, #2
 800ce44:	f103 010c 	add.w	r1, r3, #12
 800ce48:	0092      	lsls	r2, r2, #2
 800ce4a:	300c      	adds	r0, #12
 800ce4c:	f7fe f87b 	bl	800af46 <memcpy>
 800ce50:	ec4b ab10 	vmov	d0, sl, fp
 800ce54:	9805      	ldr	r0, [sp, #20]
 800ce56:	aa1c      	add	r2, sp, #112	@ 0x70
 800ce58:	a91b      	add	r1, sp, #108	@ 0x6c
 800ce5a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ce5e:	f7ff fbd7 	bl	800c610 <__d2b>
 800ce62:	901a      	str	r0, [sp, #104]	@ 0x68
 800ce64:	2800      	cmp	r0, #0
 800ce66:	f43f aede 	beq.w	800cc26 <_strtod_l+0x43e>
 800ce6a:	9805      	ldr	r0, [sp, #20]
 800ce6c:	2101      	movs	r1, #1
 800ce6e:	f7ff f929 	bl	800c0c4 <__i2b>
 800ce72:	4680      	mov	r8, r0
 800ce74:	b948      	cbnz	r0, 800ce8a <_strtod_l+0x6a2>
 800ce76:	f04f 0800 	mov.w	r8, #0
 800ce7a:	e6d4      	b.n	800cc26 <_strtod_l+0x43e>
 800ce7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce80:	fa02 f303 	lsl.w	r3, r2, r3
 800ce84:	ea03 0a0a 	and.w	sl, r3, sl
 800ce88:	e7b0      	b.n	800cdec <_strtod_l+0x604>
 800ce8a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ce8c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ce8e:	2d00      	cmp	r5, #0
 800ce90:	bfab      	itete	ge
 800ce92:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ce94:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ce96:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ce98:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ce9a:	bfac      	ite	ge
 800ce9c:	18ef      	addge	r7, r5, r3
 800ce9e:	1b5e      	sublt	r6, r3, r5
 800cea0:	9b08      	ldr	r3, [sp, #32]
 800cea2:	1aed      	subs	r5, r5, r3
 800cea4:	4415      	add	r5, r2
 800cea6:	4b66      	ldr	r3, [pc, #408]	@ (800d040 <_strtod_l+0x858>)
 800cea8:	3d01      	subs	r5, #1
 800ceaa:	429d      	cmp	r5, r3
 800ceac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ceb0:	da50      	bge.n	800cf54 <_strtod_l+0x76c>
 800ceb2:	1b5b      	subs	r3, r3, r5
 800ceb4:	2b1f      	cmp	r3, #31
 800ceb6:	eba2 0203 	sub.w	r2, r2, r3
 800ceba:	f04f 0101 	mov.w	r1, #1
 800cebe:	dc3d      	bgt.n	800cf3c <_strtod_l+0x754>
 800cec0:	fa01 f303 	lsl.w	r3, r1, r3
 800cec4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cec6:	2300      	movs	r3, #0
 800cec8:	9310      	str	r3, [sp, #64]	@ 0x40
 800ceca:	18bd      	adds	r5, r7, r2
 800cecc:	9b08      	ldr	r3, [sp, #32]
 800cece:	42af      	cmp	r7, r5
 800ced0:	4416      	add	r6, r2
 800ced2:	441e      	add	r6, r3
 800ced4:	463b      	mov	r3, r7
 800ced6:	bfa8      	it	ge
 800ced8:	462b      	movge	r3, r5
 800ceda:	42b3      	cmp	r3, r6
 800cedc:	bfa8      	it	ge
 800cede:	4633      	movge	r3, r6
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	bfc2      	ittt	gt
 800cee4:	1aed      	subgt	r5, r5, r3
 800cee6:	1af6      	subgt	r6, r6, r3
 800cee8:	1aff      	subgt	r7, r7, r3
 800ceea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	dd16      	ble.n	800cf1e <_strtod_l+0x736>
 800cef0:	4641      	mov	r1, r8
 800cef2:	9805      	ldr	r0, [sp, #20]
 800cef4:	461a      	mov	r2, r3
 800cef6:	f7ff f9a5 	bl	800c244 <__pow5mult>
 800cefa:	4680      	mov	r8, r0
 800cefc:	2800      	cmp	r0, #0
 800cefe:	d0ba      	beq.n	800ce76 <_strtod_l+0x68e>
 800cf00:	4601      	mov	r1, r0
 800cf02:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cf04:	9805      	ldr	r0, [sp, #20]
 800cf06:	f7ff f8f3 	bl	800c0f0 <__multiply>
 800cf0a:	900e      	str	r0, [sp, #56]	@ 0x38
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	f43f ae8a 	beq.w	800cc26 <_strtod_l+0x43e>
 800cf12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf14:	9805      	ldr	r0, [sp, #20]
 800cf16:	f7fe ffd7 	bl	800bec8 <_Bfree>
 800cf1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf1c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf1e:	2d00      	cmp	r5, #0
 800cf20:	dc1d      	bgt.n	800cf5e <_strtod_l+0x776>
 800cf22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	dd23      	ble.n	800cf70 <_strtod_l+0x788>
 800cf28:	4649      	mov	r1, r9
 800cf2a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cf2c:	9805      	ldr	r0, [sp, #20]
 800cf2e:	f7ff f989 	bl	800c244 <__pow5mult>
 800cf32:	4681      	mov	r9, r0
 800cf34:	b9e0      	cbnz	r0, 800cf70 <_strtod_l+0x788>
 800cf36:	f04f 0900 	mov.w	r9, #0
 800cf3a:	e674      	b.n	800cc26 <_strtod_l+0x43e>
 800cf3c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cf40:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cf44:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cf48:	35e2      	adds	r5, #226	@ 0xe2
 800cf4a:	fa01 f305 	lsl.w	r3, r1, r5
 800cf4e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf50:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cf52:	e7ba      	b.n	800ceca <_strtod_l+0x6e2>
 800cf54:	2300      	movs	r3, #0
 800cf56:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf58:	2301      	movs	r3, #1
 800cf5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf5c:	e7b5      	b.n	800ceca <_strtod_l+0x6e2>
 800cf5e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf60:	9805      	ldr	r0, [sp, #20]
 800cf62:	462a      	mov	r2, r5
 800cf64:	f7ff f9c8 	bl	800c2f8 <__lshift>
 800cf68:	901a      	str	r0, [sp, #104]	@ 0x68
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	d1d9      	bne.n	800cf22 <_strtod_l+0x73a>
 800cf6e:	e65a      	b.n	800cc26 <_strtod_l+0x43e>
 800cf70:	2e00      	cmp	r6, #0
 800cf72:	dd07      	ble.n	800cf84 <_strtod_l+0x79c>
 800cf74:	4649      	mov	r1, r9
 800cf76:	9805      	ldr	r0, [sp, #20]
 800cf78:	4632      	mov	r2, r6
 800cf7a:	f7ff f9bd 	bl	800c2f8 <__lshift>
 800cf7e:	4681      	mov	r9, r0
 800cf80:	2800      	cmp	r0, #0
 800cf82:	d0d8      	beq.n	800cf36 <_strtod_l+0x74e>
 800cf84:	2f00      	cmp	r7, #0
 800cf86:	dd08      	ble.n	800cf9a <_strtod_l+0x7b2>
 800cf88:	4641      	mov	r1, r8
 800cf8a:	9805      	ldr	r0, [sp, #20]
 800cf8c:	463a      	mov	r2, r7
 800cf8e:	f7ff f9b3 	bl	800c2f8 <__lshift>
 800cf92:	4680      	mov	r8, r0
 800cf94:	2800      	cmp	r0, #0
 800cf96:	f43f ae46 	beq.w	800cc26 <_strtod_l+0x43e>
 800cf9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf9c:	9805      	ldr	r0, [sp, #20]
 800cf9e:	464a      	mov	r2, r9
 800cfa0:	f7ff fa32 	bl	800c408 <__mdiff>
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	f43f ae3d 	beq.w	800cc26 <_strtod_l+0x43e>
 800cfac:	68c3      	ldr	r3, [r0, #12]
 800cfae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	60c3      	str	r3, [r0, #12]
 800cfb4:	4641      	mov	r1, r8
 800cfb6:	f7ff fa0b 	bl	800c3d0 <__mcmp>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	da46      	bge.n	800d04c <_strtod_l+0x864>
 800cfbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfc0:	ea53 030a 	orrs.w	r3, r3, sl
 800cfc4:	d16c      	bne.n	800d0a0 <_strtod_l+0x8b8>
 800cfc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d168      	bne.n	800d0a0 <_strtod_l+0x8b8>
 800cfce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cfd2:	0d1b      	lsrs	r3, r3, #20
 800cfd4:	051b      	lsls	r3, r3, #20
 800cfd6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cfda:	d961      	bls.n	800d0a0 <_strtod_l+0x8b8>
 800cfdc:	6963      	ldr	r3, [r4, #20]
 800cfde:	b913      	cbnz	r3, 800cfe6 <_strtod_l+0x7fe>
 800cfe0:	6923      	ldr	r3, [r4, #16]
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	dd5c      	ble.n	800d0a0 <_strtod_l+0x8b8>
 800cfe6:	4621      	mov	r1, r4
 800cfe8:	2201      	movs	r2, #1
 800cfea:	9805      	ldr	r0, [sp, #20]
 800cfec:	f7ff f984 	bl	800c2f8 <__lshift>
 800cff0:	4641      	mov	r1, r8
 800cff2:	4604      	mov	r4, r0
 800cff4:	f7ff f9ec 	bl	800c3d0 <__mcmp>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	dd51      	ble.n	800d0a0 <_strtod_l+0x8b8>
 800cffc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d000:	9a08      	ldr	r2, [sp, #32]
 800d002:	0d1b      	lsrs	r3, r3, #20
 800d004:	051b      	lsls	r3, r3, #20
 800d006:	2a00      	cmp	r2, #0
 800d008:	d06b      	beq.n	800d0e2 <_strtod_l+0x8fa>
 800d00a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d00e:	d868      	bhi.n	800d0e2 <_strtod_l+0x8fa>
 800d010:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d014:	f67f ae9d 	bls.w	800cd52 <_strtod_l+0x56a>
 800d018:	4b0a      	ldr	r3, [pc, #40]	@ (800d044 <_strtod_l+0x85c>)
 800d01a:	4650      	mov	r0, sl
 800d01c:	4659      	mov	r1, fp
 800d01e:	2200      	movs	r2, #0
 800d020:	f7f3 faf2 	bl	8000608 <__aeabi_dmul>
 800d024:	4b08      	ldr	r3, [pc, #32]	@ (800d048 <_strtod_l+0x860>)
 800d026:	400b      	ands	r3, r1
 800d028:	4682      	mov	sl, r0
 800d02a:	468b      	mov	fp, r1
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	f47f ae05 	bne.w	800cc3c <_strtod_l+0x454>
 800d032:	9a05      	ldr	r2, [sp, #20]
 800d034:	2322      	movs	r3, #34	@ 0x22
 800d036:	6013      	str	r3, [r2, #0]
 800d038:	e600      	b.n	800cc3c <_strtod_l+0x454>
 800d03a:	bf00      	nop
 800d03c:	0800ea10 	.word	0x0800ea10
 800d040:	fffffc02 	.word	0xfffffc02
 800d044:	39500000 	.word	0x39500000
 800d048:	7ff00000 	.word	0x7ff00000
 800d04c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d050:	d165      	bne.n	800d11e <_strtod_l+0x936>
 800d052:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d054:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d058:	b35a      	cbz	r2, 800d0b2 <_strtod_l+0x8ca>
 800d05a:	4a9f      	ldr	r2, [pc, #636]	@ (800d2d8 <_strtod_l+0xaf0>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d12b      	bne.n	800d0b8 <_strtod_l+0x8d0>
 800d060:	9b08      	ldr	r3, [sp, #32]
 800d062:	4651      	mov	r1, sl
 800d064:	b303      	cbz	r3, 800d0a8 <_strtod_l+0x8c0>
 800d066:	4b9d      	ldr	r3, [pc, #628]	@ (800d2dc <_strtod_l+0xaf4>)
 800d068:	465a      	mov	r2, fp
 800d06a:	4013      	ands	r3, r2
 800d06c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d070:	f04f 32ff 	mov.w	r2, #4294967295
 800d074:	d81b      	bhi.n	800d0ae <_strtod_l+0x8c6>
 800d076:	0d1b      	lsrs	r3, r3, #20
 800d078:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d07c:	fa02 f303 	lsl.w	r3, r2, r3
 800d080:	4299      	cmp	r1, r3
 800d082:	d119      	bne.n	800d0b8 <_strtod_l+0x8d0>
 800d084:	4b96      	ldr	r3, [pc, #600]	@ (800d2e0 <_strtod_l+0xaf8>)
 800d086:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d088:	429a      	cmp	r2, r3
 800d08a:	d102      	bne.n	800d092 <_strtod_l+0x8aa>
 800d08c:	3101      	adds	r1, #1
 800d08e:	f43f adca 	beq.w	800cc26 <_strtod_l+0x43e>
 800d092:	4b92      	ldr	r3, [pc, #584]	@ (800d2dc <_strtod_l+0xaf4>)
 800d094:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d096:	401a      	ands	r2, r3
 800d098:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d09c:	f04f 0a00 	mov.w	sl, #0
 800d0a0:	9b08      	ldr	r3, [sp, #32]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d1b8      	bne.n	800d018 <_strtod_l+0x830>
 800d0a6:	e5c9      	b.n	800cc3c <_strtod_l+0x454>
 800d0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d0ac:	e7e8      	b.n	800d080 <_strtod_l+0x898>
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	e7e6      	b.n	800d080 <_strtod_l+0x898>
 800d0b2:	ea53 030a 	orrs.w	r3, r3, sl
 800d0b6:	d0a1      	beq.n	800cffc <_strtod_l+0x814>
 800d0b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d0ba:	b1db      	cbz	r3, 800d0f4 <_strtod_l+0x90c>
 800d0bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0be:	4213      	tst	r3, r2
 800d0c0:	d0ee      	beq.n	800d0a0 <_strtod_l+0x8b8>
 800d0c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0c4:	9a08      	ldr	r2, [sp, #32]
 800d0c6:	4650      	mov	r0, sl
 800d0c8:	4659      	mov	r1, fp
 800d0ca:	b1bb      	cbz	r3, 800d0fc <_strtod_l+0x914>
 800d0cc:	f7ff fb6e 	bl	800c7ac <sulp>
 800d0d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d0d4:	ec53 2b10 	vmov	r2, r3, d0
 800d0d8:	f7f3 f8e0 	bl	800029c <__adddf3>
 800d0dc:	4682      	mov	sl, r0
 800d0de:	468b      	mov	fp, r1
 800d0e0:	e7de      	b.n	800d0a0 <_strtod_l+0x8b8>
 800d0e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d0e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d0ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d0ee:	f04f 3aff 	mov.w	sl, #4294967295
 800d0f2:	e7d5      	b.n	800d0a0 <_strtod_l+0x8b8>
 800d0f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d0f6:	ea13 0f0a 	tst.w	r3, sl
 800d0fa:	e7e1      	b.n	800d0c0 <_strtod_l+0x8d8>
 800d0fc:	f7ff fb56 	bl	800c7ac <sulp>
 800d100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d104:	ec53 2b10 	vmov	r2, r3, d0
 800d108:	f7f3 f8c6 	bl	8000298 <__aeabi_dsub>
 800d10c:	2200      	movs	r2, #0
 800d10e:	2300      	movs	r3, #0
 800d110:	4682      	mov	sl, r0
 800d112:	468b      	mov	fp, r1
 800d114:	f7f3 fce0 	bl	8000ad8 <__aeabi_dcmpeq>
 800d118:	2800      	cmp	r0, #0
 800d11a:	d0c1      	beq.n	800d0a0 <_strtod_l+0x8b8>
 800d11c:	e619      	b.n	800cd52 <_strtod_l+0x56a>
 800d11e:	4641      	mov	r1, r8
 800d120:	4620      	mov	r0, r4
 800d122:	f7ff facd 	bl	800c6c0 <__ratio>
 800d126:	ec57 6b10 	vmov	r6, r7, d0
 800d12a:	2200      	movs	r2, #0
 800d12c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d130:	4630      	mov	r0, r6
 800d132:	4639      	mov	r1, r7
 800d134:	f7f3 fce4 	bl	8000b00 <__aeabi_dcmple>
 800d138:	2800      	cmp	r0, #0
 800d13a:	d06f      	beq.n	800d21c <_strtod_l+0xa34>
 800d13c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d17a      	bne.n	800d238 <_strtod_l+0xa50>
 800d142:	f1ba 0f00 	cmp.w	sl, #0
 800d146:	d158      	bne.n	800d1fa <_strtod_l+0xa12>
 800d148:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d14a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d15a      	bne.n	800d208 <_strtod_l+0xa20>
 800d152:	4b64      	ldr	r3, [pc, #400]	@ (800d2e4 <_strtod_l+0xafc>)
 800d154:	2200      	movs	r2, #0
 800d156:	4630      	mov	r0, r6
 800d158:	4639      	mov	r1, r7
 800d15a:	f7f3 fcc7 	bl	8000aec <__aeabi_dcmplt>
 800d15e:	2800      	cmp	r0, #0
 800d160:	d159      	bne.n	800d216 <_strtod_l+0xa2e>
 800d162:	4630      	mov	r0, r6
 800d164:	4639      	mov	r1, r7
 800d166:	4b60      	ldr	r3, [pc, #384]	@ (800d2e8 <_strtod_l+0xb00>)
 800d168:	2200      	movs	r2, #0
 800d16a:	f7f3 fa4d 	bl	8000608 <__aeabi_dmul>
 800d16e:	4606      	mov	r6, r0
 800d170:	460f      	mov	r7, r1
 800d172:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d176:	9606      	str	r6, [sp, #24]
 800d178:	9307      	str	r3, [sp, #28]
 800d17a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d17e:	4d57      	ldr	r5, [pc, #348]	@ (800d2dc <_strtod_l+0xaf4>)
 800d180:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d184:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d186:	401d      	ands	r5, r3
 800d188:	4b58      	ldr	r3, [pc, #352]	@ (800d2ec <_strtod_l+0xb04>)
 800d18a:	429d      	cmp	r5, r3
 800d18c:	f040 80b2 	bne.w	800d2f4 <_strtod_l+0xb0c>
 800d190:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d192:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d196:	ec4b ab10 	vmov	d0, sl, fp
 800d19a:	f7ff f9c9 	bl	800c530 <__ulp>
 800d19e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1a2:	ec51 0b10 	vmov	r0, r1, d0
 800d1a6:	f7f3 fa2f 	bl	8000608 <__aeabi_dmul>
 800d1aa:	4652      	mov	r2, sl
 800d1ac:	465b      	mov	r3, fp
 800d1ae:	f7f3 f875 	bl	800029c <__adddf3>
 800d1b2:	460b      	mov	r3, r1
 800d1b4:	4949      	ldr	r1, [pc, #292]	@ (800d2dc <_strtod_l+0xaf4>)
 800d1b6:	4a4e      	ldr	r2, [pc, #312]	@ (800d2f0 <_strtod_l+0xb08>)
 800d1b8:	4019      	ands	r1, r3
 800d1ba:	4291      	cmp	r1, r2
 800d1bc:	4682      	mov	sl, r0
 800d1be:	d942      	bls.n	800d246 <_strtod_l+0xa5e>
 800d1c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d1c2:	4b47      	ldr	r3, [pc, #284]	@ (800d2e0 <_strtod_l+0xaf8>)
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d103      	bne.n	800d1d0 <_strtod_l+0x9e8>
 800d1c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	f43f ad2b 	beq.w	800cc26 <_strtod_l+0x43e>
 800d1d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d2e0 <_strtod_l+0xaf8>
 800d1d4:	f04f 3aff 	mov.w	sl, #4294967295
 800d1d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1da:	9805      	ldr	r0, [sp, #20]
 800d1dc:	f7fe fe74 	bl	800bec8 <_Bfree>
 800d1e0:	9805      	ldr	r0, [sp, #20]
 800d1e2:	4649      	mov	r1, r9
 800d1e4:	f7fe fe70 	bl	800bec8 <_Bfree>
 800d1e8:	9805      	ldr	r0, [sp, #20]
 800d1ea:	4641      	mov	r1, r8
 800d1ec:	f7fe fe6c 	bl	800bec8 <_Bfree>
 800d1f0:	9805      	ldr	r0, [sp, #20]
 800d1f2:	4621      	mov	r1, r4
 800d1f4:	f7fe fe68 	bl	800bec8 <_Bfree>
 800d1f8:	e618      	b.n	800ce2c <_strtod_l+0x644>
 800d1fa:	f1ba 0f01 	cmp.w	sl, #1
 800d1fe:	d103      	bne.n	800d208 <_strtod_l+0xa20>
 800d200:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d202:	2b00      	cmp	r3, #0
 800d204:	f43f ada5 	beq.w	800cd52 <_strtod_l+0x56a>
 800d208:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d2b8 <_strtod_l+0xad0>
 800d20c:	4f35      	ldr	r7, [pc, #212]	@ (800d2e4 <_strtod_l+0xafc>)
 800d20e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d212:	2600      	movs	r6, #0
 800d214:	e7b1      	b.n	800d17a <_strtod_l+0x992>
 800d216:	4f34      	ldr	r7, [pc, #208]	@ (800d2e8 <_strtod_l+0xb00>)
 800d218:	2600      	movs	r6, #0
 800d21a:	e7aa      	b.n	800d172 <_strtod_l+0x98a>
 800d21c:	4b32      	ldr	r3, [pc, #200]	@ (800d2e8 <_strtod_l+0xb00>)
 800d21e:	4630      	mov	r0, r6
 800d220:	4639      	mov	r1, r7
 800d222:	2200      	movs	r2, #0
 800d224:	f7f3 f9f0 	bl	8000608 <__aeabi_dmul>
 800d228:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d22a:	4606      	mov	r6, r0
 800d22c:	460f      	mov	r7, r1
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d09f      	beq.n	800d172 <_strtod_l+0x98a>
 800d232:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d236:	e7a0      	b.n	800d17a <_strtod_l+0x992>
 800d238:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d2c0 <_strtod_l+0xad8>
 800d23c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d240:	ec57 6b17 	vmov	r6, r7, d7
 800d244:	e799      	b.n	800d17a <_strtod_l+0x992>
 800d246:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d24a:	9b08      	ldr	r3, [sp, #32]
 800d24c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d250:	2b00      	cmp	r3, #0
 800d252:	d1c1      	bne.n	800d1d8 <_strtod_l+0x9f0>
 800d254:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d258:	0d1b      	lsrs	r3, r3, #20
 800d25a:	051b      	lsls	r3, r3, #20
 800d25c:	429d      	cmp	r5, r3
 800d25e:	d1bb      	bne.n	800d1d8 <_strtod_l+0x9f0>
 800d260:	4630      	mov	r0, r6
 800d262:	4639      	mov	r1, r7
 800d264:	f7f3 fd30 	bl	8000cc8 <__aeabi_d2lz>
 800d268:	f7f3 f9a0 	bl	80005ac <__aeabi_l2d>
 800d26c:	4602      	mov	r2, r0
 800d26e:	460b      	mov	r3, r1
 800d270:	4630      	mov	r0, r6
 800d272:	4639      	mov	r1, r7
 800d274:	f7f3 f810 	bl	8000298 <__aeabi_dsub>
 800d278:	460b      	mov	r3, r1
 800d27a:	4602      	mov	r2, r0
 800d27c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d280:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d286:	ea46 060a 	orr.w	r6, r6, sl
 800d28a:	431e      	orrs	r6, r3
 800d28c:	d06f      	beq.n	800d36e <_strtod_l+0xb86>
 800d28e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d2c8 <_strtod_l+0xae0>)
 800d290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d294:	f7f3 fc2a 	bl	8000aec <__aeabi_dcmplt>
 800d298:	2800      	cmp	r0, #0
 800d29a:	f47f accf 	bne.w	800cc3c <_strtod_l+0x454>
 800d29e:	a30c      	add	r3, pc, #48	@ (adr r3, 800d2d0 <_strtod_l+0xae8>)
 800d2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2a8:	f7f3 fc3e 	bl	8000b28 <__aeabi_dcmpgt>
 800d2ac:	2800      	cmp	r0, #0
 800d2ae:	d093      	beq.n	800d1d8 <_strtod_l+0x9f0>
 800d2b0:	e4c4      	b.n	800cc3c <_strtod_l+0x454>
 800d2b2:	bf00      	nop
 800d2b4:	f3af 8000 	nop.w
 800d2b8:	00000000 	.word	0x00000000
 800d2bc:	bff00000 	.word	0xbff00000
 800d2c0:	00000000 	.word	0x00000000
 800d2c4:	3ff00000 	.word	0x3ff00000
 800d2c8:	94a03595 	.word	0x94a03595
 800d2cc:	3fdfffff 	.word	0x3fdfffff
 800d2d0:	35afe535 	.word	0x35afe535
 800d2d4:	3fe00000 	.word	0x3fe00000
 800d2d8:	000fffff 	.word	0x000fffff
 800d2dc:	7ff00000 	.word	0x7ff00000
 800d2e0:	7fefffff 	.word	0x7fefffff
 800d2e4:	3ff00000 	.word	0x3ff00000
 800d2e8:	3fe00000 	.word	0x3fe00000
 800d2ec:	7fe00000 	.word	0x7fe00000
 800d2f0:	7c9fffff 	.word	0x7c9fffff
 800d2f4:	9b08      	ldr	r3, [sp, #32]
 800d2f6:	b323      	cbz	r3, 800d342 <_strtod_l+0xb5a>
 800d2f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d2fc:	d821      	bhi.n	800d342 <_strtod_l+0xb5a>
 800d2fe:	a328      	add	r3, pc, #160	@ (adr r3, 800d3a0 <_strtod_l+0xbb8>)
 800d300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d304:	4630      	mov	r0, r6
 800d306:	4639      	mov	r1, r7
 800d308:	f7f3 fbfa 	bl	8000b00 <__aeabi_dcmple>
 800d30c:	b1a0      	cbz	r0, 800d338 <_strtod_l+0xb50>
 800d30e:	4639      	mov	r1, r7
 800d310:	4630      	mov	r0, r6
 800d312:	f7f3 fc51 	bl	8000bb8 <__aeabi_d2uiz>
 800d316:	2801      	cmp	r0, #1
 800d318:	bf38      	it	cc
 800d31a:	2001      	movcc	r0, #1
 800d31c:	f7f3 f8fa 	bl	8000514 <__aeabi_ui2d>
 800d320:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d322:	4606      	mov	r6, r0
 800d324:	460f      	mov	r7, r1
 800d326:	b9fb      	cbnz	r3, 800d368 <_strtod_l+0xb80>
 800d328:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d32c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d32e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d330:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d334:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d338:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d33a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d33e:	1b5b      	subs	r3, r3, r5
 800d340:	9311      	str	r3, [sp, #68]	@ 0x44
 800d342:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d346:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d34a:	f7ff f8f1 	bl	800c530 <__ulp>
 800d34e:	4650      	mov	r0, sl
 800d350:	ec53 2b10 	vmov	r2, r3, d0
 800d354:	4659      	mov	r1, fp
 800d356:	f7f3 f957 	bl	8000608 <__aeabi_dmul>
 800d35a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d35e:	f7f2 ff9d 	bl	800029c <__adddf3>
 800d362:	4682      	mov	sl, r0
 800d364:	468b      	mov	fp, r1
 800d366:	e770      	b.n	800d24a <_strtod_l+0xa62>
 800d368:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d36c:	e7e0      	b.n	800d330 <_strtod_l+0xb48>
 800d36e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d3a8 <_strtod_l+0xbc0>)
 800d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d374:	f7f3 fbba 	bl	8000aec <__aeabi_dcmplt>
 800d378:	e798      	b.n	800d2ac <_strtod_l+0xac4>
 800d37a:	2300      	movs	r3, #0
 800d37c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d37e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d380:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d382:	6013      	str	r3, [r2, #0]
 800d384:	f7ff ba6d 	b.w	800c862 <_strtod_l+0x7a>
 800d388:	2a65      	cmp	r2, #101	@ 0x65
 800d38a:	f43f ab66 	beq.w	800ca5a <_strtod_l+0x272>
 800d38e:	2a45      	cmp	r2, #69	@ 0x45
 800d390:	f43f ab63 	beq.w	800ca5a <_strtod_l+0x272>
 800d394:	2301      	movs	r3, #1
 800d396:	f7ff bb9e 	b.w	800cad6 <_strtod_l+0x2ee>
 800d39a:	bf00      	nop
 800d39c:	f3af 8000 	nop.w
 800d3a0:	ffc00000 	.word	0xffc00000
 800d3a4:	41dfffff 	.word	0x41dfffff
 800d3a8:	94a03595 	.word	0x94a03595
 800d3ac:	3fcfffff 	.word	0x3fcfffff

0800d3b0 <_strtod_r>:
 800d3b0:	4b01      	ldr	r3, [pc, #4]	@ (800d3b8 <_strtod_r+0x8>)
 800d3b2:	f7ff ba19 	b.w	800c7e8 <_strtod_l>
 800d3b6:	bf00      	nop
 800d3b8:	2000006c 	.word	0x2000006c

0800d3bc <_strtol_l.constprop.0>:
 800d3bc:	2b24      	cmp	r3, #36	@ 0x24
 800d3be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3c2:	4686      	mov	lr, r0
 800d3c4:	4690      	mov	r8, r2
 800d3c6:	d801      	bhi.n	800d3cc <_strtol_l.constprop.0+0x10>
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d106      	bne.n	800d3da <_strtol_l.constprop.0+0x1e>
 800d3cc:	f7fd fd8e 	bl	800aeec <__errno>
 800d3d0:	2316      	movs	r3, #22
 800d3d2:	6003      	str	r3, [r0, #0]
 800d3d4:	2000      	movs	r0, #0
 800d3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3da:	4834      	ldr	r0, [pc, #208]	@ (800d4ac <_strtol_l.constprop.0+0xf0>)
 800d3dc:	460d      	mov	r5, r1
 800d3de:	462a      	mov	r2, r5
 800d3e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d3e4:	5d06      	ldrb	r6, [r0, r4]
 800d3e6:	f016 0608 	ands.w	r6, r6, #8
 800d3ea:	d1f8      	bne.n	800d3de <_strtol_l.constprop.0+0x22>
 800d3ec:	2c2d      	cmp	r4, #45	@ 0x2d
 800d3ee:	d12d      	bne.n	800d44c <_strtol_l.constprop.0+0x90>
 800d3f0:	782c      	ldrb	r4, [r5, #0]
 800d3f2:	2601      	movs	r6, #1
 800d3f4:	1c95      	adds	r5, r2, #2
 800d3f6:	f033 0210 	bics.w	r2, r3, #16
 800d3fa:	d109      	bne.n	800d410 <_strtol_l.constprop.0+0x54>
 800d3fc:	2c30      	cmp	r4, #48	@ 0x30
 800d3fe:	d12a      	bne.n	800d456 <_strtol_l.constprop.0+0x9a>
 800d400:	782a      	ldrb	r2, [r5, #0]
 800d402:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d406:	2a58      	cmp	r2, #88	@ 0x58
 800d408:	d125      	bne.n	800d456 <_strtol_l.constprop.0+0x9a>
 800d40a:	786c      	ldrb	r4, [r5, #1]
 800d40c:	2310      	movs	r3, #16
 800d40e:	3502      	adds	r5, #2
 800d410:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d414:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d418:	2200      	movs	r2, #0
 800d41a:	fbbc f9f3 	udiv	r9, ip, r3
 800d41e:	4610      	mov	r0, r2
 800d420:	fb03 ca19 	mls	sl, r3, r9, ip
 800d424:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d428:	2f09      	cmp	r7, #9
 800d42a:	d81b      	bhi.n	800d464 <_strtol_l.constprop.0+0xa8>
 800d42c:	463c      	mov	r4, r7
 800d42e:	42a3      	cmp	r3, r4
 800d430:	dd27      	ble.n	800d482 <_strtol_l.constprop.0+0xc6>
 800d432:	1c57      	adds	r7, r2, #1
 800d434:	d007      	beq.n	800d446 <_strtol_l.constprop.0+0x8a>
 800d436:	4581      	cmp	r9, r0
 800d438:	d320      	bcc.n	800d47c <_strtol_l.constprop.0+0xc0>
 800d43a:	d101      	bne.n	800d440 <_strtol_l.constprop.0+0x84>
 800d43c:	45a2      	cmp	sl, r4
 800d43e:	db1d      	blt.n	800d47c <_strtol_l.constprop.0+0xc0>
 800d440:	fb00 4003 	mla	r0, r0, r3, r4
 800d444:	2201      	movs	r2, #1
 800d446:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d44a:	e7eb      	b.n	800d424 <_strtol_l.constprop.0+0x68>
 800d44c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d44e:	bf04      	itt	eq
 800d450:	782c      	ldrbeq	r4, [r5, #0]
 800d452:	1c95      	addeq	r5, r2, #2
 800d454:	e7cf      	b.n	800d3f6 <_strtol_l.constprop.0+0x3a>
 800d456:	2b00      	cmp	r3, #0
 800d458:	d1da      	bne.n	800d410 <_strtol_l.constprop.0+0x54>
 800d45a:	2c30      	cmp	r4, #48	@ 0x30
 800d45c:	bf0c      	ite	eq
 800d45e:	2308      	moveq	r3, #8
 800d460:	230a      	movne	r3, #10
 800d462:	e7d5      	b.n	800d410 <_strtol_l.constprop.0+0x54>
 800d464:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d468:	2f19      	cmp	r7, #25
 800d46a:	d801      	bhi.n	800d470 <_strtol_l.constprop.0+0xb4>
 800d46c:	3c37      	subs	r4, #55	@ 0x37
 800d46e:	e7de      	b.n	800d42e <_strtol_l.constprop.0+0x72>
 800d470:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d474:	2f19      	cmp	r7, #25
 800d476:	d804      	bhi.n	800d482 <_strtol_l.constprop.0+0xc6>
 800d478:	3c57      	subs	r4, #87	@ 0x57
 800d47a:	e7d8      	b.n	800d42e <_strtol_l.constprop.0+0x72>
 800d47c:	f04f 32ff 	mov.w	r2, #4294967295
 800d480:	e7e1      	b.n	800d446 <_strtol_l.constprop.0+0x8a>
 800d482:	1c53      	adds	r3, r2, #1
 800d484:	d108      	bne.n	800d498 <_strtol_l.constprop.0+0xdc>
 800d486:	2322      	movs	r3, #34	@ 0x22
 800d488:	f8ce 3000 	str.w	r3, [lr]
 800d48c:	4660      	mov	r0, ip
 800d48e:	f1b8 0f00 	cmp.w	r8, #0
 800d492:	d0a0      	beq.n	800d3d6 <_strtol_l.constprop.0+0x1a>
 800d494:	1e69      	subs	r1, r5, #1
 800d496:	e006      	b.n	800d4a6 <_strtol_l.constprop.0+0xea>
 800d498:	b106      	cbz	r6, 800d49c <_strtol_l.constprop.0+0xe0>
 800d49a:	4240      	negs	r0, r0
 800d49c:	f1b8 0f00 	cmp.w	r8, #0
 800d4a0:	d099      	beq.n	800d3d6 <_strtol_l.constprop.0+0x1a>
 800d4a2:	2a00      	cmp	r2, #0
 800d4a4:	d1f6      	bne.n	800d494 <_strtol_l.constprop.0+0xd8>
 800d4a6:	f8c8 1000 	str.w	r1, [r8]
 800d4aa:	e794      	b.n	800d3d6 <_strtol_l.constprop.0+0x1a>
 800d4ac:	0800ea39 	.word	0x0800ea39

0800d4b0 <_strtol_r>:
 800d4b0:	f7ff bf84 	b.w	800d3bc <_strtol_l.constprop.0>

0800d4b4 <__ssputs_r>:
 800d4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4b8:	688e      	ldr	r6, [r1, #8]
 800d4ba:	461f      	mov	r7, r3
 800d4bc:	42be      	cmp	r6, r7
 800d4be:	680b      	ldr	r3, [r1, #0]
 800d4c0:	4682      	mov	sl, r0
 800d4c2:	460c      	mov	r4, r1
 800d4c4:	4690      	mov	r8, r2
 800d4c6:	d82d      	bhi.n	800d524 <__ssputs_r+0x70>
 800d4c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d4d0:	d026      	beq.n	800d520 <__ssputs_r+0x6c>
 800d4d2:	6965      	ldr	r5, [r4, #20]
 800d4d4:	6909      	ldr	r1, [r1, #16]
 800d4d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4da:	eba3 0901 	sub.w	r9, r3, r1
 800d4de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4e2:	1c7b      	adds	r3, r7, #1
 800d4e4:	444b      	add	r3, r9
 800d4e6:	106d      	asrs	r5, r5, #1
 800d4e8:	429d      	cmp	r5, r3
 800d4ea:	bf38      	it	cc
 800d4ec:	461d      	movcc	r5, r3
 800d4ee:	0553      	lsls	r3, r2, #21
 800d4f0:	d527      	bpl.n	800d542 <__ssputs_r+0x8e>
 800d4f2:	4629      	mov	r1, r5
 800d4f4:	f7fe fc1c 	bl	800bd30 <_malloc_r>
 800d4f8:	4606      	mov	r6, r0
 800d4fa:	b360      	cbz	r0, 800d556 <__ssputs_r+0xa2>
 800d4fc:	6921      	ldr	r1, [r4, #16]
 800d4fe:	464a      	mov	r2, r9
 800d500:	f7fd fd21 	bl	800af46 <memcpy>
 800d504:	89a3      	ldrh	r3, [r4, #12]
 800d506:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d50a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d50e:	81a3      	strh	r3, [r4, #12]
 800d510:	6126      	str	r6, [r4, #16]
 800d512:	6165      	str	r5, [r4, #20]
 800d514:	444e      	add	r6, r9
 800d516:	eba5 0509 	sub.w	r5, r5, r9
 800d51a:	6026      	str	r6, [r4, #0]
 800d51c:	60a5      	str	r5, [r4, #8]
 800d51e:	463e      	mov	r6, r7
 800d520:	42be      	cmp	r6, r7
 800d522:	d900      	bls.n	800d526 <__ssputs_r+0x72>
 800d524:	463e      	mov	r6, r7
 800d526:	6820      	ldr	r0, [r4, #0]
 800d528:	4632      	mov	r2, r6
 800d52a:	4641      	mov	r1, r8
 800d52c:	f000 f9d8 	bl	800d8e0 <memmove>
 800d530:	68a3      	ldr	r3, [r4, #8]
 800d532:	1b9b      	subs	r3, r3, r6
 800d534:	60a3      	str	r3, [r4, #8]
 800d536:	6823      	ldr	r3, [r4, #0]
 800d538:	4433      	add	r3, r6
 800d53a:	6023      	str	r3, [r4, #0]
 800d53c:	2000      	movs	r0, #0
 800d53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d542:	462a      	mov	r2, r5
 800d544:	f000 fd75 	bl	800e032 <_realloc_r>
 800d548:	4606      	mov	r6, r0
 800d54a:	2800      	cmp	r0, #0
 800d54c:	d1e0      	bne.n	800d510 <__ssputs_r+0x5c>
 800d54e:	6921      	ldr	r1, [r4, #16]
 800d550:	4650      	mov	r0, sl
 800d552:	f7fe fb79 	bl	800bc48 <_free_r>
 800d556:	230c      	movs	r3, #12
 800d558:	f8ca 3000 	str.w	r3, [sl]
 800d55c:	89a3      	ldrh	r3, [r4, #12]
 800d55e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d562:	81a3      	strh	r3, [r4, #12]
 800d564:	f04f 30ff 	mov.w	r0, #4294967295
 800d568:	e7e9      	b.n	800d53e <__ssputs_r+0x8a>
	...

0800d56c <_svfiprintf_r>:
 800d56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d570:	4698      	mov	r8, r3
 800d572:	898b      	ldrh	r3, [r1, #12]
 800d574:	061b      	lsls	r3, r3, #24
 800d576:	b09d      	sub	sp, #116	@ 0x74
 800d578:	4607      	mov	r7, r0
 800d57a:	460d      	mov	r5, r1
 800d57c:	4614      	mov	r4, r2
 800d57e:	d510      	bpl.n	800d5a2 <_svfiprintf_r+0x36>
 800d580:	690b      	ldr	r3, [r1, #16]
 800d582:	b973      	cbnz	r3, 800d5a2 <_svfiprintf_r+0x36>
 800d584:	2140      	movs	r1, #64	@ 0x40
 800d586:	f7fe fbd3 	bl	800bd30 <_malloc_r>
 800d58a:	6028      	str	r0, [r5, #0]
 800d58c:	6128      	str	r0, [r5, #16]
 800d58e:	b930      	cbnz	r0, 800d59e <_svfiprintf_r+0x32>
 800d590:	230c      	movs	r3, #12
 800d592:	603b      	str	r3, [r7, #0]
 800d594:	f04f 30ff 	mov.w	r0, #4294967295
 800d598:	b01d      	add	sp, #116	@ 0x74
 800d59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d59e:	2340      	movs	r3, #64	@ 0x40
 800d5a0:	616b      	str	r3, [r5, #20]
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5a6:	2320      	movs	r3, #32
 800d5a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5b0:	2330      	movs	r3, #48	@ 0x30
 800d5b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d750 <_svfiprintf_r+0x1e4>
 800d5b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5ba:	f04f 0901 	mov.w	r9, #1
 800d5be:	4623      	mov	r3, r4
 800d5c0:	469a      	mov	sl, r3
 800d5c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5c6:	b10a      	cbz	r2, 800d5cc <_svfiprintf_r+0x60>
 800d5c8:	2a25      	cmp	r2, #37	@ 0x25
 800d5ca:	d1f9      	bne.n	800d5c0 <_svfiprintf_r+0x54>
 800d5cc:	ebba 0b04 	subs.w	fp, sl, r4
 800d5d0:	d00b      	beq.n	800d5ea <_svfiprintf_r+0x7e>
 800d5d2:	465b      	mov	r3, fp
 800d5d4:	4622      	mov	r2, r4
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	4638      	mov	r0, r7
 800d5da:	f7ff ff6b 	bl	800d4b4 <__ssputs_r>
 800d5de:	3001      	adds	r0, #1
 800d5e0:	f000 80a7 	beq.w	800d732 <_svfiprintf_r+0x1c6>
 800d5e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5e6:	445a      	add	r2, fp
 800d5e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	f000 809f 	beq.w	800d732 <_svfiprintf_r+0x1c6>
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5fe:	f10a 0a01 	add.w	sl, sl, #1
 800d602:	9304      	str	r3, [sp, #16]
 800d604:	9307      	str	r3, [sp, #28]
 800d606:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d60a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d60c:	4654      	mov	r4, sl
 800d60e:	2205      	movs	r2, #5
 800d610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d614:	484e      	ldr	r0, [pc, #312]	@ (800d750 <_svfiprintf_r+0x1e4>)
 800d616:	f7f2 fde3 	bl	80001e0 <memchr>
 800d61a:	9a04      	ldr	r2, [sp, #16]
 800d61c:	b9d8      	cbnz	r0, 800d656 <_svfiprintf_r+0xea>
 800d61e:	06d0      	lsls	r0, r2, #27
 800d620:	bf44      	itt	mi
 800d622:	2320      	movmi	r3, #32
 800d624:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d628:	0711      	lsls	r1, r2, #28
 800d62a:	bf44      	itt	mi
 800d62c:	232b      	movmi	r3, #43	@ 0x2b
 800d62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d632:	f89a 3000 	ldrb.w	r3, [sl]
 800d636:	2b2a      	cmp	r3, #42	@ 0x2a
 800d638:	d015      	beq.n	800d666 <_svfiprintf_r+0xfa>
 800d63a:	9a07      	ldr	r2, [sp, #28]
 800d63c:	4654      	mov	r4, sl
 800d63e:	2000      	movs	r0, #0
 800d640:	f04f 0c0a 	mov.w	ip, #10
 800d644:	4621      	mov	r1, r4
 800d646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d64a:	3b30      	subs	r3, #48	@ 0x30
 800d64c:	2b09      	cmp	r3, #9
 800d64e:	d94b      	bls.n	800d6e8 <_svfiprintf_r+0x17c>
 800d650:	b1b0      	cbz	r0, 800d680 <_svfiprintf_r+0x114>
 800d652:	9207      	str	r2, [sp, #28]
 800d654:	e014      	b.n	800d680 <_svfiprintf_r+0x114>
 800d656:	eba0 0308 	sub.w	r3, r0, r8
 800d65a:	fa09 f303 	lsl.w	r3, r9, r3
 800d65e:	4313      	orrs	r3, r2
 800d660:	9304      	str	r3, [sp, #16]
 800d662:	46a2      	mov	sl, r4
 800d664:	e7d2      	b.n	800d60c <_svfiprintf_r+0xa0>
 800d666:	9b03      	ldr	r3, [sp, #12]
 800d668:	1d19      	adds	r1, r3, #4
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	9103      	str	r1, [sp, #12]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	bfbb      	ittet	lt
 800d672:	425b      	neglt	r3, r3
 800d674:	f042 0202 	orrlt.w	r2, r2, #2
 800d678:	9307      	strge	r3, [sp, #28]
 800d67a:	9307      	strlt	r3, [sp, #28]
 800d67c:	bfb8      	it	lt
 800d67e:	9204      	strlt	r2, [sp, #16]
 800d680:	7823      	ldrb	r3, [r4, #0]
 800d682:	2b2e      	cmp	r3, #46	@ 0x2e
 800d684:	d10a      	bne.n	800d69c <_svfiprintf_r+0x130>
 800d686:	7863      	ldrb	r3, [r4, #1]
 800d688:	2b2a      	cmp	r3, #42	@ 0x2a
 800d68a:	d132      	bne.n	800d6f2 <_svfiprintf_r+0x186>
 800d68c:	9b03      	ldr	r3, [sp, #12]
 800d68e:	1d1a      	adds	r2, r3, #4
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	9203      	str	r2, [sp, #12]
 800d694:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d698:	3402      	adds	r4, #2
 800d69a:	9305      	str	r3, [sp, #20]
 800d69c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d760 <_svfiprintf_r+0x1f4>
 800d6a0:	7821      	ldrb	r1, [r4, #0]
 800d6a2:	2203      	movs	r2, #3
 800d6a4:	4650      	mov	r0, sl
 800d6a6:	f7f2 fd9b 	bl	80001e0 <memchr>
 800d6aa:	b138      	cbz	r0, 800d6bc <_svfiprintf_r+0x150>
 800d6ac:	9b04      	ldr	r3, [sp, #16]
 800d6ae:	eba0 000a 	sub.w	r0, r0, sl
 800d6b2:	2240      	movs	r2, #64	@ 0x40
 800d6b4:	4082      	lsls	r2, r0
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	3401      	adds	r4, #1
 800d6ba:	9304      	str	r3, [sp, #16]
 800d6bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6c0:	4824      	ldr	r0, [pc, #144]	@ (800d754 <_svfiprintf_r+0x1e8>)
 800d6c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6c6:	2206      	movs	r2, #6
 800d6c8:	f7f2 fd8a 	bl	80001e0 <memchr>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d036      	beq.n	800d73e <_svfiprintf_r+0x1d2>
 800d6d0:	4b21      	ldr	r3, [pc, #132]	@ (800d758 <_svfiprintf_r+0x1ec>)
 800d6d2:	bb1b      	cbnz	r3, 800d71c <_svfiprintf_r+0x1b0>
 800d6d4:	9b03      	ldr	r3, [sp, #12]
 800d6d6:	3307      	adds	r3, #7
 800d6d8:	f023 0307 	bic.w	r3, r3, #7
 800d6dc:	3308      	adds	r3, #8
 800d6de:	9303      	str	r3, [sp, #12]
 800d6e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6e2:	4433      	add	r3, r6
 800d6e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6e6:	e76a      	b.n	800d5be <_svfiprintf_r+0x52>
 800d6e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6ec:	460c      	mov	r4, r1
 800d6ee:	2001      	movs	r0, #1
 800d6f0:	e7a8      	b.n	800d644 <_svfiprintf_r+0xd8>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	3401      	adds	r4, #1
 800d6f6:	9305      	str	r3, [sp, #20]
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	f04f 0c0a 	mov.w	ip, #10
 800d6fe:	4620      	mov	r0, r4
 800d700:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d704:	3a30      	subs	r2, #48	@ 0x30
 800d706:	2a09      	cmp	r2, #9
 800d708:	d903      	bls.n	800d712 <_svfiprintf_r+0x1a6>
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d0c6      	beq.n	800d69c <_svfiprintf_r+0x130>
 800d70e:	9105      	str	r1, [sp, #20]
 800d710:	e7c4      	b.n	800d69c <_svfiprintf_r+0x130>
 800d712:	fb0c 2101 	mla	r1, ip, r1, r2
 800d716:	4604      	mov	r4, r0
 800d718:	2301      	movs	r3, #1
 800d71a:	e7f0      	b.n	800d6fe <_svfiprintf_r+0x192>
 800d71c:	ab03      	add	r3, sp, #12
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	462a      	mov	r2, r5
 800d722:	4b0e      	ldr	r3, [pc, #56]	@ (800d75c <_svfiprintf_r+0x1f0>)
 800d724:	a904      	add	r1, sp, #16
 800d726:	4638      	mov	r0, r7
 800d728:	f7fc fba4 	bl	8009e74 <_printf_float>
 800d72c:	1c42      	adds	r2, r0, #1
 800d72e:	4606      	mov	r6, r0
 800d730:	d1d6      	bne.n	800d6e0 <_svfiprintf_r+0x174>
 800d732:	89ab      	ldrh	r3, [r5, #12]
 800d734:	065b      	lsls	r3, r3, #25
 800d736:	f53f af2d 	bmi.w	800d594 <_svfiprintf_r+0x28>
 800d73a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d73c:	e72c      	b.n	800d598 <_svfiprintf_r+0x2c>
 800d73e:	ab03      	add	r3, sp, #12
 800d740:	9300      	str	r3, [sp, #0]
 800d742:	462a      	mov	r2, r5
 800d744:	4b05      	ldr	r3, [pc, #20]	@ (800d75c <_svfiprintf_r+0x1f0>)
 800d746:	a904      	add	r1, sp, #16
 800d748:	4638      	mov	r0, r7
 800d74a:	f7fc fe2b 	bl	800a3a4 <_printf_i>
 800d74e:	e7ed      	b.n	800d72c <_svfiprintf_r+0x1c0>
 800d750:	0800eb39 	.word	0x0800eb39
 800d754:	0800eb43 	.word	0x0800eb43
 800d758:	08009e75 	.word	0x08009e75
 800d75c:	0800d4b5 	.word	0x0800d4b5
 800d760:	0800eb3f 	.word	0x0800eb3f

0800d764 <__sflush_r>:
 800d764:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d76c:	0716      	lsls	r6, r2, #28
 800d76e:	4605      	mov	r5, r0
 800d770:	460c      	mov	r4, r1
 800d772:	d454      	bmi.n	800d81e <__sflush_r+0xba>
 800d774:	684b      	ldr	r3, [r1, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	dc02      	bgt.n	800d780 <__sflush_r+0x1c>
 800d77a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	dd48      	ble.n	800d812 <__sflush_r+0xae>
 800d780:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d782:	2e00      	cmp	r6, #0
 800d784:	d045      	beq.n	800d812 <__sflush_r+0xae>
 800d786:	2300      	movs	r3, #0
 800d788:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d78c:	682f      	ldr	r7, [r5, #0]
 800d78e:	6a21      	ldr	r1, [r4, #32]
 800d790:	602b      	str	r3, [r5, #0]
 800d792:	d030      	beq.n	800d7f6 <__sflush_r+0x92>
 800d794:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d796:	89a3      	ldrh	r3, [r4, #12]
 800d798:	0759      	lsls	r1, r3, #29
 800d79a:	d505      	bpl.n	800d7a8 <__sflush_r+0x44>
 800d79c:	6863      	ldr	r3, [r4, #4]
 800d79e:	1ad2      	subs	r2, r2, r3
 800d7a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7a2:	b10b      	cbz	r3, 800d7a8 <__sflush_r+0x44>
 800d7a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7a6:	1ad2      	subs	r2, r2, r3
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7ac:	6a21      	ldr	r1, [r4, #32]
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	47b0      	blx	r6
 800d7b2:	1c43      	adds	r3, r0, #1
 800d7b4:	89a3      	ldrh	r3, [r4, #12]
 800d7b6:	d106      	bne.n	800d7c6 <__sflush_r+0x62>
 800d7b8:	6829      	ldr	r1, [r5, #0]
 800d7ba:	291d      	cmp	r1, #29
 800d7bc:	d82b      	bhi.n	800d816 <__sflush_r+0xb2>
 800d7be:	4a2a      	ldr	r2, [pc, #168]	@ (800d868 <__sflush_r+0x104>)
 800d7c0:	410a      	asrs	r2, r1
 800d7c2:	07d6      	lsls	r6, r2, #31
 800d7c4:	d427      	bmi.n	800d816 <__sflush_r+0xb2>
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	6062      	str	r2, [r4, #4]
 800d7ca:	04d9      	lsls	r1, r3, #19
 800d7cc:	6922      	ldr	r2, [r4, #16]
 800d7ce:	6022      	str	r2, [r4, #0]
 800d7d0:	d504      	bpl.n	800d7dc <__sflush_r+0x78>
 800d7d2:	1c42      	adds	r2, r0, #1
 800d7d4:	d101      	bne.n	800d7da <__sflush_r+0x76>
 800d7d6:	682b      	ldr	r3, [r5, #0]
 800d7d8:	b903      	cbnz	r3, 800d7dc <__sflush_r+0x78>
 800d7da:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7de:	602f      	str	r7, [r5, #0]
 800d7e0:	b1b9      	cbz	r1, 800d812 <__sflush_r+0xae>
 800d7e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7e6:	4299      	cmp	r1, r3
 800d7e8:	d002      	beq.n	800d7f0 <__sflush_r+0x8c>
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	f7fe fa2c 	bl	800bc48 <_free_r>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7f4:	e00d      	b.n	800d812 <__sflush_r+0xae>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	47b0      	blx	r6
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	1c50      	adds	r0, r2, #1
 800d800:	d1c9      	bne.n	800d796 <__sflush_r+0x32>
 800d802:	682b      	ldr	r3, [r5, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d0c6      	beq.n	800d796 <__sflush_r+0x32>
 800d808:	2b1d      	cmp	r3, #29
 800d80a:	d001      	beq.n	800d810 <__sflush_r+0xac>
 800d80c:	2b16      	cmp	r3, #22
 800d80e:	d11e      	bne.n	800d84e <__sflush_r+0xea>
 800d810:	602f      	str	r7, [r5, #0]
 800d812:	2000      	movs	r0, #0
 800d814:	e022      	b.n	800d85c <__sflush_r+0xf8>
 800d816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d81a:	b21b      	sxth	r3, r3
 800d81c:	e01b      	b.n	800d856 <__sflush_r+0xf2>
 800d81e:	690f      	ldr	r7, [r1, #16]
 800d820:	2f00      	cmp	r7, #0
 800d822:	d0f6      	beq.n	800d812 <__sflush_r+0xae>
 800d824:	0793      	lsls	r3, r2, #30
 800d826:	680e      	ldr	r6, [r1, #0]
 800d828:	bf08      	it	eq
 800d82a:	694b      	ldreq	r3, [r1, #20]
 800d82c:	600f      	str	r7, [r1, #0]
 800d82e:	bf18      	it	ne
 800d830:	2300      	movne	r3, #0
 800d832:	eba6 0807 	sub.w	r8, r6, r7
 800d836:	608b      	str	r3, [r1, #8]
 800d838:	f1b8 0f00 	cmp.w	r8, #0
 800d83c:	dde9      	ble.n	800d812 <__sflush_r+0xae>
 800d83e:	6a21      	ldr	r1, [r4, #32]
 800d840:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d842:	4643      	mov	r3, r8
 800d844:	463a      	mov	r2, r7
 800d846:	4628      	mov	r0, r5
 800d848:	47b0      	blx	r6
 800d84a:	2800      	cmp	r0, #0
 800d84c:	dc08      	bgt.n	800d860 <__sflush_r+0xfc>
 800d84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d856:	81a3      	strh	r3, [r4, #12]
 800d858:	f04f 30ff 	mov.w	r0, #4294967295
 800d85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d860:	4407      	add	r7, r0
 800d862:	eba8 0800 	sub.w	r8, r8, r0
 800d866:	e7e7      	b.n	800d838 <__sflush_r+0xd4>
 800d868:	dfbffffe 	.word	0xdfbffffe

0800d86c <_fflush_r>:
 800d86c:	b538      	push	{r3, r4, r5, lr}
 800d86e:	690b      	ldr	r3, [r1, #16]
 800d870:	4605      	mov	r5, r0
 800d872:	460c      	mov	r4, r1
 800d874:	b913      	cbnz	r3, 800d87c <_fflush_r+0x10>
 800d876:	2500      	movs	r5, #0
 800d878:	4628      	mov	r0, r5
 800d87a:	bd38      	pop	{r3, r4, r5, pc}
 800d87c:	b118      	cbz	r0, 800d886 <_fflush_r+0x1a>
 800d87e:	6a03      	ldr	r3, [r0, #32]
 800d880:	b90b      	cbnz	r3, 800d886 <_fflush_r+0x1a>
 800d882:	f7fd f94f 	bl	800ab24 <__sinit>
 800d886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d0f3      	beq.n	800d876 <_fflush_r+0xa>
 800d88e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d890:	07d0      	lsls	r0, r2, #31
 800d892:	d404      	bmi.n	800d89e <_fflush_r+0x32>
 800d894:	0599      	lsls	r1, r3, #22
 800d896:	d402      	bmi.n	800d89e <_fflush_r+0x32>
 800d898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d89a:	f7fd fb52 	bl	800af42 <__retarget_lock_acquire_recursive>
 800d89e:	4628      	mov	r0, r5
 800d8a0:	4621      	mov	r1, r4
 800d8a2:	f7ff ff5f 	bl	800d764 <__sflush_r>
 800d8a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8a8:	07da      	lsls	r2, r3, #31
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	d4e4      	bmi.n	800d878 <_fflush_r+0xc>
 800d8ae:	89a3      	ldrh	r3, [r4, #12]
 800d8b0:	059b      	lsls	r3, r3, #22
 800d8b2:	d4e1      	bmi.n	800d878 <_fflush_r+0xc>
 800d8b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8b6:	f7fd fb45 	bl	800af44 <__retarget_lock_release_recursive>
 800d8ba:	e7dd      	b.n	800d878 <_fflush_r+0xc>

0800d8bc <fiprintf>:
 800d8bc:	b40e      	push	{r1, r2, r3}
 800d8be:	b503      	push	{r0, r1, lr}
 800d8c0:	4601      	mov	r1, r0
 800d8c2:	ab03      	add	r3, sp, #12
 800d8c4:	4805      	ldr	r0, [pc, #20]	@ (800d8dc <fiprintf+0x20>)
 800d8c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ca:	6800      	ldr	r0, [r0, #0]
 800d8cc:	9301      	str	r3, [sp, #4]
 800d8ce:	f000 fc15 	bl	800e0fc <_vfiprintf_r>
 800d8d2:	b002      	add	sp, #8
 800d8d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8d8:	b003      	add	sp, #12
 800d8da:	4770      	bx	lr
 800d8dc:	2000001c 	.word	0x2000001c

0800d8e0 <memmove>:
 800d8e0:	4288      	cmp	r0, r1
 800d8e2:	b510      	push	{r4, lr}
 800d8e4:	eb01 0402 	add.w	r4, r1, r2
 800d8e8:	d902      	bls.n	800d8f0 <memmove+0x10>
 800d8ea:	4284      	cmp	r4, r0
 800d8ec:	4623      	mov	r3, r4
 800d8ee:	d807      	bhi.n	800d900 <memmove+0x20>
 800d8f0:	1e43      	subs	r3, r0, #1
 800d8f2:	42a1      	cmp	r1, r4
 800d8f4:	d008      	beq.n	800d908 <memmove+0x28>
 800d8f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8fe:	e7f8      	b.n	800d8f2 <memmove+0x12>
 800d900:	4402      	add	r2, r0
 800d902:	4601      	mov	r1, r0
 800d904:	428a      	cmp	r2, r1
 800d906:	d100      	bne.n	800d90a <memmove+0x2a>
 800d908:	bd10      	pop	{r4, pc}
 800d90a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d90e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d912:	e7f7      	b.n	800d904 <memmove+0x24>

0800d914 <strncmp>:
 800d914:	b510      	push	{r4, lr}
 800d916:	b16a      	cbz	r2, 800d934 <strncmp+0x20>
 800d918:	3901      	subs	r1, #1
 800d91a:	1884      	adds	r4, r0, r2
 800d91c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d920:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d924:	429a      	cmp	r2, r3
 800d926:	d103      	bne.n	800d930 <strncmp+0x1c>
 800d928:	42a0      	cmp	r0, r4
 800d92a:	d001      	beq.n	800d930 <strncmp+0x1c>
 800d92c:	2a00      	cmp	r2, #0
 800d92e:	d1f5      	bne.n	800d91c <strncmp+0x8>
 800d930:	1ad0      	subs	r0, r2, r3
 800d932:	bd10      	pop	{r4, pc}
 800d934:	4610      	mov	r0, r2
 800d936:	e7fc      	b.n	800d932 <strncmp+0x1e>

0800d938 <_sbrk_r>:
 800d938:	b538      	push	{r3, r4, r5, lr}
 800d93a:	4d06      	ldr	r5, [pc, #24]	@ (800d954 <_sbrk_r+0x1c>)
 800d93c:	2300      	movs	r3, #0
 800d93e:	4604      	mov	r4, r0
 800d940:	4608      	mov	r0, r1
 800d942:	602b      	str	r3, [r5, #0]
 800d944:	f7f4 fd88 	bl	8002458 <_sbrk>
 800d948:	1c43      	adds	r3, r0, #1
 800d94a:	d102      	bne.n	800d952 <_sbrk_r+0x1a>
 800d94c:	682b      	ldr	r3, [r5, #0]
 800d94e:	b103      	cbz	r3, 800d952 <_sbrk_r+0x1a>
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	bd38      	pop	{r3, r4, r5, pc}
 800d954:	20004754 	.word	0x20004754

0800d958 <nan>:
 800d958:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d960 <nan+0x8>
 800d95c:	4770      	bx	lr
 800d95e:	bf00      	nop
 800d960:	00000000 	.word	0x00000000
 800d964:	7ff80000 	.word	0x7ff80000

0800d968 <abort>:
 800d968:	b508      	push	{r3, lr}
 800d96a:	2006      	movs	r0, #6
 800d96c:	f000 fd9a 	bl	800e4a4 <raise>
 800d970:	2001      	movs	r0, #1
 800d972:	f7f4 fcf9 	bl	8002368 <_exit>

0800d976 <_calloc_r>:
 800d976:	b570      	push	{r4, r5, r6, lr}
 800d978:	fba1 5402 	umull	r5, r4, r1, r2
 800d97c:	b93c      	cbnz	r4, 800d98e <_calloc_r+0x18>
 800d97e:	4629      	mov	r1, r5
 800d980:	f7fe f9d6 	bl	800bd30 <_malloc_r>
 800d984:	4606      	mov	r6, r0
 800d986:	b928      	cbnz	r0, 800d994 <_calloc_r+0x1e>
 800d988:	2600      	movs	r6, #0
 800d98a:	4630      	mov	r0, r6
 800d98c:	bd70      	pop	{r4, r5, r6, pc}
 800d98e:	220c      	movs	r2, #12
 800d990:	6002      	str	r2, [r0, #0]
 800d992:	e7f9      	b.n	800d988 <_calloc_r+0x12>
 800d994:	462a      	mov	r2, r5
 800d996:	4621      	mov	r1, r4
 800d998:	f7fd f991 	bl	800acbe <memset>
 800d99c:	e7f5      	b.n	800d98a <_calloc_r+0x14>

0800d99e <rshift>:
 800d99e:	6903      	ldr	r3, [r0, #16]
 800d9a0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d9a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9a8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d9ac:	f100 0414 	add.w	r4, r0, #20
 800d9b0:	dd45      	ble.n	800da3e <rshift+0xa0>
 800d9b2:	f011 011f 	ands.w	r1, r1, #31
 800d9b6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d9ba:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d9be:	d10c      	bne.n	800d9da <rshift+0x3c>
 800d9c0:	f100 0710 	add.w	r7, r0, #16
 800d9c4:	4629      	mov	r1, r5
 800d9c6:	42b1      	cmp	r1, r6
 800d9c8:	d334      	bcc.n	800da34 <rshift+0x96>
 800d9ca:	1a9b      	subs	r3, r3, r2
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	1eea      	subs	r2, r5, #3
 800d9d0:	4296      	cmp	r6, r2
 800d9d2:	bf38      	it	cc
 800d9d4:	2300      	movcc	r3, #0
 800d9d6:	4423      	add	r3, r4
 800d9d8:	e015      	b.n	800da06 <rshift+0x68>
 800d9da:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d9de:	f1c1 0820 	rsb	r8, r1, #32
 800d9e2:	40cf      	lsrs	r7, r1
 800d9e4:	f105 0e04 	add.w	lr, r5, #4
 800d9e8:	46a1      	mov	r9, r4
 800d9ea:	4576      	cmp	r6, lr
 800d9ec:	46f4      	mov	ip, lr
 800d9ee:	d815      	bhi.n	800da1c <rshift+0x7e>
 800d9f0:	1a9a      	subs	r2, r3, r2
 800d9f2:	0092      	lsls	r2, r2, #2
 800d9f4:	3a04      	subs	r2, #4
 800d9f6:	3501      	adds	r5, #1
 800d9f8:	42ae      	cmp	r6, r5
 800d9fa:	bf38      	it	cc
 800d9fc:	2200      	movcc	r2, #0
 800d9fe:	18a3      	adds	r3, r4, r2
 800da00:	50a7      	str	r7, [r4, r2]
 800da02:	b107      	cbz	r7, 800da06 <rshift+0x68>
 800da04:	3304      	adds	r3, #4
 800da06:	1b1a      	subs	r2, r3, r4
 800da08:	42a3      	cmp	r3, r4
 800da0a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da0e:	bf08      	it	eq
 800da10:	2300      	moveq	r3, #0
 800da12:	6102      	str	r2, [r0, #16]
 800da14:	bf08      	it	eq
 800da16:	6143      	streq	r3, [r0, #20]
 800da18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da1c:	f8dc c000 	ldr.w	ip, [ip]
 800da20:	fa0c fc08 	lsl.w	ip, ip, r8
 800da24:	ea4c 0707 	orr.w	r7, ip, r7
 800da28:	f849 7b04 	str.w	r7, [r9], #4
 800da2c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da30:	40cf      	lsrs	r7, r1
 800da32:	e7da      	b.n	800d9ea <rshift+0x4c>
 800da34:	f851 cb04 	ldr.w	ip, [r1], #4
 800da38:	f847 cf04 	str.w	ip, [r7, #4]!
 800da3c:	e7c3      	b.n	800d9c6 <rshift+0x28>
 800da3e:	4623      	mov	r3, r4
 800da40:	e7e1      	b.n	800da06 <rshift+0x68>

0800da42 <__hexdig_fun>:
 800da42:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800da46:	2b09      	cmp	r3, #9
 800da48:	d802      	bhi.n	800da50 <__hexdig_fun+0xe>
 800da4a:	3820      	subs	r0, #32
 800da4c:	b2c0      	uxtb	r0, r0
 800da4e:	4770      	bx	lr
 800da50:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800da54:	2b05      	cmp	r3, #5
 800da56:	d801      	bhi.n	800da5c <__hexdig_fun+0x1a>
 800da58:	3847      	subs	r0, #71	@ 0x47
 800da5a:	e7f7      	b.n	800da4c <__hexdig_fun+0xa>
 800da5c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800da60:	2b05      	cmp	r3, #5
 800da62:	d801      	bhi.n	800da68 <__hexdig_fun+0x26>
 800da64:	3827      	subs	r0, #39	@ 0x27
 800da66:	e7f1      	b.n	800da4c <__hexdig_fun+0xa>
 800da68:	2000      	movs	r0, #0
 800da6a:	4770      	bx	lr

0800da6c <__gethex>:
 800da6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da70:	b085      	sub	sp, #20
 800da72:	468a      	mov	sl, r1
 800da74:	9302      	str	r3, [sp, #8]
 800da76:	680b      	ldr	r3, [r1, #0]
 800da78:	9001      	str	r0, [sp, #4]
 800da7a:	4690      	mov	r8, r2
 800da7c:	1c9c      	adds	r4, r3, #2
 800da7e:	46a1      	mov	r9, r4
 800da80:	f814 0b01 	ldrb.w	r0, [r4], #1
 800da84:	2830      	cmp	r0, #48	@ 0x30
 800da86:	d0fa      	beq.n	800da7e <__gethex+0x12>
 800da88:	eba9 0303 	sub.w	r3, r9, r3
 800da8c:	f1a3 0b02 	sub.w	fp, r3, #2
 800da90:	f7ff ffd7 	bl	800da42 <__hexdig_fun>
 800da94:	4605      	mov	r5, r0
 800da96:	2800      	cmp	r0, #0
 800da98:	d168      	bne.n	800db6c <__gethex+0x100>
 800da9a:	49a0      	ldr	r1, [pc, #640]	@ (800dd1c <__gethex+0x2b0>)
 800da9c:	2201      	movs	r2, #1
 800da9e:	4648      	mov	r0, r9
 800daa0:	f7ff ff38 	bl	800d914 <strncmp>
 800daa4:	4607      	mov	r7, r0
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d167      	bne.n	800db7a <__gethex+0x10e>
 800daaa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800daae:	4626      	mov	r6, r4
 800dab0:	f7ff ffc7 	bl	800da42 <__hexdig_fun>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	d062      	beq.n	800db7e <__gethex+0x112>
 800dab8:	4623      	mov	r3, r4
 800daba:	7818      	ldrb	r0, [r3, #0]
 800dabc:	2830      	cmp	r0, #48	@ 0x30
 800dabe:	4699      	mov	r9, r3
 800dac0:	f103 0301 	add.w	r3, r3, #1
 800dac4:	d0f9      	beq.n	800daba <__gethex+0x4e>
 800dac6:	f7ff ffbc 	bl	800da42 <__hexdig_fun>
 800daca:	fab0 f580 	clz	r5, r0
 800dace:	096d      	lsrs	r5, r5, #5
 800dad0:	f04f 0b01 	mov.w	fp, #1
 800dad4:	464a      	mov	r2, r9
 800dad6:	4616      	mov	r6, r2
 800dad8:	3201      	adds	r2, #1
 800dada:	7830      	ldrb	r0, [r6, #0]
 800dadc:	f7ff ffb1 	bl	800da42 <__hexdig_fun>
 800dae0:	2800      	cmp	r0, #0
 800dae2:	d1f8      	bne.n	800dad6 <__gethex+0x6a>
 800dae4:	498d      	ldr	r1, [pc, #564]	@ (800dd1c <__gethex+0x2b0>)
 800dae6:	2201      	movs	r2, #1
 800dae8:	4630      	mov	r0, r6
 800daea:	f7ff ff13 	bl	800d914 <strncmp>
 800daee:	2800      	cmp	r0, #0
 800daf0:	d13f      	bne.n	800db72 <__gethex+0x106>
 800daf2:	b944      	cbnz	r4, 800db06 <__gethex+0x9a>
 800daf4:	1c74      	adds	r4, r6, #1
 800daf6:	4622      	mov	r2, r4
 800daf8:	4616      	mov	r6, r2
 800dafa:	3201      	adds	r2, #1
 800dafc:	7830      	ldrb	r0, [r6, #0]
 800dafe:	f7ff ffa0 	bl	800da42 <__hexdig_fun>
 800db02:	2800      	cmp	r0, #0
 800db04:	d1f8      	bne.n	800daf8 <__gethex+0x8c>
 800db06:	1ba4      	subs	r4, r4, r6
 800db08:	00a7      	lsls	r7, r4, #2
 800db0a:	7833      	ldrb	r3, [r6, #0]
 800db0c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800db10:	2b50      	cmp	r3, #80	@ 0x50
 800db12:	d13e      	bne.n	800db92 <__gethex+0x126>
 800db14:	7873      	ldrb	r3, [r6, #1]
 800db16:	2b2b      	cmp	r3, #43	@ 0x2b
 800db18:	d033      	beq.n	800db82 <__gethex+0x116>
 800db1a:	2b2d      	cmp	r3, #45	@ 0x2d
 800db1c:	d034      	beq.n	800db88 <__gethex+0x11c>
 800db1e:	1c71      	adds	r1, r6, #1
 800db20:	2400      	movs	r4, #0
 800db22:	7808      	ldrb	r0, [r1, #0]
 800db24:	f7ff ff8d 	bl	800da42 <__hexdig_fun>
 800db28:	1e43      	subs	r3, r0, #1
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	2b18      	cmp	r3, #24
 800db2e:	d830      	bhi.n	800db92 <__gethex+0x126>
 800db30:	f1a0 0210 	sub.w	r2, r0, #16
 800db34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800db38:	f7ff ff83 	bl	800da42 <__hexdig_fun>
 800db3c:	f100 3cff 	add.w	ip, r0, #4294967295
 800db40:	fa5f fc8c 	uxtb.w	ip, ip
 800db44:	f1bc 0f18 	cmp.w	ip, #24
 800db48:	f04f 030a 	mov.w	r3, #10
 800db4c:	d91e      	bls.n	800db8c <__gethex+0x120>
 800db4e:	b104      	cbz	r4, 800db52 <__gethex+0xe6>
 800db50:	4252      	negs	r2, r2
 800db52:	4417      	add	r7, r2
 800db54:	f8ca 1000 	str.w	r1, [sl]
 800db58:	b1ed      	cbz	r5, 800db96 <__gethex+0x12a>
 800db5a:	f1bb 0f00 	cmp.w	fp, #0
 800db5e:	bf0c      	ite	eq
 800db60:	2506      	moveq	r5, #6
 800db62:	2500      	movne	r5, #0
 800db64:	4628      	mov	r0, r5
 800db66:	b005      	add	sp, #20
 800db68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db6c:	2500      	movs	r5, #0
 800db6e:	462c      	mov	r4, r5
 800db70:	e7b0      	b.n	800dad4 <__gethex+0x68>
 800db72:	2c00      	cmp	r4, #0
 800db74:	d1c7      	bne.n	800db06 <__gethex+0x9a>
 800db76:	4627      	mov	r7, r4
 800db78:	e7c7      	b.n	800db0a <__gethex+0x9e>
 800db7a:	464e      	mov	r6, r9
 800db7c:	462f      	mov	r7, r5
 800db7e:	2501      	movs	r5, #1
 800db80:	e7c3      	b.n	800db0a <__gethex+0x9e>
 800db82:	2400      	movs	r4, #0
 800db84:	1cb1      	adds	r1, r6, #2
 800db86:	e7cc      	b.n	800db22 <__gethex+0xb6>
 800db88:	2401      	movs	r4, #1
 800db8a:	e7fb      	b.n	800db84 <__gethex+0x118>
 800db8c:	fb03 0002 	mla	r0, r3, r2, r0
 800db90:	e7ce      	b.n	800db30 <__gethex+0xc4>
 800db92:	4631      	mov	r1, r6
 800db94:	e7de      	b.n	800db54 <__gethex+0xe8>
 800db96:	eba6 0309 	sub.w	r3, r6, r9
 800db9a:	3b01      	subs	r3, #1
 800db9c:	4629      	mov	r1, r5
 800db9e:	2b07      	cmp	r3, #7
 800dba0:	dc0a      	bgt.n	800dbb8 <__gethex+0x14c>
 800dba2:	9801      	ldr	r0, [sp, #4]
 800dba4:	f7fe f950 	bl	800be48 <_Balloc>
 800dba8:	4604      	mov	r4, r0
 800dbaa:	b940      	cbnz	r0, 800dbbe <__gethex+0x152>
 800dbac:	4b5c      	ldr	r3, [pc, #368]	@ (800dd20 <__gethex+0x2b4>)
 800dbae:	4602      	mov	r2, r0
 800dbb0:	21e4      	movs	r1, #228	@ 0xe4
 800dbb2:	485c      	ldr	r0, [pc, #368]	@ (800dd24 <__gethex+0x2b8>)
 800dbb4:	f7fd f9dc 	bl	800af70 <__assert_func>
 800dbb8:	3101      	adds	r1, #1
 800dbba:	105b      	asrs	r3, r3, #1
 800dbbc:	e7ef      	b.n	800db9e <__gethex+0x132>
 800dbbe:	f100 0a14 	add.w	sl, r0, #20
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	4655      	mov	r5, sl
 800dbc6:	469b      	mov	fp, r3
 800dbc8:	45b1      	cmp	r9, r6
 800dbca:	d337      	bcc.n	800dc3c <__gethex+0x1d0>
 800dbcc:	f845 bb04 	str.w	fp, [r5], #4
 800dbd0:	eba5 050a 	sub.w	r5, r5, sl
 800dbd4:	10ad      	asrs	r5, r5, #2
 800dbd6:	6125      	str	r5, [r4, #16]
 800dbd8:	4658      	mov	r0, fp
 800dbda:	f7fe fa27 	bl	800c02c <__hi0bits>
 800dbde:	016d      	lsls	r5, r5, #5
 800dbe0:	f8d8 6000 	ldr.w	r6, [r8]
 800dbe4:	1a2d      	subs	r5, r5, r0
 800dbe6:	42b5      	cmp	r5, r6
 800dbe8:	dd54      	ble.n	800dc94 <__gethex+0x228>
 800dbea:	1bad      	subs	r5, r5, r6
 800dbec:	4629      	mov	r1, r5
 800dbee:	4620      	mov	r0, r4
 800dbf0:	f7fe fdbb 	bl	800c76a <__any_on>
 800dbf4:	4681      	mov	r9, r0
 800dbf6:	b178      	cbz	r0, 800dc18 <__gethex+0x1ac>
 800dbf8:	1e6b      	subs	r3, r5, #1
 800dbfa:	1159      	asrs	r1, r3, #5
 800dbfc:	f003 021f 	and.w	r2, r3, #31
 800dc00:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dc04:	f04f 0901 	mov.w	r9, #1
 800dc08:	fa09 f202 	lsl.w	r2, r9, r2
 800dc0c:	420a      	tst	r2, r1
 800dc0e:	d003      	beq.n	800dc18 <__gethex+0x1ac>
 800dc10:	454b      	cmp	r3, r9
 800dc12:	dc36      	bgt.n	800dc82 <__gethex+0x216>
 800dc14:	f04f 0902 	mov.w	r9, #2
 800dc18:	4629      	mov	r1, r5
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	f7ff febf 	bl	800d99e <rshift>
 800dc20:	442f      	add	r7, r5
 800dc22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc26:	42bb      	cmp	r3, r7
 800dc28:	da42      	bge.n	800dcb0 <__gethex+0x244>
 800dc2a:	9801      	ldr	r0, [sp, #4]
 800dc2c:	4621      	mov	r1, r4
 800dc2e:	f7fe f94b 	bl	800bec8 <_Bfree>
 800dc32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc34:	2300      	movs	r3, #0
 800dc36:	6013      	str	r3, [r2, #0]
 800dc38:	25a3      	movs	r5, #163	@ 0xa3
 800dc3a:	e793      	b.n	800db64 <__gethex+0xf8>
 800dc3c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dc40:	2a2e      	cmp	r2, #46	@ 0x2e
 800dc42:	d012      	beq.n	800dc6a <__gethex+0x1fe>
 800dc44:	2b20      	cmp	r3, #32
 800dc46:	d104      	bne.n	800dc52 <__gethex+0x1e6>
 800dc48:	f845 bb04 	str.w	fp, [r5], #4
 800dc4c:	f04f 0b00 	mov.w	fp, #0
 800dc50:	465b      	mov	r3, fp
 800dc52:	7830      	ldrb	r0, [r6, #0]
 800dc54:	9303      	str	r3, [sp, #12]
 800dc56:	f7ff fef4 	bl	800da42 <__hexdig_fun>
 800dc5a:	9b03      	ldr	r3, [sp, #12]
 800dc5c:	f000 000f 	and.w	r0, r0, #15
 800dc60:	4098      	lsls	r0, r3
 800dc62:	ea4b 0b00 	orr.w	fp, fp, r0
 800dc66:	3304      	adds	r3, #4
 800dc68:	e7ae      	b.n	800dbc8 <__gethex+0x15c>
 800dc6a:	45b1      	cmp	r9, r6
 800dc6c:	d8ea      	bhi.n	800dc44 <__gethex+0x1d8>
 800dc6e:	492b      	ldr	r1, [pc, #172]	@ (800dd1c <__gethex+0x2b0>)
 800dc70:	9303      	str	r3, [sp, #12]
 800dc72:	2201      	movs	r2, #1
 800dc74:	4630      	mov	r0, r6
 800dc76:	f7ff fe4d 	bl	800d914 <strncmp>
 800dc7a:	9b03      	ldr	r3, [sp, #12]
 800dc7c:	2800      	cmp	r0, #0
 800dc7e:	d1e1      	bne.n	800dc44 <__gethex+0x1d8>
 800dc80:	e7a2      	b.n	800dbc8 <__gethex+0x15c>
 800dc82:	1ea9      	subs	r1, r5, #2
 800dc84:	4620      	mov	r0, r4
 800dc86:	f7fe fd70 	bl	800c76a <__any_on>
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	d0c2      	beq.n	800dc14 <__gethex+0x1a8>
 800dc8e:	f04f 0903 	mov.w	r9, #3
 800dc92:	e7c1      	b.n	800dc18 <__gethex+0x1ac>
 800dc94:	da09      	bge.n	800dcaa <__gethex+0x23e>
 800dc96:	1b75      	subs	r5, r6, r5
 800dc98:	4621      	mov	r1, r4
 800dc9a:	9801      	ldr	r0, [sp, #4]
 800dc9c:	462a      	mov	r2, r5
 800dc9e:	f7fe fb2b 	bl	800c2f8 <__lshift>
 800dca2:	1b7f      	subs	r7, r7, r5
 800dca4:	4604      	mov	r4, r0
 800dca6:	f100 0a14 	add.w	sl, r0, #20
 800dcaa:	f04f 0900 	mov.w	r9, #0
 800dcae:	e7b8      	b.n	800dc22 <__gethex+0x1b6>
 800dcb0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dcb4:	42bd      	cmp	r5, r7
 800dcb6:	dd6f      	ble.n	800dd98 <__gethex+0x32c>
 800dcb8:	1bed      	subs	r5, r5, r7
 800dcba:	42ae      	cmp	r6, r5
 800dcbc:	dc34      	bgt.n	800dd28 <__gethex+0x2bc>
 800dcbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dcc2:	2b02      	cmp	r3, #2
 800dcc4:	d022      	beq.n	800dd0c <__gethex+0x2a0>
 800dcc6:	2b03      	cmp	r3, #3
 800dcc8:	d024      	beq.n	800dd14 <__gethex+0x2a8>
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d115      	bne.n	800dcfa <__gethex+0x28e>
 800dcce:	42ae      	cmp	r6, r5
 800dcd0:	d113      	bne.n	800dcfa <__gethex+0x28e>
 800dcd2:	2e01      	cmp	r6, #1
 800dcd4:	d10b      	bne.n	800dcee <__gethex+0x282>
 800dcd6:	9a02      	ldr	r2, [sp, #8]
 800dcd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dcdc:	6013      	str	r3, [r2, #0]
 800dcde:	2301      	movs	r3, #1
 800dce0:	6123      	str	r3, [r4, #16]
 800dce2:	f8ca 3000 	str.w	r3, [sl]
 800dce6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dce8:	2562      	movs	r5, #98	@ 0x62
 800dcea:	601c      	str	r4, [r3, #0]
 800dcec:	e73a      	b.n	800db64 <__gethex+0xf8>
 800dcee:	1e71      	subs	r1, r6, #1
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	f7fe fd3a 	bl	800c76a <__any_on>
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	d1ed      	bne.n	800dcd6 <__gethex+0x26a>
 800dcfa:	9801      	ldr	r0, [sp, #4]
 800dcfc:	4621      	mov	r1, r4
 800dcfe:	f7fe f8e3 	bl	800bec8 <_Bfree>
 800dd02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd04:	2300      	movs	r3, #0
 800dd06:	6013      	str	r3, [r2, #0]
 800dd08:	2550      	movs	r5, #80	@ 0x50
 800dd0a:	e72b      	b.n	800db64 <__gethex+0xf8>
 800dd0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d1f3      	bne.n	800dcfa <__gethex+0x28e>
 800dd12:	e7e0      	b.n	800dcd6 <__gethex+0x26a>
 800dd14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d1dd      	bne.n	800dcd6 <__gethex+0x26a>
 800dd1a:	e7ee      	b.n	800dcfa <__gethex+0x28e>
 800dd1c:	0800e9e0 	.word	0x0800e9e0
 800dd20:	0800e873 	.word	0x0800e873
 800dd24:	0800eb52 	.word	0x0800eb52
 800dd28:	1e6f      	subs	r7, r5, #1
 800dd2a:	f1b9 0f00 	cmp.w	r9, #0
 800dd2e:	d130      	bne.n	800dd92 <__gethex+0x326>
 800dd30:	b127      	cbz	r7, 800dd3c <__gethex+0x2d0>
 800dd32:	4639      	mov	r1, r7
 800dd34:	4620      	mov	r0, r4
 800dd36:	f7fe fd18 	bl	800c76a <__any_on>
 800dd3a:	4681      	mov	r9, r0
 800dd3c:	117a      	asrs	r2, r7, #5
 800dd3e:	2301      	movs	r3, #1
 800dd40:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dd44:	f007 071f 	and.w	r7, r7, #31
 800dd48:	40bb      	lsls	r3, r7
 800dd4a:	4213      	tst	r3, r2
 800dd4c:	4629      	mov	r1, r5
 800dd4e:	4620      	mov	r0, r4
 800dd50:	bf18      	it	ne
 800dd52:	f049 0902 	orrne.w	r9, r9, #2
 800dd56:	f7ff fe22 	bl	800d99e <rshift>
 800dd5a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dd5e:	1b76      	subs	r6, r6, r5
 800dd60:	2502      	movs	r5, #2
 800dd62:	f1b9 0f00 	cmp.w	r9, #0
 800dd66:	d047      	beq.n	800ddf8 <__gethex+0x38c>
 800dd68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd6c:	2b02      	cmp	r3, #2
 800dd6e:	d015      	beq.n	800dd9c <__gethex+0x330>
 800dd70:	2b03      	cmp	r3, #3
 800dd72:	d017      	beq.n	800dda4 <__gethex+0x338>
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d109      	bne.n	800dd8c <__gethex+0x320>
 800dd78:	f019 0f02 	tst.w	r9, #2
 800dd7c:	d006      	beq.n	800dd8c <__gethex+0x320>
 800dd7e:	f8da 3000 	ldr.w	r3, [sl]
 800dd82:	ea49 0903 	orr.w	r9, r9, r3
 800dd86:	f019 0f01 	tst.w	r9, #1
 800dd8a:	d10e      	bne.n	800ddaa <__gethex+0x33e>
 800dd8c:	f045 0510 	orr.w	r5, r5, #16
 800dd90:	e032      	b.n	800ddf8 <__gethex+0x38c>
 800dd92:	f04f 0901 	mov.w	r9, #1
 800dd96:	e7d1      	b.n	800dd3c <__gethex+0x2d0>
 800dd98:	2501      	movs	r5, #1
 800dd9a:	e7e2      	b.n	800dd62 <__gethex+0x2f6>
 800dd9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd9e:	f1c3 0301 	rsb	r3, r3, #1
 800dda2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dda4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d0f0      	beq.n	800dd8c <__gethex+0x320>
 800ddaa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ddae:	f104 0314 	add.w	r3, r4, #20
 800ddb2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ddb6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ddba:	f04f 0c00 	mov.w	ip, #0
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddc4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ddc8:	d01b      	beq.n	800de02 <__gethex+0x396>
 800ddca:	3201      	adds	r2, #1
 800ddcc:	6002      	str	r2, [r0, #0]
 800ddce:	2d02      	cmp	r5, #2
 800ddd0:	f104 0314 	add.w	r3, r4, #20
 800ddd4:	d13c      	bne.n	800de50 <__gethex+0x3e4>
 800ddd6:	f8d8 2000 	ldr.w	r2, [r8]
 800ddda:	3a01      	subs	r2, #1
 800dddc:	42b2      	cmp	r2, r6
 800ddde:	d109      	bne.n	800ddf4 <__gethex+0x388>
 800dde0:	1171      	asrs	r1, r6, #5
 800dde2:	2201      	movs	r2, #1
 800dde4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dde8:	f006 061f 	and.w	r6, r6, #31
 800ddec:	fa02 f606 	lsl.w	r6, r2, r6
 800ddf0:	421e      	tst	r6, r3
 800ddf2:	d13a      	bne.n	800de6a <__gethex+0x3fe>
 800ddf4:	f045 0520 	orr.w	r5, r5, #32
 800ddf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddfa:	601c      	str	r4, [r3, #0]
 800ddfc:	9b02      	ldr	r3, [sp, #8]
 800ddfe:	601f      	str	r7, [r3, #0]
 800de00:	e6b0      	b.n	800db64 <__gethex+0xf8>
 800de02:	4299      	cmp	r1, r3
 800de04:	f843 cc04 	str.w	ip, [r3, #-4]
 800de08:	d8d9      	bhi.n	800ddbe <__gethex+0x352>
 800de0a:	68a3      	ldr	r3, [r4, #8]
 800de0c:	459b      	cmp	fp, r3
 800de0e:	db17      	blt.n	800de40 <__gethex+0x3d4>
 800de10:	6861      	ldr	r1, [r4, #4]
 800de12:	9801      	ldr	r0, [sp, #4]
 800de14:	3101      	adds	r1, #1
 800de16:	f7fe f817 	bl	800be48 <_Balloc>
 800de1a:	4681      	mov	r9, r0
 800de1c:	b918      	cbnz	r0, 800de26 <__gethex+0x3ba>
 800de1e:	4b1a      	ldr	r3, [pc, #104]	@ (800de88 <__gethex+0x41c>)
 800de20:	4602      	mov	r2, r0
 800de22:	2184      	movs	r1, #132	@ 0x84
 800de24:	e6c5      	b.n	800dbb2 <__gethex+0x146>
 800de26:	6922      	ldr	r2, [r4, #16]
 800de28:	3202      	adds	r2, #2
 800de2a:	f104 010c 	add.w	r1, r4, #12
 800de2e:	0092      	lsls	r2, r2, #2
 800de30:	300c      	adds	r0, #12
 800de32:	f7fd f888 	bl	800af46 <memcpy>
 800de36:	4621      	mov	r1, r4
 800de38:	9801      	ldr	r0, [sp, #4]
 800de3a:	f7fe f845 	bl	800bec8 <_Bfree>
 800de3e:	464c      	mov	r4, r9
 800de40:	6923      	ldr	r3, [r4, #16]
 800de42:	1c5a      	adds	r2, r3, #1
 800de44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800de48:	6122      	str	r2, [r4, #16]
 800de4a:	2201      	movs	r2, #1
 800de4c:	615a      	str	r2, [r3, #20]
 800de4e:	e7be      	b.n	800ddce <__gethex+0x362>
 800de50:	6922      	ldr	r2, [r4, #16]
 800de52:	455a      	cmp	r2, fp
 800de54:	dd0b      	ble.n	800de6e <__gethex+0x402>
 800de56:	2101      	movs	r1, #1
 800de58:	4620      	mov	r0, r4
 800de5a:	f7ff fda0 	bl	800d99e <rshift>
 800de5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de62:	3701      	adds	r7, #1
 800de64:	42bb      	cmp	r3, r7
 800de66:	f6ff aee0 	blt.w	800dc2a <__gethex+0x1be>
 800de6a:	2501      	movs	r5, #1
 800de6c:	e7c2      	b.n	800ddf4 <__gethex+0x388>
 800de6e:	f016 061f 	ands.w	r6, r6, #31
 800de72:	d0fa      	beq.n	800de6a <__gethex+0x3fe>
 800de74:	4453      	add	r3, sl
 800de76:	f1c6 0620 	rsb	r6, r6, #32
 800de7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800de7e:	f7fe f8d5 	bl	800c02c <__hi0bits>
 800de82:	42b0      	cmp	r0, r6
 800de84:	dbe7      	blt.n	800de56 <__gethex+0x3ea>
 800de86:	e7f0      	b.n	800de6a <__gethex+0x3fe>
 800de88:	0800e873 	.word	0x0800e873

0800de8c <L_shift>:
 800de8c:	f1c2 0208 	rsb	r2, r2, #8
 800de90:	0092      	lsls	r2, r2, #2
 800de92:	b570      	push	{r4, r5, r6, lr}
 800de94:	f1c2 0620 	rsb	r6, r2, #32
 800de98:	6843      	ldr	r3, [r0, #4]
 800de9a:	6804      	ldr	r4, [r0, #0]
 800de9c:	fa03 f506 	lsl.w	r5, r3, r6
 800dea0:	432c      	orrs	r4, r5
 800dea2:	40d3      	lsrs	r3, r2
 800dea4:	6004      	str	r4, [r0, #0]
 800dea6:	f840 3f04 	str.w	r3, [r0, #4]!
 800deaa:	4288      	cmp	r0, r1
 800deac:	d3f4      	bcc.n	800de98 <L_shift+0xc>
 800deae:	bd70      	pop	{r4, r5, r6, pc}

0800deb0 <__match>:
 800deb0:	b530      	push	{r4, r5, lr}
 800deb2:	6803      	ldr	r3, [r0, #0]
 800deb4:	3301      	adds	r3, #1
 800deb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deba:	b914      	cbnz	r4, 800dec2 <__match+0x12>
 800debc:	6003      	str	r3, [r0, #0]
 800debe:	2001      	movs	r0, #1
 800dec0:	bd30      	pop	{r4, r5, pc}
 800dec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dec6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800deca:	2d19      	cmp	r5, #25
 800decc:	bf98      	it	ls
 800dece:	3220      	addls	r2, #32
 800ded0:	42a2      	cmp	r2, r4
 800ded2:	d0f0      	beq.n	800deb6 <__match+0x6>
 800ded4:	2000      	movs	r0, #0
 800ded6:	e7f3      	b.n	800dec0 <__match+0x10>

0800ded8 <__hexnan>:
 800ded8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dedc:	680b      	ldr	r3, [r1, #0]
 800dede:	6801      	ldr	r1, [r0, #0]
 800dee0:	115e      	asrs	r6, r3, #5
 800dee2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dee6:	f013 031f 	ands.w	r3, r3, #31
 800deea:	b087      	sub	sp, #28
 800deec:	bf18      	it	ne
 800deee:	3604      	addne	r6, #4
 800def0:	2500      	movs	r5, #0
 800def2:	1f37      	subs	r7, r6, #4
 800def4:	4682      	mov	sl, r0
 800def6:	4690      	mov	r8, r2
 800def8:	9301      	str	r3, [sp, #4]
 800defa:	f846 5c04 	str.w	r5, [r6, #-4]
 800defe:	46b9      	mov	r9, r7
 800df00:	463c      	mov	r4, r7
 800df02:	9502      	str	r5, [sp, #8]
 800df04:	46ab      	mov	fp, r5
 800df06:	784a      	ldrb	r2, [r1, #1]
 800df08:	1c4b      	adds	r3, r1, #1
 800df0a:	9303      	str	r3, [sp, #12]
 800df0c:	b342      	cbz	r2, 800df60 <__hexnan+0x88>
 800df0e:	4610      	mov	r0, r2
 800df10:	9105      	str	r1, [sp, #20]
 800df12:	9204      	str	r2, [sp, #16]
 800df14:	f7ff fd95 	bl	800da42 <__hexdig_fun>
 800df18:	2800      	cmp	r0, #0
 800df1a:	d151      	bne.n	800dfc0 <__hexnan+0xe8>
 800df1c:	9a04      	ldr	r2, [sp, #16]
 800df1e:	9905      	ldr	r1, [sp, #20]
 800df20:	2a20      	cmp	r2, #32
 800df22:	d818      	bhi.n	800df56 <__hexnan+0x7e>
 800df24:	9b02      	ldr	r3, [sp, #8]
 800df26:	459b      	cmp	fp, r3
 800df28:	dd13      	ble.n	800df52 <__hexnan+0x7a>
 800df2a:	454c      	cmp	r4, r9
 800df2c:	d206      	bcs.n	800df3c <__hexnan+0x64>
 800df2e:	2d07      	cmp	r5, #7
 800df30:	dc04      	bgt.n	800df3c <__hexnan+0x64>
 800df32:	462a      	mov	r2, r5
 800df34:	4649      	mov	r1, r9
 800df36:	4620      	mov	r0, r4
 800df38:	f7ff ffa8 	bl	800de8c <L_shift>
 800df3c:	4544      	cmp	r4, r8
 800df3e:	d952      	bls.n	800dfe6 <__hexnan+0x10e>
 800df40:	2300      	movs	r3, #0
 800df42:	f1a4 0904 	sub.w	r9, r4, #4
 800df46:	f844 3c04 	str.w	r3, [r4, #-4]
 800df4a:	f8cd b008 	str.w	fp, [sp, #8]
 800df4e:	464c      	mov	r4, r9
 800df50:	461d      	mov	r5, r3
 800df52:	9903      	ldr	r1, [sp, #12]
 800df54:	e7d7      	b.n	800df06 <__hexnan+0x2e>
 800df56:	2a29      	cmp	r2, #41	@ 0x29
 800df58:	d157      	bne.n	800e00a <__hexnan+0x132>
 800df5a:	3102      	adds	r1, #2
 800df5c:	f8ca 1000 	str.w	r1, [sl]
 800df60:	f1bb 0f00 	cmp.w	fp, #0
 800df64:	d051      	beq.n	800e00a <__hexnan+0x132>
 800df66:	454c      	cmp	r4, r9
 800df68:	d206      	bcs.n	800df78 <__hexnan+0xa0>
 800df6a:	2d07      	cmp	r5, #7
 800df6c:	dc04      	bgt.n	800df78 <__hexnan+0xa0>
 800df6e:	462a      	mov	r2, r5
 800df70:	4649      	mov	r1, r9
 800df72:	4620      	mov	r0, r4
 800df74:	f7ff ff8a 	bl	800de8c <L_shift>
 800df78:	4544      	cmp	r4, r8
 800df7a:	d936      	bls.n	800dfea <__hexnan+0x112>
 800df7c:	f1a8 0204 	sub.w	r2, r8, #4
 800df80:	4623      	mov	r3, r4
 800df82:	f853 1b04 	ldr.w	r1, [r3], #4
 800df86:	f842 1f04 	str.w	r1, [r2, #4]!
 800df8a:	429f      	cmp	r7, r3
 800df8c:	d2f9      	bcs.n	800df82 <__hexnan+0xaa>
 800df8e:	1b3b      	subs	r3, r7, r4
 800df90:	f023 0303 	bic.w	r3, r3, #3
 800df94:	3304      	adds	r3, #4
 800df96:	3401      	adds	r4, #1
 800df98:	3e03      	subs	r6, #3
 800df9a:	42b4      	cmp	r4, r6
 800df9c:	bf88      	it	hi
 800df9e:	2304      	movhi	r3, #4
 800dfa0:	4443      	add	r3, r8
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f843 2b04 	str.w	r2, [r3], #4
 800dfa8:	429f      	cmp	r7, r3
 800dfaa:	d2fb      	bcs.n	800dfa4 <__hexnan+0xcc>
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	b91b      	cbnz	r3, 800dfb8 <__hexnan+0xe0>
 800dfb0:	4547      	cmp	r7, r8
 800dfb2:	d128      	bne.n	800e006 <__hexnan+0x12e>
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	603b      	str	r3, [r7, #0]
 800dfb8:	2005      	movs	r0, #5
 800dfba:	b007      	add	sp, #28
 800dfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc0:	3501      	adds	r5, #1
 800dfc2:	2d08      	cmp	r5, #8
 800dfc4:	f10b 0b01 	add.w	fp, fp, #1
 800dfc8:	dd06      	ble.n	800dfd8 <__hexnan+0x100>
 800dfca:	4544      	cmp	r4, r8
 800dfcc:	d9c1      	bls.n	800df52 <__hexnan+0x7a>
 800dfce:	2300      	movs	r3, #0
 800dfd0:	f844 3c04 	str.w	r3, [r4, #-4]
 800dfd4:	2501      	movs	r5, #1
 800dfd6:	3c04      	subs	r4, #4
 800dfd8:	6822      	ldr	r2, [r4, #0]
 800dfda:	f000 000f 	and.w	r0, r0, #15
 800dfde:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dfe2:	6020      	str	r0, [r4, #0]
 800dfe4:	e7b5      	b.n	800df52 <__hexnan+0x7a>
 800dfe6:	2508      	movs	r5, #8
 800dfe8:	e7b3      	b.n	800df52 <__hexnan+0x7a>
 800dfea:	9b01      	ldr	r3, [sp, #4]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d0dd      	beq.n	800dfac <__hexnan+0xd4>
 800dff0:	f1c3 0320 	rsb	r3, r3, #32
 800dff4:	f04f 32ff 	mov.w	r2, #4294967295
 800dff8:	40da      	lsrs	r2, r3
 800dffa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dffe:	4013      	ands	r3, r2
 800e000:	f846 3c04 	str.w	r3, [r6, #-4]
 800e004:	e7d2      	b.n	800dfac <__hexnan+0xd4>
 800e006:	3f04      	subs	r7, #4
 800e008:	e7d0      	b.n	800dfac <__hexnan+0xd4>
 800e00a:	2004      	movs	r0, #4
 800e00c:	e7d5      	b.n	800dfba <__hexnan+0xe2>

0800e00e <__ascii_mbtowc>:
 800e00e:	b082      	sub	sp, #8
 800e010:	b901      	cbnz	r1, 800e014 <__ascii_mbtowc+0x6>
 800e012:	a901      	add	r1, sp, #4
 800e014:	b142      	cbz	r2, 800e028 <__ascii_mbtowc+0x1a>
 800e016:	b14b      	cbz	r3, 800e02c <__ascii_mbtowc+0x1e>
 800e018:	7813      	ldrb	r3, [r2, #0]
 800e01a:	600b      	str	r3, [r1, #0]
 800e01c:	7812      	ldrb	r2, [r2, #0]
 800e01e:	1e10      	subs	r0, r2, #0
 800e020:	bf18      	it	ne
 800e022:	2001      	movne	r0, #1
 800e024:	b002      	add	sp, #8
 800e026:	4770      	bx	lr
 800e028:	4610      	mov	r0, r2
 800e02a:	e7fb      	b.n	800e024 <__ascii_mbtowc+0x16>
 800e02c:	f06f 0001 	mvn.w	r0, #1
 800e030:	e7f8      	b.n	800e024 <__ascii_mbtowc+0x16>

0800e032 <_realloc_r>:
 800e032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e036:	4680      	mov	r8, r0
 800e038:	4615      	mov	r5, r2
 800e03a:	460c      	mov	r4, r1
 800e03c:	b921      	cbnz	r1, 800e048 <_realloc_r+0x16>
 800e03e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e042:	4611      	mov	r1, r2
 800e044:	f7fd be74 	b.w	800bd30 <_malloc_r>
 800e048:	b92a      	cbnz	r2, 800e056 <_realloc_r+0x24>
 800e04a:	f7fd fdfd 	bl	800bc48 <_free_r>
 800e04e:	2400      	movs	r4, #0
 800e050:	4620      	mov	r0, r4
 800e052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e056:	f000 fa41 	bl	800e4dc <_malloc_usable_size_r>
 800e05a:	4285      	cmp	r5, r0
 800e05c:	4606      	mov	r6, r0
 800e05e:	d802      	bhi.n	800e066 <_realloc_r+0x34>
 800e060:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e064:	d8f4      	bhi.n	800e050 <_realloc_r+0x1e>
 800e066:	4629      	mov	r1, r5
 800e068:	4640      	mov	r0, r8
 800e06a:	f7fd fe61 	bl	800bd30 <_malloc_r>
 800e06e:	4607      	mov	r7, r0
 800e070:	2800      	cmp	r0, #0
 800e072:	d0ec      	beq.n	800e04e <_realloc_r+0x1c>
 800e074:	42b5      	cmp	r5, r6
 800e076:	462a      	mov	r2, r5
 800e078:	4621      	mov	r1, r4
 800e07a:	bf28      	it	cs
 800e07c:	4632      	movcs	r2, r6
 800e07e:	f7fc ff62 	bl	800af46 <memcpy>
 800e082:	4621      	mov	r1, r4
 800e084:	4640      	mov	r0, r8
 800e086:	f7fd fddf 	bl	800bc48 <_free_r>
 800e08a:	463c      	mov	r4, r7
 800e08c:	e7e0      	b.n	800e050 <_realloc_r+0x1e>

0800e08e <__ascii_wctomb>:
 800e08e:	4603      	mov	r3, r0
 800e090:	4608      	mov	r0, r1
 800e092:	b141      	cbz	r1, 800e0a6 <__ascii_wctomb+0x18>
 800e094:	2aff      	cmp	r2, #255	@ 0xff
 800e096:	d904      	bls.n	800e0a2 <__ascii_wctomb+0x14>
 800e098:	228a      	movs	r2, #138	@ 0x8a
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a0:	4770      	bx	lr
 800e0a2:	700a      	strb	r2, [r1, #0]
 800e0a4:	2001      	movs	r0, #1
 800e0a6:	4770      	bx	lr

0800e0a8 <__sfputc_r>:
 800e0a8:	6893      	ldr	r3, [r2, #8]
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	b410      	push	{r4}
 800e0b0:	6093      	str	r3, [r2, #8]
 800e0b2:	da08      	bge.n	800e0c6 <__sfputc_r+0x1e>
 800e0b4:	6994      	ldr	r4, [r2, #24]
 800e0b6:	42a3      	cmp	r3, r4
 800e0b8:	db01      	blt.n	800e0be <__sfputc_r+0x16>
 800e0ba:	290a      	cmp	r1, #10
 800e0bc:	d103      	bne.n	800e0c6 <__sfputc_r+0x1e>
 800e0be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0c2:	f000 b933 	b.w	800e32c <__swbuf_r>
 800e0c6:	6813      	ldr	r3, [r2, #0]
 800e0c8:	1c58      	adds	r0, r3, #1
 800e0ca:	6010      	str	r0, [r2, #0]
 800e0cc:	7019      	strb	r1, [r3, #0]
 800e0ce:	4608      	mov	r0, r1
 800e0d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0d4:	4770      	bx	lr

0800e0d6 <__sfputs_r>:
 800e0d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0d8:	4606      	mov	r6, r0
 800e0da:	460f      	mov	r7, r1
 800e0dc:	4614      	mov	r4, r2
 800e0de:	18d5      	adds	r5, r2, r3
 800e0e0:	42ac      	cmp	r4, r5
 800e0e2:	d101      	bne.n	800e0e8 <__sfputs_r+0x12>
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	e007      	b.n	800e0f8 <__sfputs_r+0x22>
 800e0e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0ec:	463a      	mov	r2, r7
 800e0ee:	4630      	mov	r0, r6
 800e0f0:	f7ff ffda 	bl	800e0a8 <__sfputc_r>
 800e0f4:	1c43      	adds	r3, r0, #1
 800e0f6:	d1f3      	bne.n	800e0e0 <__sfputs_r+0xa>
 800e0f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e0fc <_vfiprintf_r>:
 800e0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e100:	460d      	mov	r5, r1
 800e102:	b09d      	sub	sp, #116	@ 0x74
 800e104:	4614      	mov	r4, r2
 800e106:	4698      	mov	r8, r3
 800e108:	4606      	mov	r6, r0
 800e10a:	b118      	cbz	r0, 800e114 <_vfiprintf_r+0x18>
 800e10c:	6a03      	ldr	r3, [r0, #32]
 800e10e:	b90b      	cbnz	r3, 800e114 <_vfiprintf_r+0x18>
 800e110:	f7fc fd08 	bl	800ab24 <__sinit>
 800e114:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e116:	07d9      	lsls	r1, r3, #31
 800e118:	d405      	bmi.n	800e126 <_vfiprintf_r+0x2a>
 800e11a:	89ab      	ldrh	r3, [r5, #12]
 800e11c:	059a      	lsls	r2, r3, #22
 800e11e:	d402      	bmi.n	800e126 <_vfiprintf_r+0x2a>
 800e120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e122:	f7fc ff0e 	bl	800af42 <__retarget_lock_acquire_recursive>
 800e126:	89ab      	ldrh	r3, [r5, #12]
 800e128:	071b      	lsls	r3, r3, #28
 800e12a:	d501      	bpl.n	800e130 <_vfiprintf_r+0x34>
 800e12c:	692b      	ldr	r3, [r5, #16]
 800e12e:	b99b      	cbnz	r3, 800e158 <_vfiprintf_r+0x5c>
 800e130:	4629      	mov	r1, r5
 800e132:	4630      	mov	r0, r6
 800e134:	f000 f938 	bl	800e3a8 <__swsetup_r>
 800e138:	b170      	cbz	r0, 800e158 <_vfiprintf_r+0x5c>
 800e13a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e13c:	07dc      	lsls	r4, r3, #31
 800e13e:	d504      	bpl.n	800e14a <_vfiprintf_r+0x4e>
 800e140:	f04f 30ff 	mov.w	r0, #4294967295
 800e144:	b01d      	add	sp, #116	@ 0x74
 800e146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e14a:	89ab      	ldrh	r3, [r5, #12]
 800e14c:	0598      	lsls	r0, r3, #22
 800e14e:	d4f7      	bmi.n	800e140 <_vfiprintf_r+0x44>
 800e150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e152:	f7fc fef7 	bl	800af44 <__retarget_lock_release_recursive>
 800e156:	e7f3      	b.n	800e140 <_vfiprintf_r+0x44>
 800e158:	2300      	movs	r3, #0
 800e15a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e15c:	2320      	movs	r3, #32
 800e15e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e162:	f8cd 800c 	str.w	r8, [sp, #12]
 800e166:	2330      	movs	r3, #48	@ 0x30
 800e168:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e318 <_vfiprintf_r+0x21c>
 800e16c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e170:	f04f 0901 	mov.w	r9, #1
 800e174:	4623      	mov	r3, r4
 800e176:	469a      	mov	sl, r3
 800e178:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e17c:	b10a      	cbz	r2, 800e182 <_vfiprintf_r+0x86>
 800e17e:	2a25      	cmp	r2, #37	@ 0x25
 800e180:	d1f9      	bne.n	800e176 <_vfiprintf_r+0x7a>
 800e182:	ebba 0b04 	subs.w	fp, sl, r4
 800e186:	d00b      	beq.n	800e1a0 <_vfiprintf_r+0xa4>
 800e188:	465b      	mov	r3, fp
 800e18a:	4622      	mov	r2, r4
 800e18c:	4629      	mov	r1, r5
 800e18e:	4630      	mov	r0, r6
 800e190:	f7ff ffa1 	bl	800e0d6 <__sfputs_r>
 800e194:	3001      	adds	r0, #1
 800e196:	f000 80a7 	beq.w	800e2e8 <_vfiprintf_r+0x1ec>
 800e19a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e19c:	445a      	add	r2, fp
 800e19e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1a0:	f89a 3000 	ldrb.w	r3, [sl]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	f000 809f 	beq.w	800e2e8 <_vfiprintf_r+0x1ec>
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e1b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1b4:	f10a 0a01 	add.w	sl, sl, #1
 800e1b8:	9304      	str	r3, [sp, #16]
 800e1ba:	9307      	str	r3, [sp, #28]
 800e1bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e1c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1c2:	4654      	mov	r4, sl
 800e1c4:	2205      	movs	r2, #5
 800e1c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1ca:	4853      	ldr	r0, [pc, #332]	@ (800e318 <_vfiprintf_r+0x21c>)
 800e1cc:	f7f2 f808 	bl	80001e0 <memchr>
 800e1d0:	9a04      	ldr	r2, [sp, #16]
 800e1d2:	b9d8      	cbnz	r0, 800e20c <_vfiprintf_r+0x110>
 800e1d4:	06d1      	lsls	r1, r2, #27
 800e1d6:	bf44      	itt	mi
 800e1d8:	2320      	movmi	r3, #32
 800e1da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1de:	0713      	lsls	r3, r2, #28
 800e1e0:	bf44      	itt	mi
 800e1e2:	232b      	movmi	r3, #43	@ 0x2b
 800e1e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1e8:	f89a 3000 	ldrb.w	r3, [sl]
 800e1ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1ee:	d015      	beq.n	800e21c <_vfiprintf_r+0x120>
 800e1f0:	9a07      	ldr	r2, [sp, #28]
 800e1f2:	4654      	mov	r4, sl
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	f04f 0c0a 	mov.w	ip, #10
 800e1fa:	4621      	mov	r1, r4
 800e1fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e200:	3b30      	subs	r3, #48	@ 0x30
 800e202:	2b09      	cmp	r3, #9
 800e204:	d94b      	bls.n	800e29e <_vfiprintf_r+0x1a2>
 800e206:	b1b0      	cbz	r0, 800e236 <_vfiprintf_r+0x13a>
 800e208:	9207      	str	r2, [sp, #28]
 800e20a:	e014      	b.n	800e236 <_vfiprintf_r+0x13a>
 800e20c:	eba0 0308 	sub.w	r3, r0, r8
 800e210:	fa09 f303 	lsl.w	r3, r9, r3
 800e214:	4313      	orrs	r3, r2
 800e216:	9304      	str	r3, [sp, #16]
 800e218:	46a2      	mov	sl, r4
 800e21a:	e7d2      	b.n	800e1c2 <_vfiprintf_r+0xc6>
 800e21c:	9b03      	ldr	r3, [sp, #12]
 800e21e:	1d19      	adds	r1, r3, #4
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	9103      	str	r1, [sp, #12]
 800e224:	2b00      	cmp	r3, #0
 800e226:	bfbb      	ittet	lt
 800e228:	425b      	neglt	r3, r3
 800e22a:	f042 0202 	orrlt.w	r2, r2, #2
 800e22e:	9307      	strge	r3, [sp, #28]
 800e230:	9307      	strlt	r3, [sp, #28]
 800e232:	bfb8      	it	lt
 800e234:	9204      	strlt	r2, [sp, #16]
 800e236:	7823      	ldrb	r3, [r4, #0]
 800e238:	2b2e      	cmp	r3, #46	@ 0x2e
 800e23a:	d10a      	bne.n	800e252 <_vfiprintf_r+0x156>
 800e23c:	7863      	ldrb	r3, [r4, #1]
 800e23e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e240:	d132      	bne.n	800e2a8 <_vfiprintf_r+0x1ac>
 800e242:	9b03      	ldr	r3, [sp, #12]
 800e244:	1d1a      	adds	r2, r3, #4
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	9203      	str	r2, [sp, #12]
 800e24a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e24e:	3402      	adds	r4, #2
 800e250:	9305      	str	r3, [sp, #20]
 800e252:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e328 <_vfiprintf_r+0x22c>
 800e256:	7821      	ldrb	r1, [r4, #0]
 800e258:	2203      	movs	r2, #3
 800e25a:	4650      	mov	r0, sl
 800e25c:	f7f1 ffc0 	bl	80001e0 <memchr>
 800e260:	b138      	cbz	r0, 800e272 <_vfiprintf_r+0x176>
 800e262:	9b04      	ldr	r3, [sp, #16]
 800e264:	eba0 000a 	sub.w	r0, r0, sl
 800e268:	2240      	movs	r2, #64	@ 0x40
 800e26a:	4082      	lsls	r2, r0
 800e26c:	4313      	orrs	r3, r2
 800e26e:	3401      	adds	r4, #1
 800e270:	9304      	str	r3, [sp, #16]
 800e272:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e276:	4829      	ldr	r0, [pc, #164]	@ (800e31c <_vfiprintf_r+0x220>)
 800e278:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e27c:	2206      	movs	r2, #6
 800e27e:	f7f1 ffaf 	bl	80001e0 <memchr>
 800e282:	2800      	cmp	r0, #0
 800e284:	d03f      	beq.n	800e306 <_vfiprintf_r+0x20a>
 800e286:	4b26      	ldr	r3, [pc, #152]	@ (800e320 <_vfiprintf_r+0x224>)
 800e288:	bb1b      	cbnz	r3, 800e2d2 <_vfiprintf_r+0x1d6>
 800e28a:	9b03      	ldr	r3, [sp, #12]
 800e28c:	3307      	adds	r3, #7
 800e28e:	f023 0307 	bic.w	r3, r3, #7
 800e292:	3308      	adds	r3, #8
 800e294:	9303      	str	r3, [sp, #12]
 800e296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e298:	443b      	add	r3, r7
 800e29a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e29c:	e76a      	b.n	800e174 <_vfiprintf_r+0x78>
 800e29e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2a2:	460c      	mov	r4, r1
 800e2a4:	2001      	movs	r0, #1
 800e2a6:	e7a8      	b.n	800e1fa <_vfiprintf_r+0xfe>
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	3401      	adds	r4, #1
 800e2ac:	9305      	str	r3, [sp, #20]
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	f04f 0c0a 	mov.w	ip, #10
 800e2b4:	4620      	mov	r0, r4
 800e2b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2ba:	3a30      	subs	r2, #48	@ 0x30
 800e2bc:	2a09      	cmp	r2, #9
 800e2be:	d903      	bls.n	800e2c8 <_vfiprintf_r+0x1cc>
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d0c6      	beq.n	800e252 <_vfiprintf_r+0x156>
 800e2c4:	9105      	str	r1, [sp, #20]
 800e2c6:	e7c4      	b.n	800e252 <_vfiprintf_r+0x156>
 800e2c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	e7f0      	b.n	800e2b4 <_vfiprintf_r+0x1b8>
 800e2d2:	ab03      	add	r3, sp, #12
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	462a      	mov	r2, r5
 800e2d8:	4b12      	ldr	r3, [pc, #72]	@ (800e324 <_vfiprintf_r+0x228>)
 800e2da:	a904      	add	r1, sp, #16
 800e2dc:	4630      	mov	r0, r6
 800e2de:	f7fb fdc9 	bl	8009e74 <_printf_float>
 800e2e2:	4607      	mov	r7, r0
 800e2e4:	1c78      	adds	r0, r7, #1
 800e2e6:	d1d6      	bne.n	800e296 <_vfiprintf_r+0x19a>
 800e2e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2ea:	07d9      	lsls	r1, r3, #31
 800e2ec:	d405      	bmi.n	800e2fa <_vfiprintf_r+0x1fe>
 800e2ee:	89ab      	ldrh	r3, [r5, #12]
 800e2f0:	059a      	lsls	r2, r3, #22
 800e2f2:	d402      	bmi.n	800e2fa <_vfiprintf_r+0x1fe>
 800e2f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2f6:	f7fc fe25 	bl	800af44 <__retarget_lock_release_recursive>
 800e2fa:	89ab      	ldrh	r3, [r5, #12]
 800e2fc:	065b      	lsls	r3, r3, #25
 800e2fe:	f53f af1f 	bmi.w	800e140 <_vfiprintf_r+0x44>
 800e302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e304:	e71e      	b.n	800e144 <_vfiprintf_r+0x48>
 800e306:	ab03      	add	r3, sp, #12
 800e308:	9300      	str	r3, [sp, #0]
 800e30a:	462a      	mov	r2, r5
 800e30c:	4b05      	ldr	r3, [pc, #20]	@ (800e324 <_vfiprintf_r+0x228>)
 800e30e:	a904      	add	r1, sp, #16
 800e310:	4630      	mov	r0, r6
 800e312:	f7fc f847 	bl	800a3a4 <_printf_i>
 800e316:	e7e4      	b.n	800e2e2 <_vfiprintf_r+0x1e6>
 800e318:	0800eb39 	.word	0x0800eb39
 800e31c:	0800eb43 	.word	0x0800eb43
 800e320:	08009e75 	.word	0x08009e75
 800e324:	0800e0d7 	.word	0x0800e0d7
 800e328:	0800eb3f 	.word	0x0800eb3f

0800e32c <__swbuf_r>:
 800e32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e32e:	460e      	mov	r6, r1
 800e330:	4614      	mov	r4, r2
 800e332:	4605      	mov	r5, r0
 800e334:	b118      	cbz	r0, 800e33e <__swbuf_r+0x12>
 800e336:	6a03      	ldr	r3, [r0, #32]
 800e338:	b90b      	cbnz	r3, 800e33e <__swbuf_r+0x12>
 800e33a:	f7fc fbf3 	bl	800ab24 <__sinit>
 800e33e:	69a3      	ldr	r3, [r4, #24]
 800e340:	60a3      	str	r3, [r4, #8]
 800e342:	89a3      	ldrh	r3, [r4, #12]
 800e344:	071a      	lsls	r2, r3, #28
 800e346:	d501      	bpl.n	800e34c <__swbuf_r+0x20>
 800e348:	6923      	ldr	r3, [r4, #16]
 800e34a:	b943      	cbnz	r3, 800e35e <__swbuf_r+0x32>
 800e34c:	4621      	mov	r1, r4
 800e34e:	4628      	mov	r0, r5
 800e350:	f000 f82a 	bl	800e3a8 <__swsetup_r>
 800e354:	b118      	cbz	r0, 800e35e <__swbuf_r+0x32>
 800e356:	f04f 37ff 	mov.w	r7, #4294967295
 800e35a:	4638      	mov	r0, r7
 800e35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e35e:	6823      	ldr	r3, [r4, #0]
 800e360:	6922      	ldr	r2, [r4, #16]
 800e362:	1a98      	subs	r0, r3, r2
 800e364:	6963      	ldr	r3, [r4, #20]
 800e366:	b2f6      	uxtb	r6, r6
 800e368:	4283      	cmp	r3, r0
 800e36a:	4637      	mov	r7, r6
 800e36c:	dc05      	bgt.n	800e37a <__swbuf_r+0x4e>
 800e36e:	4621      	mov	r1, r4
 800e370:	4628      	mov	r0, r5
 800e372:	f7ff fa7b 	bl	800d86c <_fflush_r>
 800e376:	2800      	cmp	r0, #0
 800e378:	d1ed      	bne.n	800e356 <__swbuf_r+0x2a>
 800e37a:	68a3      	ldr	r3, [r4, #8]
 800e37c:	3b01      	subs	r3, #1
 800e37e:	60a3      	str	r3, [r4, #8]
 800e380:	6823      	ldr	r3, [r4, #0]
 800e382:	1c5a      	adds	r2, r3, #1
 800e384:	6022      	str	r2, [r4, #0]
 800e386:	701e      	strb	r6, [r3, #0]
 800e388:	6962      	ldr	r2, [r4, #20]
 800e38a:	1c43      	adds	r3, r0, #1
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d004      	beq.n	800e39a <__swbuf_r+0x6e>
 800e390:	89a3      	ldrh	r3, [r4, #12]
 800e392:	07db      	lsls	r3, r3, #31
 800e394:	d5e1      	bpl.n	800e35a <__swbuf_r+0x2e>
 800e396:	2e0a      	cmp	r6, #10
 800e398:	d1df      	bne.n	800e35a <__swbuf_r+0x2e>
 800e39a:	4621      	mov	r1, r4
 800e39c:	4628      	mov	r0, r5
 800e39e:	f7ff fa65 	bl	800d86c <_fflush_r>
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	d0d9      	beq.n	800e35a <__swbuf_r+0x2e>
 800e3a6:	e7d6      	b.n	800e356 <__swbuf_r+0x2a>

0800e3a8 <__swsetup_r>:
 800e3a8:	b538      	push	{r3, r4, r5, lr}
 800e3aa:	4b29      	ldr	r3, [pc, #164]	@ (800e450 <__swsetup_r+0xa8>)
 800e3ac:	4605      	mov	r5, r0
 800e3ae:	6818      	ldr	r0, [r3, #0]
 800e3b0:	460c      	mov	r4, r1
 800e3b2:	b118      	cbz	r0, 800e3bc <__swsetup_r+0x14>
 800e3b4:	6a03      	ldr	r3, [r0, #32]
 800e3b6:	b90b      	cbnz	r3, 800e3bc <__swsetup_r+0x14>
 800e3b8:	f7fc fbb4 	bl	800ab24 <__sinit>
 800e3bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3c0:	0719      	lsls	r1, r3, #28
 800e3c2:	d422      	bmi.n	800e40a <__swsetup_r+0x62>
 800e3c4:	06da      	lsls	r2, r3, #27
 800e3c6:	d407      	bmi.n	800e3d8 <__swsetup_r+0x30>
 800e3c8:	2209      	movs	r2, #9
 800e3ca:	602a      	str	r2, [r5, #0]
 800e3cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3d0:	81a3      	strh	r3, [r4, #12]
 800e3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d6:	e033      	b.n	800e440 <__swsetup_r+0x98>
 800e3d8:	0758      	lsls	r0, r3, #29
 800e3da:	d512      	bpl.n	800e402 <__swsetup_r+0x5a>
 800e3dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3de:	b141      	cbz	r1, 800e3f2 <__swsetup_r+0x4a>
 800e3e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3e4:	4299      	cmp	r1, r3
 800e3e6:	d002      	beq.n	800e3ee <__swsetup_r+0x46>
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	f7fd fc2d 	bl	800bc48 <_free_r>
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3f2:	89a3      	ldrh	r3, [r4, #12]
 800e3f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e3f8:	81a3      	strh	r3, [r4, #12]
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	6063      	str	r3, [r4, #4]
 800e3fe:	6923      	ldr	r3, [r4, #16]
 800e400:	6023      	str	r3, [r4, #0]
 800e402:	89a3      	ldrh	r3, [r4, #12]
 800e404:	f043 0308 	orr.w	r3, r3, #8
 800e408:	81a3      	strh	r3, [r4, #12]
 800e40a:	6923      	ldr	r3, [r4, #16]
 800e40c:	b94b      	cbnz	r3, 800e422 <__swsetup_r+0x7a>
 800e40e:	89a3      	ldrh	r3, [r4, #12]
 800e410:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e418:	d003      	beq.n	800e422 <__swsetup_r+0x7a>
 800e41a:	4621      	mov	r1, r4
 800e41c:	4628      	mov	r0, r5
 800e41e:	f000 f88b 	bl	800e538 <__smakebuf_r>
 800e422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e426:	f013 0201 	ands.w	r2, r3, #1
 800e42a:	d00a      	beq.n	800e442 <__swsetup_r+0x9a>
 800e42c:	2200      	movs	r2, #0
 800e42e:	60a2      	str	r2, [r4, #8]
 800e430:	6962      	ldr	r2, [r4, #20]
 800e432:	4252      	negs	r2, r2
 800e434:	61a2      	str	r2, [r4, #24]
 800e436:	6922      	ldr	r2, [r4, #16]
 800e438:	b942      	cbnz	r2, 800e44c <__swsetup_r+0xa4>
 800e43a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e43e:	d1c5      	bne.n	800e3cc <__swsetup_r+0x24>
 800e440:	bd38      	pop	{r3, r4, r5, pc}
 800e442:	0799      	lsls	r1, r3, #30
 800e444:	bf58      	it	pl
 800e446:	6962      	ldrpl	r2, [r4, #20]
 800e448:	60a2      	str	r2, [r4, #8]
 800e44a:	e7f4      	b.n	800e436 <__swsetup_r+0x8e>
 800e44c:	2000      	movs	r0, #0
 800e44e:	e7f7      	b.n	800e440 <__swsetup_r+0x98>
 800e450:	2000001c 	.word	0x2000001c

0800e454 <_raise_r>:
 800e454:	291f      	cmp	r1, #31
 800e456:	b538      	push	{r3, r4, r5, lr}
 800e458:	4605      	mov	r5, r0
 800e45a:	460c      	mov	r4, r1
 800e45c:	d904      	bls.n	800e468 <_raise_r+0x14>
 800e45e:	2316      	movs	r3, #22
 800e460:	6003      	str	r3, [r0, #0]
 800e462:	f04f 30ff 	mov.w	r0, #4294967295
 800e466:	bd38      	pop	{r3, r4, r5, pc}
 800e468:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e46a:	b112      	cbz	r2, 800e472 <_raise_r+0x1e>
 800e46c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e470:	b94b      	cbnz	r3, 800e486 <_raise_r+0x32>
 800e472:	4628      	mov	r0, r5
 800e474:	f000 f830 	bl	800e4d8 <_getpid_r>
 800e478:	4622      	mov	r2, r4
 800e47a:	4601      	mov	r1, r0
 800e47c:	4628      	mov	r0, r5
 800e47e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e482:	f000 b817 	b.w	800e4b4 <_kill_r>
 800e486:	2b01      	cmp	r3, #1
 800e488:	d00a      	beq.n	800e4a0 <_raise_r+0x4c>
 800e48a:	1c59      	adds	r1, r3, #1
 800e48c:	d103      	bne.n	800e496 <_raise_r+0x42>
 800e48e:	2316      	movs	r3, #22
 800e490:	6003      	str	r3, [r0, #0]
 800e492:	2001      	movs	r0, #1
 800e494:	e7e7      	b.n	800e466 <_raise_r+0x12>
 800e496:	2100      	movs	r1, #0
 800e498:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e49c:	4620      	mov	r0, r4
 800e49e:	4798      	blx	r3
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	e7e0      	b.n	800e466 <_raise_r+0x12>

0800e4a4 <raise>:
 800e4a4:	4b02      	ldr	r3, [pc, #8]	@ (800e4b0 <raise+0xc>)
 800e4a6:	4601      	mov	r1, r0
 800e4a8:	6818      	ldr	r0, [r3, #0]
 800e4aa:	f7ff bfd3 	b.w	800e454 <_raise_r>
 800e4ae:	bf00      	nop
 800e4b0:	2000001c 	.word	0x2000001c

0800e4b4 <_kill_r>:
 800e4b4:	b538      	push	{r3, r4, r5, lr}
 800e4b6:	4d07      	ldr	r5, [pc, #28]	@ (800e4d4 <_kill_r+0x20>)
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	4608      	mov	r0, r1
 800e4be:	4611      	mov	r1, r2
 800e4c0:	602b      	str	r3, [r5, #0]
 800e4c2:	f7f3 ff41 	bl	8002348 <_kill>
 800e4c6:	1c43      	adds	r3, r0, #1
 800e4c8:	d102      	bne.n	800e4d0 <_kill_r+0x1c>
 800e4ca:	682b      	ldr	r3, [r5, #0]
 800e4cc:	b103      	cbz	r3, 800e4d0 <_kill_r+0x1c>
 800e4ce:	6023      	str	r3, [r4, #0]
 800e4d0:	bd38      	pop	{r3, r4, r5, pc}
 800e4d2:	bf00      	nop
 800e4d4:	20004754 	.word	0x20004754

0800e4d8 <_getpid_r>:
 800e4d8:	f7f3 bf2e 	b.w	8002338 <_getpid>

0800e4dc <_malloc_usable_size_r>:
 800e4dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4e0:	1f18      	subs	r0, r3, #4
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	bfbc      	itt	lt
 800e4e6:	580b      	ldrlt	r3, [r1, r0]
 800e4e8:	18c0      	addlt	r0, r0, r3
 800e4ea:	4770      	bx	lr

0800e4ec <__swhatbuf_r>:
 800e4ec:	b570      	push	{r4, r5, r6, lr}
 800e4ee:	460c      	mov	r4, r1
 800e4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4f4:	2900      	cmp	r1, #0
 800e4f6:	b096      	sub	sp, #88	@ 0x58
 800e4f8:	4615      	mov	r5, r2
 800e4fa:	461e      	mov	r6, r3
 800e4fc:	da0d      	bge.n	800e51a <__swhatbuf_r+0x2e>
 800e4fe:	89a3      	ldrh	r3, [r4, #12]
 800e500:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e504:	f04f 0100 	mov.w	r1, #0
 800e508:	bf14      	ite	ne
 800e50a:	2340      	movne	r3, #64	@ 0x40
 800e50c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e510:	2000      	movs	r0, #0
 800e512:	6031      	str	r1, [r6, #0]
 800e514:	602b      	str	r3, [r5, #0]
 800e516:	b016      	add	sp, #88	@ 0x58
 800e518:	bd70      	pop	{r4, r5, r6, pc}
 800e51a:	466a      	mov	r2, sp
 800e51c:	f000 f848 	bl	800e5b0 <_fstat_r>
 800e520:	2800      	cmp	r0, #0
 800e522:	dbec      	blt.n	800e4fe <__swhatbuf_r+0x12>
 800e524:	9901      	ldr	r1, [sp, #4]
 800e526:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e52a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e52e:	4259      	negs	r1, r3
 800e530:	4159      	adcs	r1, r3
 800e532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e536:	e7eb      	b.n	800e510 <__swhatbuf_r+0x24>

0800e538 <__smakebuf_r>:
 800e538:	898b      	ldrh	r3, [r1, #12]
 800e53a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e53c:	079d      	lsls	r5, r3, #30
 800e53e:	4606      	mov	r6, r0
 800e540:	460c      	mov	r4, r1
 800e542:	d507      	bpl.n	800e554 <__smakebuf_r+0x1c>
 800e544:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e548:	6023      	str	r3, [r4, #0]
 800e54a:	6123      	str	r3, [r4, #16]
 800e54c:	2301      	movs	r3, #1
 800e54e:	6163      	str	r3, [r4, #20]
 800e550:	b003      	add	sp, #12
 800e552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e554:	ab01      	add	r3, sp, #4
 800e556:	466a      	mov	r2, sp
 800e558:	f7ff ffc8 	bl	800e4ec <__swhatbuf_r>
 800e55c:	9f00      	ldr	r7, [sp, #0]
 800e55e:	4605      	mov	r5, r0
 800e560:	4639      	mov	r1, r7
 800e562:	4630      	mov	r0, r6
 800e564:	f7fd fbe4 	bl	800bd30 <_malloc_r>
 800e568:	b948      	cbnz	r0, 800e57e <__smakebuf_r+0x46>
 800e56a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e56e:	059a      	lsls	r2, r3, #22
 800e570:	d4ee      	bmi.n	800e550 <__smakebuf_r+0x18>
 800e572:	f023 0303 	bic.w	r3, r3, #3
 800e576:	f043 0302 	orr.w	r3, r3, #2
 800e57a:	81a3      	strh	r3, [r4, #12]
 800e57c:	e7e2      	b.n	800e544 <__smakebuf_r+0xc>
 800e57e:	89a3      	ldrh	r3, [r4, #12]
 800e580:	6020      	str	r0, [r4, #0]
 800e582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e586:	81a3      	strh	r3, [r4, #12]
 800e588:	9b01      	ldr	r3, [sp, #4]
 800e58a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e58e:	b15b      	cbz	r3, 800e5a8 <__smakebuf_r+0x70>
 800e590:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e594:	4630      	mov	r0, r6
 800e596:	f000 f81d 	bl	800e5d4 <_isatty_r>
 800e59a:	b128      	cbz	r0, 800e5a8 <__smakebuf_r+0x70>
 800e59c:	89a3      	ldrh	r3, [r4, #12]
 800e59e:	f023 0303 	bic.w	r3, r3, #3
 800e5a2:	f043 0301 	orr.w	r3, r3, #1
 800e5a6:	81a3      	strh	r3, [r4, #12]
 800e5a8:	89a3      	ldrh	r3, [r4, #12]
 800e5aa:	431d      	orrs	r5, r3
 800e5ac:	81a5      	strh	r5, [r4, #12]
 800e5ae:	e7cf      	b.n	800e550 <__smakebuf_r+0x18>

0800e5b0 <_fstat_r>:
 800e5b0:	b538      	push	{r3, r4, r5, lr}
 800e5b2:	4d07      	ldr	r5, [pc, #28]	@ (800e5d0 <_fstat_r+0x20>)
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	4604      	mov	r4, r0
 800e5b8:	4608      	mov	r0, r1
 800e5ba:	4611      	mov	r1, r2
 800e5bc:	602b      	str	r3, [r5, #0]
 800e5be:	f7f3 ff23 	bl	8002408 <_fstat>
 800e5c2:	1c43      	adds	r3, r0, #1
 800e5c4:	d102      	bne.n	800e5cc <_fstat_r+0x1c>
 800e5c6:	682b      	ldr	r3, [r5, #0]
 800e5c8:	b103      	cbz	r3, 800e5cc <_fstat_r+0x1c>
 800e5ca:	6023      	str	r3, [r4, #0]
 800e5cc:	bd38      	pop	{r3, r4, r5, pc}
 800e5ce:	bf00      	nop
 800e5d0:	20004754 	.word	0x20004754

0800e5d4 <_isatty_r>:
 800e5d4:	b538      	push	{r3, r4, r5, lr}
 800e5d6:	4d06      	ldr	r5, [pc, #24]	@ (800e5f0 <_isatty_r+0x1c>)
 800e5d8:	2300      	movs	r3, #0
 800e5da:	4604      	mov	r4, r0
 800e5dc:	4608      	mov	r0, r1
 800e5de:	602b      	str	r3, [r5, #0]
 800e5e0:	f7f3 ff22 	bl	8002428 <_isatty>
 800e5e4:	1c43      	adds	r3, r0, #1
 800e5e6:	d102      	bne.n	800e5ee <_isatty_r+0x1a>
 800e5e8:	682b      	ldr	r3, [r5, #0]
 800e5ea:	b103      	cbz	r3, 800e5ee <_isatty_r+0x1a>
 800e5ec:	6023      	str	r3, [r4, #0]
 800e5ee:	bd38      	pop	{r3, r4, r5, pc}
 800e5f0:	20004754 	.word	0x20004754

0800e5f4 <_init>:
 800e5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f6:	bf00      	nop
 800e5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5fa:	bc08      	pop	{r3}
 800e5fc:	469e      	mov	lr, r3
 800e5fe:	4770      	bx	lr

0800e600 <_fini>:
 800e600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e602:	bf00      	nop
 800e604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e606:	bc08      	pop	{r3}
 800e608:	469e      	mov	lr, r3
 800e60a:	4770      	bx	lr
